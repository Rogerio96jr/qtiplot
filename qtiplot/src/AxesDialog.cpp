/***************************************************************************
    File                 : AxesDialog.cpp
    Project              : QtiPlot
    --------------------------------------------------------------------
    Copyright            : (C) 2006 by Ion Vasilief, Tilman Hoener zu Siederdissen
    Email (use @ for *)  : ion_vasilief*yahoo.fr, thzs*gmx.net
    Description          : General plot options dialog
                           
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *  This program is free software; you can redistribute it and/or modify   *
 *  it under the terms of the GNU General Public License as published by   *
 *  the Free Software Foundation; either version 2 of the License, or      *
 *  (at your option) any later version.                                    *
 *                                                                         *
 *  This program is distributed in the hope that it will be useful,        *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *  GNU General Public License for more details.                           *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the Free Software           *
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor,                    *
 *   Boston, MA  02110-1301  USA                                           *
 *                                                                         *
 ***************************************************************************/
#include "AxesDialog.h"
#include "TextDialog.h"
#include "ColorBox.h"
#include "Graph.h"
#include "Plot.h"
#include "MyParser.h"
#include "ColorButton.h"
#include "MultiLayer.h"
#include "TextFormatButtons.h"

#include <QColorDialog>
#include <QCheckBox>
#include <QComboBox>
#include <QLabel>
#include <QLineEdit>
#include <QPushButton>
#include <QSpinBox>
#include <QTabWidget>
#include <QLayout>
#include <QMessageBox>
#include <QFontDialog>
#include <QDate>
#include <QList>
#include <QListWidget>
#include <QVector>
#include <QGroupBox>

#include <qwt_plot.h>
#include <qwt_scale_widget.h>
#include <qwt_scale_engine.h>

/* XPM */
static const char* const bottom_scl_xpm[] = {
"36 38 75 1",
" 	c None",
".	c #FFFFFF",
"+	c #818181",
"@	c #070707",
"#	c #101010",
"$	c #EEEEEE",
"%	c #1D1D1D",
"&	c #ACACAC",
"*	c #151515",
"=	c #121212",
"-	c #929292",
";	c #242424",
">	c #D5D5D5",
",	c #C9C9C9",
"'	c #2A2A2A",
")	c #5E5E5E",
"!	c #000000",
"~	c #C8C8C8",
"{	c #D2D2D2",
"]	c #090909",
"^	c #060606",
"/	c #FEFEFE",
"(	c #FCFCFC",
"_	c #F7F7F7",
":	c #CECECE",
"<	c #444444",
"[	c #E0E0E0",
"}	c #464646",
"|	c #E8E8E8",
"1	c #282828",
"2	c #D3D3D3",
"3	c #D1D1D1",
"4	c #A4A4A4",
"5	c #484848",
"6	c #EBEBEB",
"7	c #7D7D7D",
"8	c #050505",
"9	c #7F7F7F",
"0	c #FDFDFD",
"a	c #7D6F6F",
"b	c #F38C82",
"c	c #E71E09",
"d	c #E82612",
"e	c #FDEFEE",
"f	c #E9321F",
"g	c #F7B3AC",
"h	c #E82B17",
"i	c #E82814",
"j	c #F49C93",
"k	c #EA3826",
"l	c #FBD8D5",
"m	c #F9CEC9",
"n	c #EA3E2C",
"o	c #EF6D5F",
"p	c #E71803",
"q	c #F9CDC8",
"r	c #FAD6D2",
"s	c #E7200B",
"t	c #E71D08",
"u	c #FEFCFC",
"v	c #FEF7F7",
"w	c #FAD2CE",
"x	c #ED5546",
"y	c #FCE2E0",
"z	c #ED5748",
"A	c #FCEAE8",
"B	c #EA3C2A",
"C	c #FAD7D3",
"D	c #FAD5D1",
"E	c #F6ACA5",
"F	c #ED594A",
"G	c #FDECEB",
"H	c #F2897E",
"I	c #E71C07",
"J	c #F28B80",
"....................................",
"......+@#+......$%......&*=-........",
"......;>,'......)!......%~{]........",
"......^/(^......_!........:<........",
"......^((^.......!.......[}|........",
"......123;.......!......456.........",
"......78^9.......!......*!!!........",
"+@#+................................",
";>,'...(!0.......!.......!.....+@#+.",
"^/(^...!!!!!!!!!!!!!!!!!!!!!!..;>,'.",
"^((^...!aaaaaaaaaaaaaaaaaaaa!..^/(^.",
"123;..!!aaaaaaaaaaaaaaaaaaaa!!.^((^.",
"78^9...!aaaaaaaaaaaaaaaaaaaa!..123;.",
".......!aaaaaaaaaaaaaaaaaaaa!..78^9.",
".......!aaaaaaaaaaaaaaaaaaaa!.......",
"$%.....!aaaaaaaaaaaaaaaaaaaa!.......",
")!.....!aaaaaaaaaaaaaaaaaaaa!..$%...",
"_!.....!aaaaaaaaaaaaaaaaaaaa!..)!...",
".!....!!aaaaaaaaaaaaaaaaaaaa!!._!...",
".!.....!aaaaaaaaaaaaaaaaaaaa!...!...",
".!.....!aaaaaaaaaaaaaaaaaaaa!...!...",
".......!aaaaaaaaaaaaaaaaaaaa!...!...",
"&*=-...!aaaaaaaaaaaaaaaaaaaa!.......",
"%~{]...!aaaaaaaaaaaaaaaaaaaa!..&*=-.",
"..:<...!aaaaaaaaaaaaaaaaaaaa!..%~{].",
".[}|..!!aaaaaaaaaaaaaaaaaaaa!!...:<.",
"456....!aaaaaaaaaaaaaaaaaaaa!...[}|.",
"*!!!...!aaaaaaaaaaaaaaaaaaaa!..456..",
".......!!!!!!!!!!!!!!!!!!!!!!..*!!!.",
".........!........!.......!.........",
"....................................",
"........bcdb.....ef......ghij.......",
"........klmn.....op......fqrs.......",
"........t/ut.....vp........wx.......",
"........tuut......p.......yzA.......",
"........BCDk......p......EFG........",
"........HItJ......p......hppp.......",
"...................................."};

/* XPM */
static const char* const top_scl_xpm[] = {
"36 38 75 1",
" 	c None",
".	c #FFFFFF",
"+	c #F38C82",
"@	c #E71E09",
"#	c #E82612",
"$	c #FEFAFA",
"%	c #E9321F",
"&	c #F7B3AC",
"*	c #E82B17",
"=	c #E82814",
"-	c #F49C93",
";	c #EA3826",
">	c #FBD8D5",
",	c #F9CEC9",
"'	c #EA3E2C",
")	c #EF6D5F",
"!	c #E71803",
"~	c #F9CDC8",
"{	c #FAD6D2",
"]	c #E7200B",
"^	c #E71D08",
"/	c #FEFEFE",
"(	c #FEFCFC",
"_	c #FAD2CE",
":	c #ED5546",
"<	c #FCE2E0",
"[	c #ED5748",
"}	c #FCEAE8",
"|	c #EA3C2A",
"1	c #FAD7D3",
"2	c #FAD5D1",
"3	c #F6ACA5",
"4	c #ED594A",
"5	c #FDF2F1",
"6	c #F2897E",
"7	c #E71C07",
"8	c #F28B80",
"9	c #818181",
"0	c #070707",
"a	c #101010",
"b	c #242424",
"c	c #D5D5D5",
"d	c #C9C9C9",
"e	c #2A2A2A",
"f	c #000000",
"g	c #060606",
"h	c #FCFCFC",
"i	c #7D6F6F",
"j	c #282828",
"k	c #D3D3D3",
"l	c #D1D1D1",
"m	c #7D7D7D",
"n	c #050505",
"o	c #7F7F7F",
"p	c #FAFAFA",
"q	c #1D1D1D",
"r	c #5E5E5E",
"s	c #ACACAC",
"t	c #151515",
"u	c #121212",
"v	c #929292",
"w	c #C8C8C8",
"x	c #D2D2D2",
"y	c #090909",
"z	c #CECECE",
"A	c #444444",
"B	c #E0E0E0",
"C	c #464646",
"D	c #E8E8E8",
"E	c #A4A4A4",
"F	c #484848",
"G	c #F1F1F1",
"H	c #EEEEEE",
"I	c #F7F7F7",
"J	c #EBEBEB",
"....................................",
".......+@#+.....$%......&*=-........",
".......;>,'.....)!......%~{]........",
".......^/(^......!........_:........",
".......^((^......!.......<[}........",
".......|12;......!......345.........",
".......67^8......!......*!!!........",
"90a9................................",
"bcde....f........f.......f.....90a9.",
"g/hg...ffffffffffffffffffffff..bcde.",
"ghhg...fiiiiiiiiiiiiiiiiiiiif..g/hg.",
"jklb..ffiiiiiiiiiiiiiiiiiiiiff.ghhg.",
"mngo...fiiiiiiiiiiiiiiiiiiiif..jklb.",
".......fiiiiiiiiiiiiiiiiiiiif..mngo.",
".......fiiiiiiiiiiiiiiiiiiiif.......",
"pq.....fiiiiiiiiiiiiiiiiiiiif.......",
"rf.....fiiiiiiiiiiiiiiiiiiiif..pq...",
".f.....fiiiiiiiiiiiiiiiiiiiif..rf...",
".f....ffiiiiiiiiiiiiiiiiiiiiff..f...",
".f.....fiiiiiiiiiiiiiiiiiiiif...f...",
".f.....fiiiiiiiiiiiiiiiiiiiif...f...",
".......fiiiiiiiiiiiiiiiiiiiif...f...",
"stuv...fiiiiiiiiiiiiiiiiiiiif.......",
"qwxy...fiiiiiiiiiiiiiiiiiiiif..stuv.",
"..zA...fiiiiiiiiiiiiiiiiiiiif..qwxy.",
".BCD..ffiiiiiiiiiiiiiiiiiiiiff...zA.",
"EFG....fiiiiiiiiiiiiiiiiiiiif...BCD.",
"tfff...fiiiiiiiiiiiiiiiiiiiif..EFG..",
".......ffffffffffffffffffffff..tfff.",
".........f........f.......f.........",
"....................................",
".......90a9......Hq......stuv.......",
".......bcde......rf......qwxy.......",
".......g/hg......If........zA.......",
".......ghhg.......f.......BCD.......",
".......jklb.......f......EFJ........",
".......mngo.......f......tfff.......",
"...................................."};

/* XPM */
static const char* const left_scl_xpm[] = {
"36 36 72 1",
" 	c None",
".	c #FFFFFF",
"+	c #818181",
"@	c #070707",
"#	c #101010",
"$	c #FAFAFA",
"%	c #1D1D1D",
"&	c #ACACAC",
"*	c #151515",
"=	c #121212",
"-	c #929292",
";	c #242424",
">	c #D5D5D5",
",	c #C9C9C9",
"'	c #2A2A2A",
")	c #5E5E5E",
"!	c #000000",
"~	c #C8C8C8",
"{	c #D2D2D2",
"]	c #090909",
"^	c #060606",
"/	c #FEFEFE",
"(	c #FCFCFC",
"_	c #CECECE",
":	c #444444",
"<	c #E0E0E0",
"[	c #464646",
"}	c #E8E8E8",
"|	c #282828",
"1	c #D3D3D3",
"2	c #D1D1D1",
"3	c #A4A4A4",
"4	c #484848",
"5	c #F1F1F1",
"6	c #7D7D7D",
"7	c #050505",
"8	c #7F7F7F",
"9	c #F38C82",
"0	c #E71E09",
"a	c #E82612",
"b	c #EA3826",
"c	c #FBD8D5",
"d	c #F9CEC9",
"e	c #EA3E2C",
"f	c #E71D08",
"g	c #FEFCFC",
"h	c #7D6F6F",
"i	c #EA3C2A",
"j	c #FAD7D3",
"k	c #FAD5D1",
"l	c #F2897E",
"m	c #E71C07",
"n	c #F28B80",
"o	c #FEFAFA",
"p	c #E9321F",
"q	c #EF6D5F",
"r	c #E71803",
"s	c #F7B3AC",
"t	c #E82B17",
"u	c #E82814",
"v	c #F49C93",
"w	c #F9CDC8",
"x	c #FAD6D2",
"y	c #E7200B",
"z	c #FAD2CE",
"A	c #ED5546",
"B	c #FCE2E0",
"C	c #ED5748",
"D	c #FCEAE8",
"E	c #F6ACA5",
"F	c #ED594A",
"G	c #FDF2F1",
".......+@#+......$%......&*=-.......",
".......;>,'......)!......%~{].......",
".......^/(^.......!........_:.......",
".......^((^.......!.......<[}.......",
".......|12;.......!......345........",
".......67^8.......!......*!!!.......",
"....................................",
".90a9...!........!.......!.....+@#+.",
".bcde..!!!!!!!!!!!!!!!!!!!!!!..;>,'.",
".f/gf..!hhhhhhhhhhhhhhhhhhhh!..^/(^.",
".fggf.!!hhhhhhhhhhhhhhhhhhhh!!.^((^.",
".ijkb..!hhhhhhhhhhhhhhhhhhhh!..|12;.",
".lmfn..!hhhhhhhhhhhhhhhhhhhh!..67^8.",
".......!hhhhhhhhhhhhhhhhhhhh!.......",
".......!hhhhhhhhhhhhhhhhhhhh!.......",
"..op...!hhhhhhhhhhhhhhhhhhhh!...%...",
"..qr...!hhhhhhhhhhhhhhhhhhhh!..)!...",
"...r..!!hhhhhhhhhhhhhhhhhhhh!!..!...",
"...r...!hhhhhhhhhhhhhhhhhhhh!...!...",
"...r...!hhhhhhhhhhhhhhhhhhhh!...!...",
"...r...!hhhhhhhhhhhhhhhhhhhh!...!...",
".......!hhhhhhhhhhhhhhhhhhhh!.......",
".stuv..!hhhhhhhhhhhhhhhhhhhh!..&*=-.",
".pwxy..!hhhhhhhhhhhhhhhhhhhh!..%~{].",
"...zA.!!hhhhhhhhhhhhhhhhhhhh!!..._:.",
"..BCD..!hhhhhhhhhhhhhhhhhhhh!...<[}.",
".EFG...!hhhhhhhhhhhhhhhhhhhh!..34...",
".trrr..!!!!!!!!!!!!!!!!!!!!!!..*!!!.",
".........!........!.......!.........",
"....................................",
".......+@#+......$%......&*=-.......",
".......;>,'......)!......%~{].......",
".......^/(^.......!........_:.......",
".......^((^.......!.......<[}.......",
".......|12;.......!......345........",
".......67^8.......!......*!!!......."};

/* XPM */
static const char* const right_scl_xpm[] = {
"36 36 72 1",
" 	c None",
".	c #FFFFFF",
"+	c #818181",
"@	c #070707",
"#	c #101010",
"$	c #FAFAFA",
"%	c #1D1D1D",
"&	c #ACACAC",
"*	c #151515",
"=	c #121212",
"-	c #929292",
";	c #242424",
">	c #D5D5D5",
",	c #C9C9C9",
"'	c #2A2A2A",
")	c #5E5E5E",
"!	c #000000",
"~	c #C8C8C8",
"{	c #D2D2D2",
"]	c #090909",
"^	c #060606",
"/	c #FEFEFE",
"(	c #FCFCFC",
"_	c #CECECE",
":	c #444444",
"<	c #E0E0E0",
"[	c #464646",
"}	c #E8E8E8",
"|	c #282828",
"1	c #D3D3D3",
"2	c #D1D1D1",
"3	c #A4A4A4",
"4	c #484848",
"5	c #F1F1F1",
"6	c #7D7D7D",
"7	c #050505",
"8	c #7F7F7F",
"9	c #F38C82",
"0	c #E71E09",
"a	c #E82612",
"b	c #EA3826",
"c	c #FBD8D5",
"d	c #F9CEC9",
"e	c #EA3E2C",
"f	c #7D6F6F",
"g	c #E71D08",
"h	c #FEFCFC",
"i	c #EA3C2A",
"j	c #FAD7D3",
"k	c #FAD5D1",
"l	c #F2897E",
"m	c #E71C07",
"n	c #F28B80",
"o	c #FEFAFA",
"p	c #E9321F",
"q	c #EF6D5F",
"r	c #E71803",
"s	c #F7B3AC",
"t	c #E82B17",
"u	c #E82814",
"v	c #F49C93",
"w	c #F9CDC8",
"x	c #FAD6D2",
"y	c #E7200B",
"z	c #FAD2CE",
"A	c #ED5546",
"B	c #FCE2E0",
"C	c #ED5748",
"D	c #FCEAE8",
"E	c #F6ACA5",
"F	c #ED594A",
"G	c #FDF2F1",
".......+@#+......$%......&*=-.......",
".......;>,'......)!......%~{].......",
".......^/(^.......!........_:.......",
".......^((^.......!.......<[}.......",
".......|12;.......!......345........",
".......67^8.......!......*!!!.......",
"....................................",
".+@#+...!........!.......!.....90a9.",
".;>,'..!!!!!!!!!!!!!!!!!!!!!!..bcde.",
".^/(^..!ffffffffffffffffffff!..g/hg.",
".^((^.!!ffffffffffffffffffff!!.ghhg.",
".|12;..!ffffffffffffffffffff!..ijkb.",
".67^8..!ffffffffffffffffffff!..lmgn.",
".......!ffffffffffffffffffff!.......",
".......!ffffffffffffffffffff!.......",
".$%....!ffffffffffffffffffff!...op..",
".)!....!ffffffffffffffffffff!...qr..",
"..!...!!ffffffffffffffffffff!!...r..",
"..!....!ffffffffffffffffffff!....r..",
"..!....!ffffffffffffffffffff!....r..",
"..!....!ffffffffffffffffffff!....r..",
".......!ffffffffffffffffffff!.......",
".&*=-..!ffffffffffffffffffff!..stuv.",
".%~{]..!ffffffffffffffffffff!..pwxy.",
"..._:.!!ffffffffffffffffffff!!...zA.",
"..<[}..!ffffffffffffffffffff!...BCD.",
".345...!ffffffffffffffffffff!..EFG..",
".*!!!..!!!!!!!!!!!!!!!!!!!!!!..trrr.",
".........!........!.......!.........",
"....................................",
".......+@#+......$%......&*=-.......",
".......;>,'......)!......%~{].......",
".......^/(^.......!........_:.......",
".......^((^.......!.......<[}.......",
".......|12;.......!......345........",
".......67^8.......!......*!!!......."};

static const char* const image2_data[] = { 
"74 77 171 2",
"  	c None",
". 	c #FFFFFF",
"+ 	c #E0E0E0",
"@ 	c #FAFAFA",
"# 	c #363636",
"$ 	c #ABABAB",
"% 	c #000000",
"& 	c #BDBDBD",
"* 	c #737373",
"= 	c #858585",
"- 	c #FFE8E8",
"; 	c #FFF7F7",
"> 	c #FFD1D1",
", 	c #FFF0F0",
"' 	c #E6E6E6",
") 	c #FFB2B2",
"! 	c #FFE6E6",
"~ 	c #FF6666",
"{ 	c #FFCCCC",
"] 	c #C9C9C9",
"^ 	c #939493",
"/ 	c #808080",
"( 	c #878787",
"_ 	c #D6D6D6",
": 	c #969696",
"< 	c #030303",
"[ 	c #383838",
"} 	c #4C4C4C",
"| 	c #1A1A1A",
"1 	c #080808",
"2 	c #C2C2C2",
"3 	c #EBEBEB",
"4 	c #F0F0F0",
"5 	c #8C8C8C",
"6 	c #7A7A7A",
"7 	c #A3A3A3",
"8 	c #999999",
"9 	c #A1A1A1",
"0 	c #828282",
"a 	c #949494",
"b 	c #F2F2F2",
"c 	c #474747",
"d 	c #545454",
"e 	c #0F0F0F",
"f 	c #B5B5B5",
"g 	c #CFCFCF",
"h 	c #262626",
"i 	c #333333",
"j 	c #DEDEDE",
"k 	c #FDFDFD",
"l 	c #D7D7D7",
"m 	c #B7B7B7",
"n 	c #C4C4C4",
"o 	c #F7F7F7",
"p 	c #CCCCCC",
"q 	c #2E2E2E",
"r 	c #B2B2B2",
"s 	c #DFDFDF",
"t 	c #ACACAC",
"u 	c #ADADAD",
"v 	c #D3D3D3",
"w 	c #CDCDCD",
"x 	c #AAAAAA",
"y 	c #D4C3C3",
"z 	c #A9A9A9",
"A 	c #AAA8A8",
"B 	c #DB7F7F",
"C 	c #E3E3E3",
"D 	c #E5E5E5",
"E 	c #F2DADA",
"F 	c #B19999",
"G 	c #FFC4C4",
"H 	c #D2D2D2",
"I 	c #FFD4D4",
"J 	c #EA6565",
"K 	c #E2E2E2",
"L 	c #FFA1A1",
"M 	c #C8C8C8",
"N 	c #AFAFAF",
"O 	c #FF9999",
"P 	c #F5C6C6",
"Q 	c #E9E9E9",
"R 	c #B6B6B6",
"S 	c #CFB4B4",
"T 	c #B9B9B9",
"U 	c #F5F5F5",
"V 	c #ACA7A7",
"W 	c #EAEAEA",
"X 	c #F9F9F9",
"Y 	c #B8B8B8",
"Z 	c #C0A6A6",
"` 	c #B4B4B4",
" .	c #EFEFEF",
"..	c #F2C3C3",
"+.	c #EEEEEE",
"@.	c #BCBCBC",
"#.	c #C5C5C5",
"$.	c #DADADA",
"%.	c #BEBEBE",
"&.	c #B0B0B0",
"*.	c #FBFBFB",
"=.	c #C6C6C6",
"-.	c #B1B1B1",
";.	c #BABABA",
">.	c #AEAEAE",
",.	c #D0D0D0",
"'.	c #FCFCFC",
").	c #141414",
"!.	c #D8D8D8",
"~.	c #C7C7C7",
"{.	c #575757",
"].	c #3D3D3D",
"^.	c #C3C3C3",
"/.	c #5E5E5E",
"(.	c #7D7D7D",
"_.	c #B3B3B3",
":.	c #F6C8C8",
"<.	c #757575",
"[.	c #919191",
"}.	c #CAB3B3",
"|.	c #EDEDED",
"1.	c #ADA8A8",
"2.	c #666666",
"3.	c #2B2B2B",
"4.	c #BBBBBB",
"5.	c #C9AAAA",
"6.	c #292929",
"7.	c #D4D4D4",
"8.	c #FBC9C9",
"9.	c #E8E8E8",
"0.	c #9C9C9C",
"a.	c #E4E4E4",
"b.	c #E7E7E7",
"c.	c #CACACA",
"d.	c #C1C1C1",
"e.	c #E39090",
"f.	c #CBCBCB",
"g.	c #ADA3A3",
"h.	c #C8B0B0",
"i.	c #F59A9A",
"j.	c #C0A9A9",
"k.	c #C9BFBF",
"l.	c #7A4747",
"m.	c #A18C8C",
"n.	c #8C8282",
"o.	c #332929",
"p.	c #242424",
"q.	c #0A0A0A",
"r.	c #454545",
"s.	c #595959",
"t.	c #525252",
"u.	c #5C5C5C",
"v.	c #D9D9D9",
"w.	c #121212",
"x.	c #8A8A8A",
"y.	c #171717",
"z.	c #A8A8A8",
"A.	c #696969",
"B.	c #707070",
"C.	c #9E9E9E",
"D.	c #404040",
"E.	c #616161",
"F.	c #8F8F8F",
"G.	c #4F4F4F",
"H.	c #050505",
"I.	c #DBDBDB",
"J.	c #4A4A4A",
"K.	c #212121",
"L.	c #3B3B3B",
"M.	c #636363",
"N.	c #D1D1D1",
". . . . . . . . . . + . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . @ # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . $ % & . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . * % = . . . . . . . . . . . - . . . . . . . . . . . ; > . . . . . . . . . . . . , . . . . . . . . . . . - - . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . ] ^ / ( _ . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . : < [ } | 1 ] ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . 2 ' . . 3 % / ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . 4 % 5 ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . 6 1 + ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . 7 < 8 @ 5 % 9 . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . 0 < a . b c % d . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . b d e f . . . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". g h i j . . . . ' % . . . . . . . . . . . . ) . . . . k l m m m n o ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
"p 1 q $ r r r g . ' % . . . . . . . . . . . . ) . . . s t u ] v w r x y ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
"7 i i i i i i : . ' % . . . . . . . . . . . . ) . . p z _ . . . . . l A B . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . ) . C x D . . . . . . . E F ] . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . G . u H . . . . . . . . I J x K . . . . . . . . . . { . . . . . . . . . . . L G . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { M N . . . . . . . . . { ~ _ $ o . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . P x Q . . . . . . . . . { ~ . & R . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . S T . . . . . . . . . . { ~ . U $ _ . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . 4 V W . . . . . . . . . . { ~ . . K x X . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . Y Z . . . . . . . . . . . { ~ . . . ` n . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . .  .x ... . . . . . . . . . . { ~ . . . +.$ +.. . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . @.n { . . . . . . . . . . . { ~ . . . . #.R . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . x +.{ . . . . . . . . . . . { ~ . . . . X z o . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . $.u . { . . . . . . . . . . . { ~ . . . . . %.&.*.. . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . ` =.. { . . . . . . . . . . . { ~ . . . . . . -.=.. . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . 4 z X . { . . . . . . . . . . . { ~ . . . . . . + t . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . #.;.. . { . . . . . . . . . . . { ~ . . . . . . . >.v . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . u $.. . { . . . . . . . . . . . { ~ . . . . . . . _ t . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . n 2 . ' % . . . . . . . + t k . . { . . . . . . . . . . . { ~ . . . . . . . . t ,.. . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . '.& ).5 . ' % . . . . . . . m #.. . . { . . . . . . . . . . . { ~ . . . . . . . . !.t . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . f % % % ~.. ' % . . . . . . . x W . . . { . . . . . . . . . . . { ~ . . . . . . . . . N ] . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . a 1 @ . ' % . . . . . . s u . . . . { . . . . . . . . . . . { ~ . . . . . . . . . l u k { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . {.].. . ' % . . . . . . %.%.. . . . { . . . . . . . . . . . { ~ . . . . . . . . . . r ^.{ . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . | 6 . U /.% (.. . . . . _.' . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . 4 u :.. . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . + % r . o <.% [.. . . . o $ '.. . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . ^.}.. . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . 7 % |.. . ' % . . . . . ,._.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . o 1.D . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . 2.3.. . . ' % . . . . . 4.=.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . 5.-.. . . . . . . . . . O { . . . . . . . . . . . ",
". . p p 6.} p + . ' % . . . . . _.7.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . 8.t ,.. . . . . . . . . O { . . . . . . . . . . . ",
". 9.i i i i i 0.. ' % . . . . . x +.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { C x a.. . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . x . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . ,.u . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . b.t . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . &.4.. . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . ^.T . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . X u c.. . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . m H . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . +.$ p . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . t C . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . +.x _ . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . z X . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . + x _ . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . U x . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . K x H . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . a.f . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . ' &.d.X O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . $.-.. . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . X _.>.e.{ . . . . . . . . . . . ",
". . . . . . . . . ' % . . . M 4.. . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . f.g.h.U . . . . . . . . . . ",
". . . . . . . . . ' % . . . $.,.. . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . i.j.x Y b . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { b.@.x &.~.D . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . U f.m @.. . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . k.l.. . . . . . . . . . . . { . . . . . . . . . . . m.n.. . . . . . . 2 C . . ",
". . . . . . . . . ' % i i i i i i i i i i i i o.i i i i i i i i i i i p.q.i i i i i i i i i i i i o.i i i i i i i i i i i | ).i i i i i i i ).< r.~.",
". . . . . . . . . . Y r r r r r r r r r r r r r r r r r r r r r r r r (.p.r r r r r r r r r r r r r r r r r r r r r r r r s.c r r r r r r r t.u.2 . ",
". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 ] . . . . . . . . . . . . . . . . . . . . . . . . + v.. . . . . . . . . . . ",
". . . . '.= ).% w.[.. . . . . . . . . . . . . . . . . . . . . . . . . . x.8 . . . . . . . . . . . . . . . . . . . . . ~.2.[ i c 2 . . . . . . . . . ",
". . . . 2.y.z.p A.< j . . . . . . . . . . . . . . . . . . . . . . b &.B.< C.. . . . . . . . . . . . . . . . . . . . . D.t.[.a 3.1 9.. . . . . . . . ",
". . . p % &.. . + % r . . . . . . . . . . . . . . . . . . . . . . 2 } i % v.. . . . . . . . . . . . . . . . . . . . . 3 . . . &.% p . . . . . . . . ",
". . . E.h . . . ' % r . . . . . . . . . . . . . . . . . . . . . . . . / ).. . . . . . . . . . . . . . . . . . . . . . . . . . F.< 9.. . . . . . . . ",
". . . | * . . . ~.% ~.. . . . . . . . . . . . . . . . . . . . . . . . c G.. . . . . . . . . . . . . . . . . . . . . . . . . + ).E.. . . . . . . . . ",
". . j % &.. . . a H.U . . . . . . . . . . . . . . . . . . . . . . . '.q.x.. . . . . . . . . . . . . . . . . . . . . . . . j h # U . . . . . . . . . ",
". . Y % I.. . . G.D.. . . . . . . . . . . . . . . . . . . . . . . . p % ~.. . . . . . . . . . . . . . . . . . . . . . . n y.J.4 . . . . . . . . . . ",
". . r % ' . . 9.1 8 . . . . . . . . . . . . . . . . . . . . . . . . a 1 o . . . . . . . . . . . . . . . . . . . . . . [.H.<.'.. . . . . . . . . . . ",
". . & % 2 . '.s.K.U . . . . . . . . . . . . . . . . . . . . . . . . d L.. . . . . . . . . . . . . . . . . . . . . |.t.w.r . . . . . . . . . . . . . ",
". . @ 6.).} h y.p . . . . . . . . . . . . . . . . . . . . . . @ / / ).# / Y . . . . . . . . . . . . . . . . . . . M.% J.2.2.2.2.N.. . . . . . . . . ",
". . . 3 F./ a 4 . . . . . . . . . . . . . . . . . . . . . . . |./ / / / / n . . . . . . . . . . . . . . . . . . . 0./ / / / / / 9.. . . . . . . . . "};

static const char* const image3_data[] = { 
"74 77 168 2",
"  	c None",
". 	c #FFFFFF",
"+ 	c #E0E0E0",
"@ 	c #FAFAFA",
"# 	c #363636",
"$ 	c #ABABAB",
"% 	c #000000",
"& 	c #BDBDBD",
"* 	c #737373",
"= 	c #858585",
"- 	c #E6E6E6",
"; 	c #C9C9C9",
"> 	c #939493",
", 	c #808080",
"' 	c #878787",
") 	c #D6D6D6",
"! 	c #969696",
"~ 	c #030303",
"{ 	c #383838",
"] 	c #4C4C4C",
"^ 	c #1A1A1A",
"/ 	c #080808",
"( 	c #C2C2C2",
"_ 	c #EBEBEB",
": 	c #F0F0F0",
"< 	c #8C8C8C",
"[ 	c #7A7A7A",
"} 	c #A3A3A3",
"| 	c #999999",
"1 	c #A1A1A1",
"2 	c #FFE6E6",
"3 	c #FFF0F0",
"4 	c #828282",
"5 	c #949494",
"6 	c #F2F2F2",
"7 	c #474747",
"8 	c #545454",
"9 	c #FF8080",
"0 	c #FFB2B2",
"a 	c #0F0F0F",
"b 	c #B5B5B5",
"c 	c #CFCFCF",
"d 	c #262626",
"e 	c #333333",
"f 	c #DEDEDE",
"g 	c #FDFDFD",
"h 	c #D7D7D7",
"i 	c #B7B7B7",
"j 	c #C4C4C4",
"k 	c #F7F7F7",
"l 	c #CCCCCC",
"m 	c #2E2E2E",
"n 	c #B2B2B2",
"o 	c #DFDFDF",
"p 	c #ACACAC",
"q 	c #ADADAD",
"r 	c #D3D3D3",
"s 	c #CDCDCD",
"t 	c #AAAAAA",
"u 	c #D4D4D4",
"v 	c #A9A9A9",
"w 	c #DBDBDB",
"x 	c #E3E3E3",
"y 	c #E5E5E5",
"z 	c #B1B1B1",
"A 	c #D2D2D2",
"B 	c #EAEAEA",
"C 	c #E2E2E2",
"D 	c #C8C8C8",
"E 	c #AFAFAF",
"F 	c #F5F5F5",
"G 	c #E9E9E9",
"H 	c #B6B6B6",
"I 	c #B9B9B9",
"J 	c #F9F9F9",
"K 	c #B8B8B8",
"L 	c #C0C0C0",
"M 	c #B4B4B4",
"N 	c #EFD9D9",
"O 	c #AAA8A8",
"P 	c #F2DBDB",
"Q 	c #EED6D6",
"R 	c #ABA8A8",
"S 	c #EED8D8",
"T 	c #BCB1B1",
"U 	c #C4B6B6",
"V 	c #C5B7B7",
"W 	c #B6ADAD",
"X 	c #EEEEEE",
"Y 	c #DADADA",
"Z 	c #BEBEBE",
"` 	c #B0B0B0",
" .	c #FBFBFB",
"..	c #C6C6C6",
"+.	c #C5C5C5",
"@.	c #BABABA",
"#.	c #AEAEAE",
"$.	c #D0D0D0",
"%.	c #FCFCFC",
"&.	c #141414",
"*.	c #D8D8D8",
"=.	c #C7C7C7",
"-.	c #575757",
";.	c #3D3D3D",
">.	c #C3C3C3",
",.	c #5E5E5E",
"'.	c #7D6E6E",
").	c #FF9999",
"!.	c #B39D9D",
"~.	c #E69292",
"{.	c #F09393",
"].	c #ADA2A2",
"^.	c #F49999",
"/.	c #FFC2C2",
"(.	c #757575",
"_.	c #918787",
":.	c #F7AEAE",
"<.	c #ABA6A6",
"[.	c #FCB2B2",
"}.	c #C3A0A0",
"|.	c #C7A4A4",
"1.	c #FFD1D1",
"2.	c #EDEDED",
"3.	c #B3B3B3",
"4.	c #666666",
"5.	c #2B2B2B",
"6.	c #BBBBBB",
"7.	c #292929",
"8.	c #E8E8E8",
"9.	c #9C9C9C",
"0.	c #E4E4E4",
"a.	c #E7E7E7",
"b.	c #CACACA",
"c.	c #E4A7A7",
"d.	c #B59F9F",
"e.	c #E6A7A7",
"f.	c #B0A3A3",
"g.	c #C19E9E",
"h.	c #F9B0B0",
"i.	c #CBCBCB",
"j.	c #F4F4F4",
"k.	c #BCBCBC",
"l.	c #707070",
"m.	c #242424",
"n.	c #0A0A0A",
"o.	c #454545",
"p.	c #7D7D7D",
"q.	c #595959",
"r.	c #525252",
"s.	c #5C5C5C",
"t.	c #D9D9D9",
"u.	c #121212",
"v.	c #919191",
"w.	c #8A8A8A",
"x.	c #171717",
"y.	c #A8A8A8",
"z.	c #696969",
"A.	c #9E9E9E",
"B.	c #404040",
"C.	c #616161",
"D.	c #8F8F8F",
"E.	c #4F4F4F",
"F.	c #050505",
"G.	c #4A4A4A",
"H.	c #212121",
"I.	c #3B3B3B",
"J.	c #636363",
"K.	c #D1D1D1",
". . . . . . . . . . + . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . @ # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . $ % & . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . * % = . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . ; > , ' ) . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . ! ~ { ] ^ / ; - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . ( - . . _ % , - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . : % < - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . [ / + - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . } ~ | @ < % 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 . . . ",
". . . . 4 ~ 5 . 6 7 % 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 0 . . . ",
". . 6 8 a b . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". c d e f . . . . - % . . . . . . . . . . . . . . . . . g h i i i j k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
"l / m $ n n n c . - % . . . . . . . . . . . . . . . . o p q ; r s n t u . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
"} e e e e e e ! . - % . . . . . . . . . . . . . . . l v ) . . . . . h t w . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . x t y . . . . . . . 6 z ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . q A . . . . . . . . . B t C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . D E . . . . . . . . . . . ) $ k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . F t G . . . . . . . . . . . . & H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . c I . . . . . . . . . . . . . F $ ) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . : p B . . . . . . . . . . . . . . C t J . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . K L . . . . . . . . . . . . . . . . M j . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % 2 2 2 2 2 2 2 2 2 2 N O P 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 Q R S 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 . . . ",
". . . . . . . . . - % 2 2 2 2 2 2 2 2 2 2 T U 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 V W 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 . . . ",
". . . . . . . . . - % . . . . . . . . . . t X . . . . . . . . . . . . . . . . . . J v k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . Y q . . . . . . . . . . . . . . . . . . . . Z `  .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . M ... . . . . . . . . . . . . . . . . . . . . z ... . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . : v J . . . . . . . . . . . . . . . . . . . . . + p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . +.@.. . . . . . . . . . . . . . . . . . . . . . . #.r . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . q Y . . . . . . . . . . . . . . . . . . . . . . . ) p . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . j ( . - % . . . . . . . + p g . . . . . . . . . . . . . . . . . . . . . . . . p $.. . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . %.& &.< . - % . . . . . . . i +.. . . . . . . . . . . . . . . . . . . . . . . . . *.p . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . b % % % =.. - % . . . . . . . t B . . . . . . . . . . . . . . . . . . . . . . . . . . E ; . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . 5 / @ . - % . . . . . . o q . . . . . . . . . . . . . . . . . . . . . . . . . . . h q g . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . -.;.. . - % . . . . . . Z Z . . . . . . . . . . . . . . . . . . . . . . . . . . . . n >.. . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . ^ [ . F ,.% '.).).).).).!.~.).).).).).).).).).).).).).).).).).).).).).).).).).).).).{.].^.).).).).).).).).).).).).).).).).).).).)./.. . . ",
". . . . + % n . k (.% _.0 0 0 0 :.<.[.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 }.|.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.. . . ",
". . . . } % 2.. . - % . . . . . $.3.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . k p y . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . 4.5.. . . - % . . . . . 6.... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ; z . . . . . . . . . . . . . . . . . . . . . . . ",
". . l l 7.] l + . - % . . . . . 3.u . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  .p $.. . . . . . . . . . . . . . . . . . . . . . ",
". 8.e e e e e 9.. - % . . . . . t X . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . x t 0.. . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . t . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . $.q . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . a.p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ` 6.. . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . >.I . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . J q b.. . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . i A . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . X $ l . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . p x . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . X t ) . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . v J . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . + t ) . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . F t . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . C t A . . . . . . . . . . . . . . . ",
". . . . . . . . . - % 0 0 0 c.d.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 e.f.g.h.0 0 0 0 0 0 0 0 0 1.. . . ",
". . . . . . . . . - % . . . Y z . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . J 3.#.x . . . . . . . . . . . . ",
". . . . . . . . . - % . . . D 6.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . i.p D F . . . . . . . . . . ",
". . . . . . . . . - % . . . Y $.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . j.L t K 6 . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a.k.t ` =.y . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . F i.i k.. . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . ; l.. . . . . . . . . . . . . . . . . . . . . . . . 1 < . . . . . . . ( x . . ",
". . . . . . . . . - % e e e e e e e e e e e e e e e e e e e e e e e e m.n.e e e e e e e e e e e e e e e e e e e e e e e e ^ &.e e e e e e e &.~ o.=.",
". . . . . . . . . . K n n n n n n n n n n n n n n n n n n n n n n n n p.m.n n n n n n n n n n n n n n n n n n n n n n n n q.7 n n n n n n n r.s.( . ",
". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . : ; . . . . . . . . . . . . . . . . . . . . . . . . + t.. . . . . . . . . . . ",
". . . . %.= &.% u.v.. . . . . . . . . . . . . . . . . . . . . . . . . . w.| . . . . . . . . . . . . . . . . . . . . . =.4.{ e 7 ( . . . . . . . . . ",
". . . . 4.x.y.l z.~ f . . . . . . . . . . . . . . . . . . . . . . 6 ` l.~ A.. . . . . . . . . . . . . . . . . . . . . B.r.v.5 5./ 8.. . . . . . . . ",
". . . l % ` . . + % n . . . . . . . . . . . . . . . . . . . . . . ( ] e % t.. . . . . . . . . . . . . . . . . . . . . _ . . . ` % l . . . . . . . . ",
". . . C.d . . . - % n . . . . . . . . . . . . . . . . . . . . . . . . , &.. . . . . . . . . . . . . . . . . . . . . . . . . . D.~ 8.. . . . . . . . ",
". . . ^ * . . . =.% =.. . . . . . . . . . . . . . . . . . . . . . . . 7 E.. . . . . . . . . . . . . . . . . . . . . . . . . + &.C.. . . . . . . . . ",
". . f % ` . . . 5 F.F . . . . . . . . . . . . . . . . . . . . . . . %.n.w.. . . . . . . . . . . . . . . . . . . . . . . . f d # F . . . . . . . . . ",
". . K % w . . . E.B.. . . . . . . . . . . . . . . . . . . . . . . . l % =.. . . . . . . . . . . . . . . . . . . . . . . j x.G.: . . . . . . . . . . ",
". . n % - . . 8./ | . . . . . . . . . . . . . . . . . . . . . . . . 5 / k . . . . . . . . . . . . . . . . . . . . . . v.F.(.%.. . . . . . . . . . . ",
". . & % ( . %.q.H.F . . . . . . . . . . . . . . . . . . . . . . . . 8 I.. . . . . . . . . . . . . . . . . . . . . 2.r.u.n . . . . . . . . . . . . . ",
". . @ 7.&.] d x.l . . . . . . . . . . . . . . . . . . . . . . @ , , &.# , K . . . . . . . . . . . . . . . . . . . J.% G.4.4.4.4.K.. . . . . . . . . ",
". . . _ D., 5 : . . . . . . . . . . . . . . . . . . . . . . . 2., , , , , j . . . . . . . . . . . . . . . . . . . 9., , , , , , 8.. . . . . . . . . "};

static const char* const image4_data[] = { 
"35 32 4 1",
"# c #000000",
"a c #bfbfbf",
"b c #ff0000",
". c #ffffff",
"...................................",
".........#.....#.....#.....#.......",
".....#.#.#.#.#.#.#.#.#.#.#.#.......",
".....#.#.#.#.#.#.#.#.#.#.#.#.......",
"....##########################.....",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#.....",
"..###aaaaaaaaaaaaaaaaaaaaaaaa###...",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#.....",
"..###aaaaaaaaaaaaaaaaaaaaaaaa###...",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#.....",
".####aaaaaaaaaaaaaaaa#aaaaaaa####..",
"....#aaaaaaaaaaaaaaa#a#aaaaaa#.....",
"..###aaaaaaaaaaaaaaa#a#aaaaaa###...",
"....#aaaaaaaaaaaaaa#aaa#aaaaa#.....",
"..###aaaaaaa#aaaaaa#aaa#aaaaa###...",
"....#aaaaaa#a#aaaa#aaaaa#aaaa#.....",
".####aaaaaa#a#aaaa#aaaaa#aaaa####..",
"....#aaaaa#aaa#aa#aaaaaaa#aaa#.....",
"..###aaaaa#aaa###aaaaaaaaa######...",
"....#aaaa#aaaaa#aaaaaaaaaaaaa#.....",
"..###aaaa#aaaaa#aaaaaaaaaaaaa###...",
"....#aaa#aaaaaaa#aaaaaaaaaaaa#.....",
".#######aaaaaaaaa#####aaaaaaa####..",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#.....",
"..###aaaaaaaaaaaaaaaaaaaaaaaa###...",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#.....",
"....bbbbbbbbbbbbbbbbbbbbbbbbbb.....",
"....bbbbbbbbbbbbbbbbbbbbbbbbbb.....",
".....b.b.b.b.b.b.b.b.b.b.b.b.......",
".....b.b.b.b.b.b.b.b.b.b.b.b.......",
".........b.....b.....b.....b.......",
"..................................."};

static const char* const image5_data[] = { 
"33 32 4 1",
"# c #000000",
"b c #bfbfbf",
"a c #ff0000",
". c #ffffff",
".................................",
".........#.....#.....#.....#.....",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
"....aa########################...",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"..aaaabbbbbbbbbbbbbbbbbbbbbbb###.",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"..aaaabbbbbbbbbbbbbbbbbbbbbbb###.",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
".aaaaabbbbbbbbbbbbbbb#bbbbbbb####",
"....aabbbbbbbbbbbbbb#b#bbbbbb#...",
"..aaaabbbbbbbbbbbbbb#b#bbbbbb###.",
"....aabbbbbbbbbbbbb#bbb#bbbbb#...",
"..aaaabbbbbb#bbbbbb#bbb#bbbbb###.",
"....aabbbbb#b#bbbb#bbbbb#bbbb#...",
".aaaaabbbbb#b#bbbb#bbbbb#bbbb####",
"....aabbbb#bbb#bb#bbbbbbb#bbb#...",
"..aaaabbbb#bbb###bbbbbbbbb######.",
"....aabbb#bbbbb#bbbbbbbbbbbbb#...",
"..aaaabbb#bbbbb#bbbbbbbbbbbbb###.",
"....aabb#bbbbbbb#bbbbbbbbbbbb#...",
".aaaaa##bbbbbbbbb#####bbbbbbb####",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"..aaaabbbbbbbbbbbbbbbbbbbbbbb###.",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"....aa########################...",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
".........#.....#.....#.....#.....",
"................................."};

static const char* const image6_data[] = { 
"34 34 4 1",
"a c #000000",
"b c #bfbfbf",
"# c #ff0000",
". c #ffffff",
"..................................",
"..................................",
".........#.....#.....#.....#......",
".....#.#.#.#.#.#.#.#.#.#.#.#......",
".....#.#.#.#.#.#.#.#.#.#.#.#......",
"....##########################....",
"....##########################....",
"..aaabbbbbbbbbbbbbbbbbbbbbbbbaaa..",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"..aaabbbbbbbbbbbbbbbbbbbbbbbbaaa..",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
".aaaabbbbbbbbbbbbbbbbabbbbbbbaaaa.",
"....abbbbbbbbbbbbbbbababbbbbba....",
"..aaabbbbbbbbbbbbbbbababbbbbbaaa..",
"....abbbbbbbbbbbbbbabbbabbbbba....",
"..aaabbbbbbbabbbbbbabbbabbbbbaaa..",
"....abbbbbbababbbbabbbbbabbbba....",
".aaaabbbbbbababbbbabbbbbabbbbaaaa.",
"....abbbbbabbbabbabbbbbbbabbba....",
"..aaabbbbbabbbaaabbbbbbbbbaaaaaa..",
"....abbbbabbbbbabbbbbbbbbbbbba....",
"..aaabbbbabbbbbabbbbbbbbbbbbbaaa..",
"....abbbabbbbbbbabbbbbbbbbbbba....",
".aaaaaaabbbbbbbbbaaaaabbbbbbbaaaa.",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"..aaabbbbbbbbbbbbbbbbbbbbbbbbaaa..",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"....aaaaaaaaaaaaaaaaaaaaaaaaaa....",
".....a.a.a.a.a.a.a.a.a.a.a.a......",
".....a.a.a.a.a.a.a.a.a.a.a.a......",
".........a.....a.....a.....a......",
"..................................",
".................................."};

static const char* const image7_data[] = { 
"32 32 4 1",
"# c #000000",
"b c #bfbfbf",
"a c #ff0000",
". c #ffffff",
"................................",
"........#.....#.....#.....#.....",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"...########################aa...",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
".###bbbbbbbbbbbbbbbbbbbbbbbaaaa.",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
".###bbbbbbbbbbbbbbbbbbbbbbbaaaa.",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
"####bbbbbbbbbbbbbbbb#bbbbbbaaaaa",
"...#bbbbbbbbbbbbbbb#b#bbbbbaa...",
".###bbbbbbbbbbbbbbb#b#bbbbbaaaa.",
"...#bbbbbbbbbbbbbb#bbb#bbbbaa...",
".###bbbbbbb#bbbbbb#bbb#bbbbaaaa.",
"...#bbbbbb#b#bbbb#bbbbb#bbbaa...",
"####bbbbbb#b#bbbb#bbbbb#bbbaaaaa",
"...#bbbbb#bbb#bb#bbbbbbb#bbaa...",
".###bbbbb#bbb###bbbbbbbbb##aaaa.",
"...#bbbb#bbbbb#bbbbbbbbbbbbaa...",
".###bbbb#bbbbb#bbbbbbbbbbbbaaaa.",
"...#bbb#bbbbbbb#bbbbbbbbbbbaa...",
"#######bbbbbbbbb#####bbbbbbaaaaa",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
".###bbbbbbbbbbbbbbbbbbbbbbbaaaa.",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
"...########################aa...",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"........#.....#.....#.....#.....",
"................................"};

#ifndef M_PI
#define M_PI	3.141592653589793238462643 
#endif

AxesDialog::AxesDialog( QWidget* parent, Qt::WFlags fl )
: QDialog( parent, fl )
{
	QPixmap image4( ( const char** ) image4_data );
		QPixmap image5( ( const char** ) image5_data );
		QPixmap image6( ( const char** ) image6_data );
		QPixmap image7( ( const char** ) image7_data );
		setWindowTitle( tr( "QtiPlot - General Plot Options" ) );
		
		generalDialog = new QTabWidget();
		
		initScalesPage();
		initGridPage();
		initAxesPage();
		initFramePage();
		
		QHBoxLayout * bottomButtons = new QHBoxLayout();
		bottomButtons->addStretch();

		buttonApply = new QPushButton();
		buttonApply->setText( tr( "&Apply" ) );
		bottomButtons->addWidget( buttonApply );
		
		buttonOk = new QPushButton();
		buttonOk->setText( tr( "&OK" ) );
		buttonOk->setDefault( true );
		bottomButtons->addWidget( buttonOk );
		
		buttonCancel = new QPushButton();
		buttonCancel->setText( tr( "&Cancel" ) );
		bottomButtons->addWidget( buttonCancel );
		
		QVBoxLayout * mainLayout = new QVBoxLayout(this);
		mainLayout->addWidget(generalDialog);
		mainLayout->addLayout(bottomButtons);
		
		resize(minimumSize());
		
		for (int i=0;i<4;i++)
			titles<<"";

		lastPage = scalesPage;
		
		connect( buttonOk, SIGNAL( clicked() ), this, SLOT( accept() ) );
		connect( buttonCancel, SIGNAL( clicked() ), this, SLOT( reject() ) );
		connect( buttonApply, SIGNAL( clicked() ), this, SLOT(updatePlot() ) );
		connect( generalDialog, SIGNAL( currentChanged ( QWidget * ) ),
  	             this, SLOT(pageChanged ( QWidget * ) ) );
}

void AxesDialog::initScalesPage()
{
	scalesPage = new QWidget();
		
		QGroupBox * middleBox = new QGroupBox(QString());
		QGridLayout * middleLayout = new QGridLayout(middleBox);
		
		middleLayout->addWidget(new QLabel(tr( "From" )), 0, 0);
		boxStart = new QLineEdit();
		middleLayout->addWidget( boxStart, 0, 1 );
		
		middleLayout->addWidget(new QLabel(tr( "To" )), 1, 0);
		boxEnd = new QLineEdit();
		middleLayout->addWidget( boxEnd, 1, 1);
		
		boxScaleTypeLabel = new QLabel(tr( "Type" ));
		boxScaleType = new QComboBox();
		boxScaleType->addItem(tr( "linear" ) );
		boxScaleType->addItem(tr( "logarithmic" ) );
		middleLayout->addWidget( boxScaleTypeLabel, 2, 0);
		middleLayout->addWidget( boxScaleType, 2, 1);
		
		btnInvert = new QCheckBox();
		btnInvert->setText( tr( "Inverted" ) );
		btnInvert->setChecked(false);
		middleLayout->addWidget( btnInvert, 3, 1 );
		
		middleLayout->setRowStretch( 4, 1 );
		
		QGroupBox * rightBox = new QGroupBox(QString());
		QGridLayout * rightLayout = new QGridLayout(rightBox);
		QWidget * stepWidget = new QWidget();
		QVBoxLayout * stepWidgetLayout = new QVBoxLayout( stepWidget );
		
		btnStep = new QCheckBox();
		btnStep->setText( tr( "Step" ) );
		btnStep->setChecked(true);
		rightLayout->addWidget( btnStep, 0, 0 );
		
		boxStep = new QLineEdit();	
		stepWidgetLayout->addWidget( boxStep );
		boxUnit = new QComboBox();
		boxUnit->hide();
		stepWidgetLayout->addWidget( boxUnit );
		
		rightLayout->addWidget( stepWidget, 0, 1 );
		
		btnMajor = new QCheckBox();
		btnMajor->setText( tr( "Major Ticks" ) );
		rightLayout->addWidget( btnMajor, 1, 0);
		
		boxMajorValue = new QSpinBox();
		boxMajorValue->setDisabled(true);
		rightLayout->addWidget( boxMajorValue, 1, 1);
		
		minorBoxLabel = new QLabel( tr( "Minor Ticks" ));
		rightLayout->addWidget( minorBoxLabel, 2, 0);
		
		boxMinorValue = new QSpinBox();
		boxMinorValue->setDisabled(true);
		rightLayout->addWidget( boxMinorValue, 2, 1);
		
		rightLayout->setRowStretch( 3, 1 );
		
		QPixmap image0( ( const char** ) bottom_scl_xpm );
		QPixmap image1( ( const char** ) left_scl_xpm );
		QPixmap image2( ( const char** ) top_scl_xpm );
  	    QPixmap image3( ( const char** ) right_scl_xpm );
		
		axesList = new QListWidget();
		axesList->addItem( new QListWidgetItem(image0, tr( "Bottom" )));
		axesList->addItem( new QListWidgetItem(image1, tr( "Left" )));
		axesList->addItem( new QListWidgetItem(image2, tr( "Top" )));
  	    axesList->addItem( new QListWidgetItem(image3,  tr( "Right" )));
		axesList->setIconSize(image0.size());
		axesList->setCurrentRow(-1);
		
		// calculate a sensible width for the items list 
		// (default QListWidget size is 256 which looks too big)
		QFontMetrics fm(axesList->font());
		int width = 32,i;
		for(i=0 ; i<axesList->count() ; i++)
			if( fm.width(axesList->item(i)->text()) > width)
				width = fm.width(axesList->item(i)->text());
					
		axesList->setMaximumWidth( axesList->iconSize().width() + width + 50 );
		// resize the list to the maximum width
		axesList->resize(axesList->maximumWidth(),axesList->height());
					
		QHBoxLayout* mainLayout = new QHBoxLayout(scalesPage);
		mainLayout->addWidget(axesList);
		mainLayout->addWidget(middleBox);
		mainLayout->addWidget(rightBox);
					
		generalDialog->addTab(scalesPage, tr( "Scale" ));
					
		connect(btnInvert,SIGNAL(clicked()), this, SLOT(updatePlot()));
		connect(axesList,SIGNAL(currentRowChanged(int)), this, SLOT(updateScale()));
		connect(boxScaleType,SIGNAL(activated(int)), this, SLOT(updatePlot()));
		connect(btnStep,SIGNAL(clicked()), this, SLOT(stepEnabled()));
		connect(btnMajor,SIGNAL(clicked()), this, SLOT(stepDisabled()));	
}

void AxesDialog::initGridPage()
{
	gridPage = new QWidget();
		
		QGroupBox * rightBox = new QGroupBox(QString());
		QGridLayout * rightLayout = new QGridLayout(rightBox);
		
		boxMajorGrid = new QCheckBox();
		boxMajorGrid->setText( tr( "Major Grids" ) );
		boxMajorGrid->setChecked(true);
		rightLayout->addWidget( boxMajorGrid, 0, 1);
		
		boxMinorGrid = new QCheckBox();
		boxMinorGrid->setText( tr( "Minor Grids" ) );
		boxMinorGrid->setChecked(false);
		rightLayout->addWidget( boxMinorGrid, 0, 2);
		
		rightLayout->addWidget( new QLabel(tr( "Line Color" )), 1, 0 );
		
		boxColorMajor = new ColorBox(0);
		rightLayout->addWidget( boxColorMajor, 1, 1);
		
		boxColorMinor = new ColorBox(0);
		boxColorMinor->setDisabled(true);
		rightLayout->addWidget( boxColorMinor, 1, 2);
		
		rightLayout->addWidget( new QLabel(tr( "Line Type" )), 2, 0 );
		
		boxTypeMajor = new QComboBox();
		boxTypeMajor->addItem("_____");
		boxTypeMajor->addItem("- - -");
		boxTypeMajor->addItem(".....");
		boxTypeMajor->addItem("_._._");
		boxTypeMajor->addItem("_.._..");
		rightLayout->addWidget( boxTypeMajor, 2, 1);
		
		boxTypeMinor = new QComboBox();
		boxTypeMinor->addItem("_____");
		boxTypeMinor->addItem("- - -");
		boxTypeMinor->addItem(".....");
		boxTypeMinor->addItem("_._._");
		boxTypeMinor->addItem("_.._..");
		boxTypeMinor->setDisabled(true);
		rightLayout->addWidget( boxTypeMinor, 2, 2);
		
		rightLayout->addWidget( new QLabel(tr( "Thickness" )), 3, 0 );
		
		boxWidthMajor = new QSpinBox();
		boxWidthMajor->setRange(1,20);
		boxWidthMajor->setValue(1);
		rightLayout->addWidget( boxWidthMajor, 3, 1);
		
		boxWidthMinor = new QSpinBox();
		boxWidthMinor->setRange(1,20);
		boxWidthMinor->setValue(1);
		boxWidthMinor->setDisabled(true);
		rightLayout->addWidget( boxWidthMinor, 3, 2);
		
		rightLayout->addWidget( new QLabel(tr( "Axes" )), 4, 0 );
 	  
      	boxGridXAxis = new QComboBox();
        boxGridXAxis->insertItem(tr("Bottom"));
        boxGridXAxis->insertItem(tr("Top"));
        rightLayout->addWidget( boxGridXAxis, 4, 1);
  	 
        boxGridYAxis = new QComboBox();
        boxGridYAxis->insertItem(tr("Left"));
        boxGridYAxis->insertItem(tr("Right"));
        rightLayout->addWidget( boxGridYAxis, 4, 2);
  	        
		rightLayout->addWidget( new QLabel(tr( "Additional lines" )), 5, 0);
		
		boxXLine = new QCheckBox();
		boxXLine->setText( tr( "X=0" ) );
		boxXLine->setDisabled(true);
		rightLayout->addWidget( boxXLine, 5, 1);
		
		boxYLine = new QCheckBox();
		boxYLine->setText( tr( "Y=0" ) );
		rightLayout->addWidget( boxYLine, 5, 2);
		
		rightLayout->setRowStretch( 5, 1 );
		rightLayout->setColumnStretch( 3, 1 );
		
		QPixmap image2( ( const char** ) image2_data );
		QPixmap image3( ( const char** ) image3_data );
		
		axesGridList = new QListWidget();
		axesGridList->addItem( new QListWidgetItem(image3, tr( "Horizontal" )) );
		axesGridList->addItem( new QListWidgetItem(image2, tr( "Vertical" )) );
		axesGridList->setIconSize(image3.size());
		axesGridList->setCurrentRow(-1);
		
		// calculate a sensible width for the items list 
		// (default QListWidget size is 256 which looks too big)
		QFontMetrics fm(axesGridList->font());
		int width = 32,i;
		for(i=0 ; i<axesGridList->count() ; i++)
			if( fm.width(axesGridList->item(i)->text()) > width)
		width = fm.width(axesGridList->item(i)->text());
		axesGridList->setMaximumWidth( axesGridList->iconSize().width() + width + 50 );
		// resize the list to the maximum width
		axesGridList->resize(axesGridList->maximumWidth(),axesGridList->height());
					
		QHBoxLayout* mainLayout2 = new QHBoxLayout(gridPage);
		mainLayout2->addWidget(axesGridList);
		mainLayout2->addWidget(rightBox);
					
		generalDialog->addTab( gridPage, tr( "Grid" ) );
					
	//grid page slot connections
	connect(axesGridList,SIGNAL(itemSelectionChanged()),this, SLOT(setGridOptions()));
	connect(boxMajorGrid,SIGNAL(toggled(bool)), this, SLOT(majorGridEnabled(bool)));
	connect(boxMinorGrid,SIGNAL(toggled(bool)), this, SLOT(minorGridEnabled(bool)));
	connect(boxColorMajor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
	connect(boxColorMinor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
	connect(boxTypeMajor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
	connect(boxTypeMinor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
	connect(boxWidthMajor,SIGNAL(valueChanged (int)),this, SLOT(updateGrid(int)));
	connect(boxWidthMinor,SIGNAL(valueChanged (int)),this, SLOT(updateGrid(int)));
	connect(boxXLine,SIGNAL(clicked()),this, SLOT(updatePlot()));
	connect(boxYLine,SIGNAL(clicked()),this, SLOT(updatePlot()));
}

void AxesDialog::initAxesPage()
{
	//axes page
	QPixmap image4( ( const char** ) image4_data );
	QPixmap image5( ( const char** ) image5_data );
	QPixmap image6( ( const char** ) image6_data );
	QPixmap image7( ( const char** ) image7_data );
		
	axesPage = new QWidget();
		
	axesTitlesList = new QListWidget();
	axesTitlesList->addItem( new QListWidgetItem(image4, tr("Bottom")));
	axesTitlesList->addItem( new QListWidgetItem(image5, tr("Left")));
	axesTitlesList->addItem( new QListWidgetItem(image6, tr("Top")));
	axesTitlesList->addItem( new QListWidgetItem(image7, tr("Right")));
	axesTitlesList->setIconSize(image6.size());
	axesTitlesList->setMaximumWidth((int)(image6.width()*1.5));
	axesTitlesList->setSizePolicy(QSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding));
	axesTitlesList->setCurrentRow(-1);
		
	// calculate a sensible width for the items list 
	// (default QListWidget size is 256 which looks too big)
	QFontMetrics fm(axesTitlesList->font());
	int width = 32,i;
	for(i=0 ; i<axesTitlesList->count() ; i++)
		if( fm.width(axesTitlesList->item(i)->text()) > width)
			width = fm.width(axesTitlesList->item(i)->text());
	axesTitlesList->setMaximumWidth( axesTitlesList->iconSize().width() + width + 50 );
	// resize the list to the maximum width
	axesTitlesList->resize(axesTitlesList->maximumWidth(),axesTitlesList->height());
		
	QHBoxLayout * topLayout = new QHBoxLayout();
					
	boxShowAxis = new QCheckBox(tr("Show"));
	boxShowAxis->setChecked(true);
	topLayout->addWidget( boxShowAxis );
					
	labelBox = new QGroupBox(tr( "Title"));
	topLayout->addWidget( labelBox );
										
	QVBoxLayout *labelBoxLayout = new QVBoxLayout( labelBox );
	
	boxTitle = new QTextEdit();
	boxTitle->setTextFormat(Qt::PlainText);
	QFontMetrics metrics(this->font());
	boxTitle->setMaximumHeight(3*metrics.height());
	labelBoxLayout->addWidget(boxTitle);
	
	QHBoxLayout *hl = new QHBoxLayout();
	hl->addStretch();
	buttonLabelFont = new QPushButton(tr("&Font"));
	hl->addWidget(buttonLabelFont);
					
	formatButtons = new TextFormatButtons(boxTitle);
	formatButtons->toggleCurveButton(false);
	hl->addWidget(formatButtons);
	hl->addStretch();
	labelBoxLayout->addLayout(hl);
		
	QHBoxLayout * bottomLayout = new QHBoxLayout();
		
	QGroupBox *leftBox = new QGroupBox(QString());
	bottomLayout->addWidget( leftBox );
	QGridLayout * leftBoxLayout = new QGridLayout( leftBox );
		
	leftBoxLayout->addWidget( new QLabel(tr( "Type" )), 0, 0 );	
		
	boxAxisType= new QComboBox();
	boxAxisType->addItem(tr("Numeric"));
	boxAxisType->addItem(tr("Text from table"));
	boxAxisType->addItem(tr("Day of the week"));
	boxAxisType->addItem(tr("Month"));
	boxAxisType->addItem(tr("Time"));
	boxAxisType->addItem(tr("Date"));
	boxAxisType->addItem(tr("Column Headings"));
	leftBoxLayout->addWidget( boxAxisType, 0, 1 );
		
	leftBoxLayout->addWidget( new QLabel(tr( "Font" )), 1, 0 );
		
	btnAxesFont = new QPushButton();
	btnAxesFont->setText( tr( "Axis &Font" ) );	
	leftBoxLayout->addWidget( btnAxesFont, 1, 1 );
		
	leftBoxLayout->addWidget( new QLabel(tr( "Color" )), 2, 0 );	
	boxAxisColor= new ColorButton();
	leftBoxLayout->addWidget( boxAxisColor, 2, 1 );
		
	leftBoxLayout->addWidget( new QLabel(tr( "Major Ticks" )), 3, 0 );
		
	boxMajorTicksType= new QComboBox();
	boxMajorTicksType->addItem(tr( "None" ) );
	boxMajorTicksType->addItem(tr( "Out" ) );
	boxMajorTicksType->addItem(tr( "In & Out" ) );
	boxMajorTicksType->addItem(tr( "In" ) );
	leftBoxLayout->addWidget( boxMajorTicksType, 3, 1 );
		
	leftBoxLayout->addWidget( new QLabel(tr( "Minor Ticks" )), 4, 0 );
		
	boxMinorTicksType= new QComboBox();
	boxMinorTicksType->addItem(tr( "None" ) );
	boxMinorTicksType->addItem(tr( "Out" ) );
	boxMinorTicksType->addItem(tr( "In & Out" ) );
	boxMinorTicksType->addItem(tr( "In" ) );
	leftBoxLayout->addWidget( boxMinorTicksType, 4, 1);
		
	leftBoxLayout->addWidget( new QLabel(tr("Stand-off")), 5, 0);
	boxBaseline = new QSpinBox();
	boxBaseline->setRange( 0, 1000 );
	leftBoxLayout->addWidget( boxBaseline );
		
	boxShowLabels = new QGroupBox(tr("Show Labels"));
	boxShowLabels->setCheckable(true);
	boxShowLabels->setChecked(true);
	
	bottomLayout->addWidget( boxShowLabels );
	QGridLayout *rightBoxLayout = new QGridLayout( boxShowLabels );
				
	label1 = new QLabel(tr("Column"));	
	rightBoxLayout->addWidget( label1, 0, 0 );
		
	boxColName = new QComboBox();
	rightBoxLayout->addWidget( boxColName, 0, 1 );
		
	labelTable = new QLabel(tr("Table"));	
	rightBoxLayout->addWidget( labelTable, 1, 0 );
		
	boxTableName = new QComboBox();
	rightBoxLayout->addWidget( boxTableName, 1, 1 );
		
	label2 = new QLabel(tr( "Format" ));	
	rightBoxLayout->addWidget( label2, 2, 0 );
		
	boxFormat = new QComboBox();
	boxFormat->setDuplicatesEnabled(false);
	rightBoxLayout->addWidget( boxFormat, 2, 1 );
		
	label3 = new QLabel(tr( "Precision" ));		
	rightBoxLayout->addWidget( label3, 3, 0 );
	boxPrecision = new QSpinBox();
	boxPrecision->setRange( 0, 10 );
	rightBoxLayout->addWidget( boxPrecision, 3, 1 );
		
	rightBoxLayout->addWidget( new QLabel(tr( "Angle" )), 4, 0 );		
		
	boxAngle = new QSpinBox();
	boxAngle->setRange( -90, 90 );
	boxAngle->setSingleStep(5);
	rightBoxLayout->addWidget( boxAngle, 4, 1 );
		
    rightBoxLayout->addWidget(new QLabel(tr( "Color" )), 5, 0);
	boxAxisNumColor = new ColorButton();
	rightBoxLayout->addWidget( boxAxisNumColor, 5, 1 );

	boxShowFormula = new QCheckBox(tr( "For&mula" ));		
	rightBoxLayout->addWidget( boxShowFormula, 6, 0 );
		
	boxFormula = new QTextEdit();
	boxFormula->setTextFormat(Qt::PlainText);
	boxFormula->setMaximumHeight(3*metrics.height());
	boxFormula->hide();
	rightBoxLayout->addWidget( boxFormula, 6, 1 );
	rightBoxLayout->setRowStretch(7, 1);
	
	QVBoxLayout * rightLayout = new QVBoxLayout();
	rightLayout->addLayout( topLayout );
	rightLayout->addLayout( bottomLayout );
	rightLayout->addStretch(1);
		
	QHBoxLayout * mainLayout3 = new QHBoxLayout( axesPage );
	mainLayout3->addWidget( axesTitlesList );
	mainLayout3->addLayout( rightLayout );
		
	generalDialog->addTab( axesPage, tr( "Axis" ) );
		
	connect(buttonLabelFont, SIGNAL(clicked()), this, SLOT(customAxisLabelFont()));
		
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(updateShowBox(int)));	
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(updateAxisColor(int)));
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(updateTitleBox(int)));
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(setTicksType(int)));
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(setAxisType(int)));
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(setBaselineDist(int)));
	connect(axesTitlesList,SIGNAL(currentRowChanged(int)), this, SLOT(updateLabelsFormat(int)));
	
	connect(boxShowLabels,SIGNAL(clicked(bool)), this, SLOT(updateTickLabelsList(bool)));
	
	connect(boxAxisColor, SIGNAL(clicked()), this, SLOT(pickAxisColor()));
    connect(boxAxisNumColor, SIGNAL(clicked()), this, SLOT(pickAxisNumColor()));
	connect(boxShowFormula, SIGNAL(clicked()), this, SLOT(showFormulaBox()));

	connect(boxMajorTicksType, SIGNAL(activated(int)), this, SLOT(updateMajTicksType(int)));
	connect(boxMinorTicksType, SIGNAL(activated(int)), this, SLOT(updateMinTicksType(int)));
	
	connect(boxShowAxis,SIGNAL(clicked()), this, SLOT(showAxis()));
	connect(boxFormat, SIGNAL(activated(int) ), this, SLOT(setLabelsNumericFormat(int)));
		
	connect(btnAxesFont, SIGNAL(clicked()), this, SLOT(customAxisFont()));	
	connect(boxBaseline, SIGNAL(valueChanged(int)), this, SLOT(changeBaselineDist(int)));
	connect(boxAxisType, SIGNAL(activated(int)), this, SLOT(showAxisFormatOptions(int)));
	connect(boxPrecision, SIGNAL(valueChanged(int)), this, SLOT(setLabelsNumericFormat(int)));
}

void AxesDialog::initFramePage()
{
	frame = new QWidget();
		
		boxFramed = new QGroupBox(tr("Canvas frame"));
		boxFramed->setCheckable (true);
		
		QGridLayout * boxFramedLayout = new QGridLayout( boxFramed );
		
		boxFramedLayout->addWidget( new QLabel(tr( "Color" )), 0, 0 );
		boxFrameColor= new ColorButton(boxFramed);
		boxFramedLayout->addWidget( boxFrameColor, 0, 1 );
		
		boxFramedLayout->addWidget( new QLabel(tr( "Width" )), 1, 0 );
		boxFrameWidth= new QSpinBox();
		boxFrameWidth->setMinimum(1);
		boxFramedLayout->addWidget( boxFrameWidth, 1, 1 );
		
		boxFramedLayout->setRowStretch( 2, 1 );
		
		QGroupBox * boxBkg = new QGroupBox(tr("Background"));
		
		QGridLayout * boxBkgLayout = new QGridLayout( boxBkg );
		
		boxBkgLayout->addWidget( new QLabel(tr( "Color" )), 0, 0 );
		boxBackgroundTransparency = new QCheckBox(tr("Transparent"));
		boxBkgLayout->addWidget( boxBackgroundTransparency, 0, 1 );
		boxBackgroundColor = new ColorButton();
		boxBkgLayout->addWidget( boxBackgroundColor, 0, 2 );
		
		boxBkgLayout->addWidget( new QLabel(tr("Canvas Color" )), 1, 0);
		boxCanvasTransparency = new QCheckBox(tr("Transparent"));
		boxBkgLayout->addWidget( boxCanvasTransparency, 1, 1 );
		boxCanvasColor = new ColorButton();
		boxBkgLayout->addWidget( boxCanvasColor, 1, 2 );
		
		boxBkgLayout->addWidget( new QLabel(tr( "Border Width" )), 2, 0);
		boxBorderWidth = new QSpinBox();
		boxBkgLayout->addWidget( boxBorderWidth, 2, 2);
		
		boxBkgLayout->addWidget( new QLabel(tr("Border Color" )), 3, 0);
		boxBorderColor = new ColorButton();
		boxBkgLayout->addWidget( boxBorderColor, 3, 2);
		
		boxBkgLayout->setRowStretch( 4, 1 );
		
		QGroupBox * boxAxes = new QGroupBox(tr("Axes"));
		
		QGridLayout * boxAxesLayout = new QGridLayout( boxAxes );
		
		boxBackbones = new QCheckBox();
		boxBackbones->setText( tr( "Draw backbones" ) );
		boxAxesLayout->addWidget( boxBackbones, 0, 0 );
		
		boxAxesLayout->addWidget( new QLabel(tr( "Line Width" )), 1, 0 );
		boxAxesLinewidth = new QSpinBox();
		boxAxesLinewidth->setRange( 1, 100 );
		boxAxesLayout->addWidget( boxAxesLinewidth, 1, 1 );
		
		boxAxesLayout->addWidget( new QLabel(tr( "Major ticks length" )), 2, 0 );
		boxMajorTicksLength = new QSpinBox();
		boxMajorTicksLength->setRange( 0, 1000 );
		boxAxesLayout->addWidget( boxMajorTicksLength, 2, 1 );
		
		boxAxesLayout->addWidget( new QLabel(tr( "Minor ticks length" )), 3, 0 );
		boxMinorTicksLength = new QSpinBox();
		boxMinorTicksLength->setRange( 0, 1000 );
		boxAxesLayout->addWidget( boxMinorTicksLength, 3, 1 );
		
		boxAxesLayout->setRowStretch( 4, 1 );
		
		QGroupBox * box4 = new QGroupBox(QString());
		QGridLayout * box4Layout = new QGridLayout( box4 );
		
		box4Layout->addWidget( new QLabel(tr( "Margin" )), 0, 0 );
		boxMargin = new QSpinBox();
		boxMargin->setRange( 0, 1000 );
		boxMargin->setSingleStep(5);
		box4Layout->addWidget( boxMargin, 0, 1 );
		
		boxAntialiasing = new QCheckBox(tr("Antialiasing"));
		box4Layout->addWidget( boxAntialiasing, 1, 1 );
		
		boxAll = new QCheckBox(tr("Apply to all layers"));
		box4Layout->addWidget( boxAll, 2, 1 );
		
		box4Layout->setRowStretch( 3, 1 );
		
		QGridLayout * mainLayout = new QGridLayout( frame );
		mainLayout->addWidget( boxFramed , 0, 0 );
		mainLayout->addWidget( boxBkg, 0, 1 );
		mainLayout->addWidget( boxAxes, 1, 0 );
		mainLayout->addWidget( box4, 1, 1 );
		
		generalDialog->addTab(frame, tr( "General" ) );
		
	connect(boxBackgroundTransparency, SIGNAL(toggled(bool)), this, SLOT(updateBackgroundTransparency(bool)));
	connect(boxCanvasTransparency, SIGNAL(toggled(bool)), this, SLOT(updateCanvasTransparency(bool)));
	connect(boxAntialiasing, SIGNAL(toggled(bool)), this, SLOT(updateAntialiasing(bool)));
	connect(boxMargin, SIGNAL(valueChanged (int)), this, SLOT(changeMargin(int)));
	connect(boxBorderColor, SIGNAL(clicked()), this, SLOT(pickBorderColor()));
	connect(boxBackgroundColor, SIGNAL(clicked()), this, SLOT(pickBackgroundColor()));
	connect(boxCanvasColor, SIGNAL(clicked()), this, SLOT(pickCanvasColor()));
	connect(boxBorderWidth,SIGNAL(valueChanged (int)), this, SLOT(updateBorder(int)));
	connect(boxFrameColor, SIGNAL(clicked()), this, SLOT(pickCanvasFrameColor()));
	connect(boxBackbones, SIGNAL(toggled(bool)), this, SLOT(drawAxesBackbones(bool)));
	connect(boxFramed, SIGNAL(toggled(bool)), this, SLOT(drawFrame(bool)));
	connect(boxFrameWidth, SIGNAL(valueChanged (int)), this, SLOT(updateFrame(int)));
	connect(boxAxesLinewidth, SIGNAL(valueChanged (int)), this, SLOT(changeAxesLinewidth(int)));
	connect(boxMajorTicksLength, SIGNAL(valueChanged (int)), this, SLOT(changeMajorTicksLength(int)));
	connect(boxMinorTicksLength, SIGNAL(valueChanged (int)), this, SLOT(changeMinorTicksLength(int)));
}

void AxesDialog::changeMinorTicksLength (int minLength)
{
	if (generalDialog->currentWidget() != frame)
		return;
			
			if (boxAll->isChecked())
			{
				QWidgetList allPlots = mPlot->graphPtrs();
					for (int i=0; i<allPlots.count();i++)
					{
						Graph* g=(Graph*)allPlots.at(i);
							if (g)
								g->changeTicksLength(minLength, boxMajorTicksLength->value());
					}
			}
			else
			{
				Graph* g = (Graph*)mPlot->activeGraph();
				if (g)
					g->changeTicksLength(minLength, boxMajorTicksLength->value());
			}	

	boxMajorTicksLength->setMinValue(minLength);
}

void AxesDialog::changeMajorTicksLength (int majLength)
{
	if (generalDialog->currentWidget() != frame)
		return;
			
			if (boxAll->isChecked())
			{
				QWidgetList allPlots = mPlot->graphPtrs();
					for (int i=0; i<allPlots.count();i++)
					{
						Graph* g=(Graph*)allPlots.at(i);
							if (g)
								g->changeTicksLength(boxMinorTicksLength->value(), majLength);
					}
			}
			else
			{
				Graph* g = (Graph*)mPlot->activeGraph();
				if (g)
					g->changeTicksLength(boxMinorTicksLength->value(), majLength);
			}	

	boxMinorTicksLength->setMaxValue(majLength);
}

void AxesDialog::drawAxesBackbones(bool draw)
{
	if (generalDialog->currentWidget() != frame)
		return;
			
			if (boxAll->isChecked())
			{
				QWidgetList allPlots = mPlot->graphPtrs();
					for (int i=0; i<allPlots.count();i++)
					{
						Graph* g=(Graph*)allPlots.at(i);
							if (g)
								g->drawAxesBackbones(draw);
					}
			}
			else
			{
				Graph* g = (Graph*)mPlot->activeGraph();
				if (g)
					g->drawAxesBackbones(draw);
			}
}

void AxesDialog::changeAxesLinewidth(int width)
{
	if (generalDialog->currentWidget() != frame)
		return;
			
			if (boxAll->isChecked())
			{
				QWidgetList allPlots = mPlot->graphPtrs();
					for (int i=0; i<allPlots.count();i++)
					{
						Graph* g=(Graph*)allPlots.at(i);
							if (g)
								g->setAxesLinewidth(width);
					}
			}
			else
			{
				Graph* g = (Graph*)mPlot->activeGraph();
				if (g)
					g->setAxesLinewidth(width);
			}
}

void AxesDialog::changeMargin(int width)
{
	if (generalDialog->currentWidget() != frame)
		return;
			
			if (boxAll->isChecked())
			{
				QWidgetList allPlots = mPlot->graphPtrs();
					for (int i=0; i<allPlots.count();i++)
					{
						Graph* g=(Graph*)allPlots.at(i);
							if (g)
								g->changeMargin(width);
					}
			}
			else
			{
				Graph* g = (Graph*)mPlot->activeGraph();
				if (g)
					g->changeMargin(width);
			}
}

void AxesDialog::drawFrame(bool framed)
{	
	if (generalDialog->currentWidget() != frame)
		return;
			
	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
				g->drawCanvasFrame(framed, boxFrameWidth->value(), boxFrameColor->color());
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
			g->drawCanvasFrame(framed, boxFrameWidth->value(), boxFrameColor->color());
	}
}

void AxesDialog::updateFrame(int width)
{	
	if (generalDialog->currentWidget() != frame)
		return;
			
			if (boxAll->isChecked())
			{
				QWidgetList allPlots = mPlot->graphPtrs();
					for (int i=0; i<allPlots.count();i++)
					{
						Graph* g=(Graph*)allPlots.at(i);
							if (g)
								g->drawCanvasFrame(boxFramed->isChecked(), width, boxFrameColor->color());
					}
			}
			else
			{
				Graph* g = (Graph*)mPlot->activeGraph();
				if (g)
					g->drawCanvasFrame(boxFramed->isChecked(), width, boxFrameColor->color());
			}
}

void AxesDialog::updateBorder(int width)
{
	if (generalDialog->currentWidget() != frame)
		return;
			
	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
				g->setBorder(width, boxBorderColor->color());
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
			g->setBorder(width, boxBorderColor->color());
	}
	mPlot->notifyChanges();
}

void AxesDialog::pickCanvasColor()
{
	QColor c = QColorDialog::getColor(boxCanvasColor->color(), this);
		if ( !c.isValid() || c == boxCanvasColor->color() )
			return;

	boxCanvasColor->setColor ( c ) ;

	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
			{
				g->setCanvasBackground(c);
				g->replot();
			}
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
		{
			g->setCanvasBackground(c);
			g->replot();
		}
	}
}

void AxesDialog::pickBackgroundColor()
{
	QColor c = QColorDialog::getColor(boxBackgroundColor->color(), this);
		if ( !c.isValid() || c == boxBackgroundColor->color() )
			return;

	boxBackgroundColor->setColor ( c ) ;

	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<(int)allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
			{
				g->setBackgroundColor(c);
				g->replot();
			}
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
		{
			g->setBackgroundColor(c);
			g->replot();
		}
	}
}

void AxesDialog::pickBorderColor()
{
	QColor c = QColorDialog::getColor(boxBorderColor->color(), this);
	if ( !c.isValid() || c == boxBorderColor->color() )
		return;

	boxBorderColor->setColor ( c ) ;

	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
				g->setBorder(boxBorderWidth->value(), c);
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
			g->setBorder(boxBorderWidth->value(), c);
	}
	mPlot->notifyChanges();
}

void AxesDialog::pickCanvasFrameColor()
{
	QColor c = QColorDialog::getColor(boxFrameColor->color(), this);
		if ( !c.isValid() || c == boxFrameColor->color() )
			return;

	boxFrameColor->setColor ( c ) ;

	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
				g->drawCanvasFrame(boxFramed->isChecked(), boxFrameWidth->value(), c);
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
			g->drawCanvasFrame(boxFramed->isChecked(), boxFrameWidth->value(), c);
	}
}

void AxesDialog::showAxisFormatOptions(int format)
{
	int axis=mapToQwtAxisId();

	boxFormat->clear();
	boxFormat->setEditable(false);
	boxFormat->hide();
	boxPrecision->hide();
	boxColName->hide();
	label1->hide();
	label2->hide();
	label3->hide();
	boxShowFormula->hide();
	boxFormula->hide();
	boxTableName->hide();
	labelTable->hide();

	switch (format)
	{
		case 0:
			label2->show();
			boxFormat->show();
			boxFormat->insertItem(tr( "Automatic" ) );
			boxFormat->insertItem(tr( "Decimal: 100.0" ) );
			boxFormat->insertItem(tr( "Scientific: 1e2" ) );
			boxFormat->insertItem(tr( "Scientific: 10^2" ) );
			boxFormat->setCurrentIndex(d_graph->plotWidget()->axisLabelFormat(axis));
				
			label3->show();
			boxPrecision->show();
			boxShowFormula->show();

			showAxisFormula(mapToQwtAxisId());
			break;

		case 1:
			label1->show();
			boxColName->show();
			break;

		case 2:
			{
				int day = (QDate::currentDate()).dayOfWeek();
				label2->show();
				boxFormat->show();
				boxFormat->insertItem(QDate::shortDayName(day));
				boxFormat->insertItem(QDate::longDayName(day));
				boxFormat->insertItem((QDate::shortDayName(day)).left(1));
				boxFormat->setCurrentIndex (formatInfo[axis].toInt());
			}
			break;
				
		case 3:
				{
					int month = (QDate::currentDate()).month();
					label2->show();
					boxFormat->show();
					boxFormat->insertItem(QDate::shortMonthName(month));
					boxFormat->insertItem(QDate::longMonthName(month));
					boxFormat->insertItem((QDate::shortMonthName(month)).left(1));
					boxFormat->setCurrentIndex (formatInfo[axis].toInt());
				}
				break;
					
		case 4:
					{
						label2->show();
						boxFormat->show();
						boxFormat->setEditable(true);

						QStringList lst = formatInfo[axis].split(";", QString::SkipEmptyParts);
						if (!lst[1].isEmpty())
						{
							boxFormat->insertItem(lst[1]);
							boxFormat->setCurrentText(lst[1]);
						}

						boxFormat->insertItem("h");
						boxFormat->insertItem("h ap");
						boxFormat->insertItem("h AP");
						boxFormat->insertItem("h:mm");
						boxFormat->insertItem("h:mm ap");
						boxFormat->insertItem("hh:mm");
						boxFormat->insertItem("h:mm:ss");
						boxFormat->insertItem("h:mm:ss.zzz");
						boxFormat->insertItem("mm:ss");
						boxFormat->insertItem("mm:ss.zzz");
						boxFormat->insertItem("hmm");
						boxFormat->insertItem("hmmss");
						boxFormat->insertItem("hhmmss");		
					}
					break;

		case 5:
					{
						label2->show();
						boxFormat->show();
						boxFormat->setEditable(true);

						QStringList lst = formatInfo[axis].split(";", QString::SkipEmptyParts);
						if (!lst[1].isEmpty())
						{
							boxFormat->insertItem(lst[1]);
							boxFormat->setCurrentText(lst[1]);
						}
						boxFormat->insertItem("yyyy-MM-dd");
						boxFormat->insertItem("dd.MM.yyyy");
						boxFormat->insertItem("ddd MMMM d yy");
						boxFormat->insertItem("dd/MM/yyyy");
					}
					break;

		case 6:
					{
						labelTable->show();
						if (tablesList.contains(formatInfo[axis]))
							boxTableName->setCurrentText(formatInfo[axis]);
						boxTableName->show();
					}
					break;
	}
}

void AxesDialog::insertColList(const QStringList& cols)
{
	boxColName-> insertStringList(cols);
}

void AxesDialog::insertTablesList(const QStringList& l)
{
	tablesList = l;
		boxTableName->insertStringList(l);
}

void AxesDialog::updateAxisType(int)
{
int a=mapToQwtAxisId();
boxAxisType->setCurrentIndex(a);
}

void AxesDialog::setEnabledAxes(QVector<bool> ok)
{
	xAxisOn=ok[2];
		yAxisOn=ok[0];
		topAxisOn=ok[3];
	rightAxisOn=ok[1];
}

void AxesDialog::showAxis()
{
	bool ok=boxShowAxis->isChecked();
	boxTitle->setEnabled(ok);
	boxAxisColor->setEnabled(ok);
    boxAxisNumColor->setEnabled(ok);
	btnAxesFont->setEnabled(ok);
	boxShowLabels->setEnabled(ok);
	boxMajorTicksType->setEnabled(ok);
	boxMinorTicksType->setEnabled(ok);
	boxAxisType->setEnabled(ok);
	boxBaseline->setEnabled(ok);
	labelBox->setEnabled(ok);
		
		int axis=-1;
		int a=axesTitlesList->currentRow();	
		switch(a)   
		{
			case 0:
				   {
					   axis = QwtPlot::xBottom;
					   xAxisOn=ok;
					   break;
				   }
			case 1:
				   {
					   axis = QwtPlot::yLeft;
					   yAxisOn=ok;
					   break;
				   }
			case 2:
				   {
					   axis = QwtPlot::xTop;
					   topAxisOn=ok;
					   break;
				   }
			case 3:
				   {
					   axis = QwtPlot::yRight;
					   rightAxisOn=ok;
					   break;
				   }
		}
	
		bool labels=false;
		if (tickLabelsOn[axis] == "1")
			labels=true;
				
				boxFormat->setEnabled(labels && ok);
				boxColName->setEnabled(labels && ok);
				boxShowFormula->setEnabled(labels && ok);
	boxFormula->setEnabled(labels && ok);

	if (axis == QwtPlot::xBottom || axis == QwtPlot::xTop)
		boxAngle->setEnabled(labels && ok);
	else 
		boxAngle->setDisabled(true);
			
	bool userFormat=true;
    if (boxFormat->currentIndex() == 0)
	       userFormat=false;
	boxPrecision->setEnabled(labels && ok && userFormat);
					
	QString formula =  boxFormula->text();
	if (!boxShowFormula->isChecked())
	   formula = QString();

    emit showAxis(axis,boxAxisType->currentIndex(), boxColName->currentText(),ok, boxMajorTicksType->currentIndex(), boxMinorTicksType->currentIndex(),
                  boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(),
                  boxPrecision->value(), boxAngle->value(), boxBaseline->value(), formula, boxAxisNumColor->color());
}

void AxesDialog::updateShowBox(int axis)
{
	switch(axis)   
	{
		case 0:
			{
				boxShowAxis->setChecked(xAxisOn);
				int labelsOn=tickLabelsOn[2].toInt();
				boxShowLabels->setChecked(labelsOn);
				boxAngle->setEnabled(labelsOn && xAxisOn);
				boxFormat->setEnabled(labelsOn && xAxisOn);
				boxAngle->setValue(xBottomLabelsRotation);	
				break;
			}
		case 1:
			{
				boxShowAxis->setChecked(yAxisOn);
				int labelsOn=tickLabelsOn[0].toInt();
				boxShowLabels->setChecked(labelsOn);
				boxFormat->setEnabled(labelsOn && yAxisOn);
				boxAngle->setEnabled(false);
				boxAngle->setValue(0);
				break;
			}
		case 2:
			{
				boxShowAxis->setChecked(topAxisOn);

				int labelsOn=tickLabelsOn[3].toInt();
				boxShowLabels->setChecked(labelsOn);
				boxFormat->setEnabled(labelsOn && topAxisOn);
				boxAngle->setEnabled(labelsOn && topAxisOn);
				boxAngle->setValue(xTopLabelsRotation);
				break;
			}
		case 3:
			{
				boxShowAxis->setChecked(rightAxisOn);
				int labelsOn=tickLabelsOn[1].toInt();
				boxShowLabels->setChecked(labelsOn );
				boxFormat->setEnabled(labelsOn && rightAxisOn);
				boxAngle->setEnabled(false);
				boxAngle->setValue(0);
				break;
			}
	}

	bool ok=boxShowAxis->isChecked();
	boxTitle->setEnabled(ok);
	boxAxisColor->setEnabled(ok);
    boxAxisNumColor->setEnabled(ok);
	btnAxesFont->setEnabled(ok);
	boxShowLabels->setEnabled(ok);
	boxMajorTicksType->setEnabled(ok);
	boxMinorTicksType->setEnabled(ok);
	boxAxisType->setEnabled(ok);
	boxBaseline->setEnabled(ok);
	labelBox->setEnabled(ok);	
}

void AxesDialog::initAxisFonts(const QFont& xB, const QFont& yL, const QFont& xT, const QFont& yR )
{
	xBottomFont=xB;
		yLeftFont=yL;
		xTopFont=xT;
	yRightFont=yR;	
}

void AxesDialog::customAxisFont()
{
	bool okF;
		int axis=-1;
		QFont fnt;
		switch(axesTitlesList->currentRow())   
		{
			case 0:
				   {
					   axis = QwtPlot::xBottom;
					   fnt = QFontDialog::getFont( &okF, xBottomFont,this);
					   if (okF)
						   xBottomFont=fnt;
					   break;
				   }
			case 1:
				   {
					   axis = QwtPlot::yLeft;
					   fnt = QFontDialog::getFont( &okF, yLeftFont,this);
					   if (okF)
						   yLeftFont=fnt;
					   break;
				   }
			case 2:
				   {
					   axis = QwtPlot::xTop;
					   fnt = QFontDialog::getFont( &okF, xTopFont, this);
					   if (okF)
						   xTopFont=fnt;
					   break;
				   }
			case 3:
				   {
					   axis = QwtPlot::yRight;
					   fnt = QFontDialog::getFont( &okF, yRightFont, this);
					   if (okF)
						   yRightFont=fnt;
					   break;
				   }
		}

	emit changeAxisFont(axis,fnt);
}

void AxesDialog::accept()
{
	if (updatePlot())
		close();
}

void AxesDialog::majorGridEnabled(bool on)
{
	boxMinorGrid->setEnabled(on);
		
	boxTypeMajor->setEnabled(on);
	boxColorMajor->setEnabled(on);
	boxWidthMajor->setEnabled(on);
		
	if (generalDialog->currentWidget()==gridPage)	
		{
		d_graph->setGridOptions(getGridOptions());
		d_graph->replot();
		}
}

void AxesDialog::minorGridEnabled(bool on)
{
	boxTypeMinor->setEnabled(on);
	boxColorMinor->setEnabled(on);
	boxWidthMinor->setEnabled(on);
		
	if (generalDialog->currentWidget()==gridPage)		
		{
		d_graph->setGridOptions(getGridOptions());
	    d_graph->replot();
		}
}

void AxesDialog::stepEnabled()
{
	boxStep->setEnabled(btnStep->isChecked ());
	boxUnit->setEnabled(btnStep->isChecked ());
	boxMinorValue->setDisabled(btnStep->isChecked ());
	boxMajorValue->setDisabled(btnStep->isChecked ());
	btnMajor->setChecked(!btnStep->isChecked ());
}

void AxesDialog::stepDisabled()
{
	boxStep->setDisabled(btnMajor->isChecked ());
	boxUnit->setDisabled(btnMajor->isChecked ());
	boxMinorValue->setEnabled(btnMajor->isChecked ());
	boxMajorValue->setEnabled(btnMajor->isChecked ());
	btnStep->setChecked(!btnMajor->isChecked ());
}

void AxesDialog::setGridOptions()
{
	putGridOptions(grid);
}

void AxesDialog::putGridOptions(GridOptions gr)
{
if (axesGridList->currentRow())
	{
	boxMajorGrid->setChecked(gr.majorOnX);
	boxMinorGrid->setChecked(gr.minorOnX);

	boxXLine->setEnabled(true);
	boxYLine->setDisabled(true);

	boxGridXAxis->setEnabled(true);
	boxGridYAxis->setDisabled(true);
	}
else
	{
	boxMajorGrid->setChecked(gr.majorOnY);
	boxMinorGrid->setChecked(gr.minorOnY);

	boxXLine->setDisabled(true);
	boxYLine->setEnabled(true);

	boxGridXAxis->setDisabled(true);
	boxGridYAxis->setEnabled(true);
	}

boxGridXAxis->setCurrentItem(gr.xAxis - 2);
boxGridYAxis->setCurrentItem(gr.yAxis);
boxTypeMajor->setCurrentItem(gr.majorStyle);
boxColorMajor->setCurrentItem(gr.majorCol);
boxWidthMajor->setValue(gr.majorWidth);
boxTypeMinor->setCurrentItem(gr.minorStyle);
boxColorMinor->setCurrentItem(gr.minorCol);
boxWidthMinor->setValue(gr.minorWidth);
boxXLine->setChecked(gr.xZeroOn);
boxYLine->setChecked(gr.yZeroOn);

grid = gr;
}

GridOptions AxesDialog::getGridOptions()
{
	if (boxMajorGrid->isChecked() && axesGridList->currentRow()==1)
		grid.majorOnX=1;
	else if (!boxMajorGrid->isChecked() && axesGridList->currentRow()==1)
		grid.majorOnX=0;
	else if (boxMajorGrid->isChecked() && axesGridList->currentRow()==0)
		grid.majorOnY=1;
	else 
		grid.majorOnY=0;

    grid.majorStyle=boxTypeMajor->currentIndex();
	grid.majorCol=boxColorMajor->currentIndex();
	grid.majorWidth=boxWidthMajor->value();
		
	if (boxMinorGrid->isChecked() && axesGridList->currentRow()==1)
	   grid.minorOnX=1;
	else if (!boxMinorGrid->isChecked() && axesGridList->currentRow()==1)
       grid.minorOnX=0;
	else if (boxMinorGrid->isChecked() && axesGridList->currentRow()==0)
	     grid.minorOnY=1;
	else 
	     grid.minorOnY=0;
				
	grid.minorStyle=boxTypeMinor->currentIndex();
	grid.minorCol=boxColorMinor->currentIndex();
	grid.minorWidth=boxWidthMinor->value();
				
	if (boxXLine->isChecked())
	   grid.xZeroOn=1;
	else grid.xZeroOn=0;

	if (boxYLine->isChecked())
		grid.yZeroOn=1;
	else grid.yZeroOn=0;

    grid.yAxis = boxGridYAxis->currentIndex();
  	grid.xAxis = boxGridXAxis->currentIndex() + 2;
  	
	return grid;
}

void AxesDialog::updateAxisColor(int)
{
	int a = mapToQwtAxisId();
    boxAxisColor->setColor(d_graph->axisColor(a));
    boxAxisNumColor->setColor(d_graph->axisNumbersColor(a));
}

void AxesDialog::changeBaselineDist(int baseline)
{
	int axis=mapToQwtAxisId();
	axesBaseline[axis] = baseline;
		
	int at=axesTitlesList->currentRow();
	QString title=boxTitle->text();
	if (titles[at] != title)
	{
		emit updateAxisTitle(at,title);
		titles[at] = title;
	}
	
	QString formula =  boxFormula->text();
	if (!boxShowFormula->isChecked())
		formula = QString();
	emit showAxis(axis, boxAxisType->currentIndex(), formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(), boxMinorTicksType->currentIndex(), 
			boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(), boxPrecision->value(), 
			boxAngle->value(), baseline, formula, boxAxisNumColor->color());
}

bool AxesDialog::updatePlot()
{
	if (generalDialog->currentWidget()==(QWidget*)scalesPage)
	{
		QString from=boxStart->text().lower();
		QString to=boxEnd->text().lower();
		QString step=boxStep->text().lower();
        int a = mapToQwtAxis(axesList->currentRow());			
		double start, end, stp = 0;
		try
		{
			MyParser parser;
			parser.SetExpr(from.ascii());
			start=parser.Eval();
		}
		catch(mu::ParserError &e)
		{
			QMessageBox::critical(0, tr("QtiPlot - Start limit error"),QString::fromStdString(e.GetMsg()));
			boxStart->setFocus();
			return false;
		}			
		try
		{
			MyParser parser;	
			parser.SetExpr(to.ascii());
			end=parser.Eval();
		}
		catch(mu::ParserError &e)
		{
			QMessageBox::critical(0, tr("QtiPlot - End limit error"),QString::fromStdString(e.GetMsg()));
			boxEnd->setFocus();
			return false;
		}
        if (btnStep->isChecked())
  	        {	
		    try
		       {
			    MyParser parser;	
			    parser.SetExpr(step.ascii());
			    stp=parser.Eval();
		       }
           catch(mu::ParserError &e)
              {
			  QMessageBox::critical(0, tr("QtiPlot - Step input error"),QString::fromStdString(e.GetMsg()));
			  boxStep->setFocus();
			  return false;
		      }

		      if (stp <=0)
		      {
			  QMessageBox::critical(0,tr("QtiPlot - Step input error"), tr("Please enter a positive step value!"));
			  boxStep->setFocus();
			  return false;	
		      }
           
           if (axesType[a] == Graph::Time)
		      {
		      switch (boxUnit->currentIndex())
                 {
			     case 0:
			     break;
			     case 1:
				      stp *= 1e3;
			     break;
			     case 2:
				   stp *= 6e4;
                 break;
			     case 3:
				     stp *= 36e5;
		         break;
			     }
		      }
	       else if (axesType[a] == Graph::Date)
		        {
		        switch (boxUnit->currentIndex())
                    {
                    case 0:
                    break;
                    case 1:
                         stp *= 7;
                    break;
                    }
	             }
          }

		d_graph->setScale(a, start, end, stp, boxMajorValue->value(), boxMinorValue->value(),
                             boxScaleType->currentIndex(), btnInvert->isChecked());
		d_graph->emitModified();
	}
	else if (generalDialog->currentWidget()==gridPage)
	{
		d_graph->setGridOptions(getGridOptions());
		d_graph->replot();
	}
	else if (generalDialog->currentWidget()==(QWidget*)axesPage)
	{	
		int axis=mapToQwtAxisId();
		int format = boxAxisType->currentIndex();
		axesType[axis] = format;

		int baseline = boxBaseline->value();
		axesBaseline[axis] = baseline;

		if (format == Graph::Numeric)
		{
			if (boxShowFormula->isChecked())
			{
				QString formula = boxFormula->text().lower();
				try
				{
					double value = 1.0;
					MyParser parser;
					if (formula.contains("x"))
						parser.DefineVar("x", &value);
					else if (formula.contains("y"))
						parser.DefineVar("y", &value);
					parser.SetExpr(formula.ascii());
					parser.Eval();
				}
				catch(mu::ParserError &e)
				{
					QMessageBox::critical(0, tr("QtiPlot - Formula input error"), QString::fromStdString(e.GetMsg())+"\n"+
							tr("Valid variables are 'x' for Top/Bottom axes and 'y' for Left/Right axes!"));
					boxFormula->setFocus();
					return false;
				}
			}
		}
		else if (format == Graph::Time || format == Graph::Date)
		{
			QStringList lst = formatInfo[axis].split(";", QString::SkipEmptyParts);			
			lst[1] = boxFormat->currentText();
			formatInfo[axis]  = lst.join(";");
		}
		else if (format == Graph::Day || format == Graph::Month)
			formatInfo[axis] = QString::number(boxFormat->currentIndex());
		else if (format == Graph::ColHeader)
			formatInfo[axis] = boxTableName->currentText();
		else
			formatInfo[axis] = boxColName->currentText();

		int at=axesTitlesList->currentRow();
		QString title=boxTitle->text();
		if (titles[at] != title)
		{
			emit updateAxisTitle(at,title);
			titles[at] = title;
		}

		if (axis == QwtPlot::xBottom)
			xBottomLabelsRotation=boxAngle->value();
		else if (axis == QwtPlot::xTop)
			xTopLabelsRotation=boxAngle->value();

		QString formula =  boxFormula->text();
		if (!boxShowFormula->isChecked())
			formula = QString();
		emit showAxis(axis, format, formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(), boxMinorTicksType->currentIndex(), 
				boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(), 
				boxPrecision->value(), boxAngle->value(), baseline, formula, boxAxisNumColor->color());
	}
	else if (generalDialog->currentWidget()==(QWidget*)frame)
	{
		if (!boxAll->isChecked())
			return true;

		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g=(Graph*)allPlots.at(i);
			if (g)
			{
				g->setAxesLinewidth(boxAxesLinewidth->value());
				g->setBorder(boxBorderWidth->value(), boxBorderColor->color());
				
				g->changeTicksLength(boxMinorTicksLength->value(), boxMajorTicksLength->value());
				g->drawCanvasFrame(boxFramed->isChecked(), boxFrameWidth->value(), boxFrameColor->color());
				g->drawAxesBackbones(boxBackbones->isChecked());
				g->changeMargin(boxMargin->value());
				
				QColor c = boxBackgroundColor->color();
				if (boxBackgroundTransparency->isChecked())
					c.setAlpha(0);
				g->setBackgroundColor(c);
								
				c = boxCanvasColor->color();
				if (boxCanvasTransparency->isChecked())
					c.setAlpha(0);
				g->setCanvasBackground(c);
				
				g->setAntialiasing(boxAntialiasing->isChecked());
			}
		}
	}

	return true;
}

void AxesDialog::setMultiLayerPlot(MultiLayer *m)
{
	mPlot = m;
	d_graph = (Graph*)mPlot->activeGraph();
	Plot *p = d_graph->plotWidget();

	boxMargin->setValue (p->margin());
	boxBorderWidth->setValue(p->lineWidth());
	boxBorderColor->setColor(p->frameColor());
	
	QColor c = p->paletteBackgroundColor();
	boxBackgroundTransparency->setChecked(!c.alpha());
	boxBackgroundColor->setEnabled(c.alpha());
	c.setAlpha(255);
	boxBackgroundColor->setColor(c);
	
	c = d_graph->plotWidget()->canvasBackground();
	boxCanvasTransparency->setChecked(!c.alpha());
	boxCanvasColor->setEnabled(c.alpha());
	c.setAlpha(255);
	boxCanvasColor->setColor(c);
	
	boxAxesLinewidth->setValue(d_graph->plotWidget()->axesLinewidth());

	boxFramed->setChecked(d_graph->framed());
	boxFrameColor->setColor(d_graph->canvasFrameColor());
	boxFrameWidth->setValue(d_graph->canvasFrameWidth());

	boxAntialiasing->setChecked(d_graph->antialiasing());
	boxBackbones->setChecked (d_graph->axesBackbones());

	boxMinorTicksLength->setValue(p->minorTickLength());
	boxMajorTicksLength->setValue(p->majorTickLength());
}

int AxesDialog::mapToQwtAxisId()
{
return mapToQwtAxis(axesTitlesList->currentRow());
}

int AxesDialog::mapToQwtAxis(int axis)
{
int a=-1;	
switch(axis)   
        {
        case 0:
           a = QwtPlot::xBottom;
        break;
        case 1:
            a = QwtPlot::yLeft;
        break;
        case 2:
             a = QwtPlot::xTop;
        break;
        case 3:
             a = QwtPlot::yRight;
        break;
		}
return a;
}

void AxesDialog::updateScale()
{
int axis = axesList->currentRow();
		
boxStart->clear();
boxEnd->clear();
boxStep->clear();
boxUnit->hide();
boxUnit->clear();

Plot *d_plot = d_graph->plotWidget();
int a = mapToQwtAxis(axis);	
const QwtScaleDiv *scDiv=d_plot->axisScaleDiv(a);	
boxStart->setText(QString::number(QMIN(scDiv->lBound(), scDiv->hBound())));
boxEnd->setText(QString::number(QMAX(scDiv->lBound(), scDiv->hBound())));

QwtValueList lst = scDiv->ticks (QwtScaleDiv::MajorTick);
boxStep->setText(QString::number(d_graph->axisStep(a)));
boxMajorValue->setValue(lst.count());
boxMinorValue->setValue(d_plot->axisMaxMinor(a));
	
if (axesType[a] == Graph::Time)
	{
	boxUnit->show();
	boxUnit->insertItem(tr("millisec."));
	boxUnit->insertItem(tr("sec."));
	boxUnit->insertItem(tr("min."));
	boxUnit->insertItem(tr("hours"));			
	}
else if (axesType[a] == Graph::Date)
	{
	boxUnit->show();
	boxUnit->insertItem(tr("days"));
	boxUnit->insertItem(tr("weeks"));			
	}

if (d_graph->axisStep(a) != 0.0)
	{
	btnStep->setChecked(true);
	boxStep->setEnabled(true);
	boxUnit->setEnabled(true);
		
	btnMajor->setChecked(false);
	boxMajorValue->setEnabled(false);
	boxMinorValue->setEnabled(false);
	}
else
	{
	btnStep->setChecked(false);
	boxStep->setEnabled(false);
	boxUnit->setEnabled(false);
	btnMajor->setChecked(true);
	boxMajorValue->setEnabled(true);
	boxMinorValue->setEnabled(true);
	}

const QwtScaleEngine *sc_eng = d_plot->axisScaleEngine(a);
btnInvert->setChecked(sc_eng->testAttribute(QwtScaleEngine::Inverted));
	
QwtScaleTransformation *tr = sc_eng->transformation();
boxScaleType->setCurrentItem((int)tr->type());
}

void AxesDialog::updateTitleBox(int axis)
{
	boxTitle->setText(titles[axis]);
}

void AxesDialog::setAxisTitles(QStringList t)
{
	titles=t;
}

void AxesDialog::pickAxisColor()
{
	QColor c = QColorDialog::getColor( boxAxisColor->color(), this);
		if ( !c.isValid() || c ==  boxAxisColor->color() )
			return;

	boxAxisColor->setColor ( c ) ;

	int axis=mapToQwtAxisId();
	QString formula =  boxFormula->text();
	if (!boxShowFormula->isChecked())
	   formula = QString();

    emit showAxis(axis, boxAxisType->currentIndex(), formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(), boxMinorTicksType->currentIndex(),
                  boxShowLabels->isChecked(), c, boxFormat->currentIndex(), boxPrecision->value(),
                  boxAngle->value(), boxBaseline->value(), formula, boxAxisNumColor->color());
}

void AxesDialog::pickAxisNumColor()
{
  	QColor c = QColorDialog::getColor( boxAxisNumColor->color(), this);
  	if ( !c.isValid() || c == boxAxisNumColor->color() )
  	     return;

  	boxAxisNumColor->setColor ( c ) ;
  	int axis=mapToQwtAxisId();
  	QString formula = boxFormula->text();
  	if (!boxShowFormula->isChecked())
  	     formula = QString::null;

  	emit showAxis(axis, boxAxisType->currentIndex(), formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(), boxMinorTicksType->currentIndex(),
  	              boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(), boxPrecision->value(),
  	              boxAngle->value(), boxBaseline->value(), formula, c);
}

void AxesDialog::setAxisType(int)
{
	int a = mapToQwtAxisId();
	int style = axesType[a];
		
	boxAxisType->setCurrentIndex(style);
	showAxisFormatOptions(style);
		
	if (style == 1)
		boxColName->setCurrentText(formatInfo[a]);
}

void AxesDialog::setBaselineDist(int)
{
	int a=mapToQwtAxisId();
		boxBaseline->setValue(axesBaseline[a]);
}

void AxesDialog::setAxesLabelsFormatInfo(const QStringList& lst)
{
	formatInfo = lst;
}

void AxesDialog::setAxesType(const QList<int>& list)
{
	axesType=list;
}

void AxesDialog::setAxesBaseline(const QList<int>& lst)
{
	axesBaseline = lst;
}

void AxesDialog::setTicksType(const QList<int>& majLst, const QList<int>& minLst)
{
	majTicks=majLst;
		minTicks=minLst;
}

void AxesDialog::setTicksType(int)
{
	int a=mapToQwtAxisId();
		boxMajorTicksType->setCurrentIndex(majTicks[a]);
		boxMinorTicksType->setCurrentIndex(minTicks[a]);
}

void AxesDialog::updateMajTicksType(int)
{
	int axis=mapToQwtAxisId();
		int type=boxMajorTicksType->currentIndex();
		if ( majTicks[axis] == type)
			return;

	majTicks[axis]=type;
	QString formula =  boxFormula->text();
	if (!boxShowFormula->isChecked())
		formula = QString();

    emit showAxis(axis,boxAxisType->currentIndex(),formatInfo[axis], boxShowAxis->isChecked(), type, boxMinorTicksType->currentIndex(),
			     boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(),boxPrecision->value(),
			     boxAngle->value(), boxBaseline->value(), formula, boxAxisNumColor->color());
}

void AxesDialog::updateMinTicksType(int)
{
	int axis=mapToQwtAxisId();
		int type=boxMinorTicksType->currentIndex();
		if ( minTicks[axis] == type)
			return;

	minTicks[axis]=type;
	QString formula =  boxFormula->text();

    if (!boxShowFormula->isChecked())
		formula = QString();

    emit showAxis(axis,boxAxisType->currentIndex(),formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(), type,
				  boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(),boxPrecision->value(),
				  boxAngle->value(), boxBaseline->value(), formula, boxAxisNumColor->color());
}

void AxesDialog::setEnabledTickLabels(const QStringList& labelsOn)
{
	tickLabelsOn=labelsOn;
}

void AxesDialog::updateTickLabelsList(bool on)
{
	int axis = mapToQwtAxisId();
	if (axis == QwtPlot::xBottom || axis == QwtPlot::xTop)
		boxAngle->setEnabled(on);
			
	bool userFormat = true;
	if (boxFormat->currentIndex() == 0)
		userFormat = false;
	boxPrecision->setEnabled(on && userFormat);
					
	if (tickLabelsOn[axis] == QString::number(on))
		return;
	tickLabelsOn[axis]=QString::number(on);

	int type = boxAxisType->currentIndex();
	if (type == Graph::Day || type == Graph::Month)
		formatInfo[axis] = QString::number(boxFormat->currentIndex());
	else if (type == Graph::Time || type == Graph::Date)
	{
		QStringList lst = formatInfo[axis].split(";", QString::SkipEmptyParts);			
		lst[1] = boxFormat->currentText();
		formatInfo[axis]  = lst.join(";");
	}
	else
		formatInfo[axis] = boxColName->currentText();
	
	QString formula = boxFormula->text();
	if (!boxShowFormula->isChecked())
	   formula = QString();

    emit showAxis(axis, type, formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(), boxMinorTicksType->currentIndex(),
                  boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentIndex(), boxPrecision->value(),
	              boxAngle->value(), boxBaseline->value(), formula, boxAxisNumColor->color());
}

void AxesDialog::setCurrentScale(int axisPos)
{
int axis = -1;
switch (axisPos)
	{
	case QwtScaleDraw::LeftScale:
		axis = 1;
	break;
	case QwtScaleDraw::BottomScale:
		axis = 0;
	break;
	case QwtScaleDraw::RightScale:
		axis = 3;
	break;
	case QwtScaleDraw::TopScale:
		axis = 2;
	break;
	}
if (generalDialog->currentPage()==(QWidget*)scalesPage)
	axesList->setCurrentRow(axis);
else if (generalDialog->currentPage()==(QWidget*)axesPage)
	axesTitlesList->setCurrentRow(axis);
}

void AxesDialog::showAxesPage()
{
	if (generalDialog->currentWidget()!=(QWidget*)axesPage)
		generalDialog->setCurrentWidget(axesPage);
}

void AxesDialog::showGridPage()
{
	if (generalDialog->currentWidget()!=(QWidget*)gridPage)
		generalDialog->setCurrentWidget(gridPage);
}

void AxesDialog::updateGrid(int)
{
	if (generalDialog->currentWidget()==gridPage)	
	{
		d_graph->setGridOptions(getGridOptions());
			d_graph->replot();
	}	
}

void AxesDialog::setLabelsNumericFormat(int)
{
	int axis = mapToQwtAxisId();
	int type = boxAxisType->currentIndex();
	int prec = boxPrecision->value();
	int format = boxFormat->currentIndex();
		
	Plot *plot = d_graph->plotWidget();
		
	if (type == Graph::Numeric)
	{	
		if (plot->axisLabelFormat(axis) == format && 
			plot->axisLabelPrecision(axis) == prec)
			return;
					
		if (format == 0)
			boxPrecision->setEnabled(false);
		else
			boxPrecision->setEnabled(true);
		}
	else if (type == Graph::Day || type == Graph::Month)
		formatInfo[axis] = QString::number(format);
	else if (type == Graph::Time || type == Graph::Date)
	{
		QStringList lst = formatInfo[axis].split(";", QString::SkipEmptyParts);			
		lst[1] = boxFormat->currentText();
		formatInfo[axis]  = lst.join(";");
	}
	else
		formatInfo[axis] = boxColName->currentText();
	
	QString formula =  boxFormula->text();
	if (!boxShowFormula->isChecked())
		formula = QString();

    emit showAxis(axis, type, formatInfo[axis], boxShowAxis->isChecked(), boxMajorTicksType->currentIndex(),
			boxMinorTicksType->currentIndex(), boxShowLabels->isChecked(), boxAxisColor->color(),
			format, prec, boxAngle->value(), boxBaseline->value(), formula, boxAxisNumColor->color());

    axesType[axis] = type;
}

void AxesDialog::showAxisFormula(int axis)
{
	QStringList l = d_graph->getAxesFormulas();
		QString formula = l[axis];
		if (!formula.isEmpty())
		{
			boxShowFormula->setChecked(true);
			boxFormula->show();
			boxFormula->setText(formula);
		}
		else
		{
			boxShowFormula->setChecked(false);
			boxFormula->clear();
			boxFormula->hide();
		}
}

void AxesDialog::updateLabelsFormat(int)
{
        if (boxAxisType->currentIndex() != Graph::Numeric)
        	return;

		int a = mapToQwtAxisId();		
		int format = d_graph->plotWidget()->axisLabelFormat(a);
        boxFormat->setCurrentIndex(format);
		boxPrecision->setValue(d_graph->plotWidget()->axisLabelPrecision(a));

        if (format == 0)
        	boxPrecision->setEnabled(false);
        else
        	boxPrecision->setEnabled(true);

        QStringList l = d_graph->getAxesFormulas();
        QString formula = l[a];
        if (!formula.isEmpty())
        {
        	boxShowFormula->setChecked(true);
        	boxFormula->show();
        	boxFormula->setText(formula);
        }
        else
        {
        	boxShowFormula->setChecked(false);
        	boxFormula->clear();
        	boxFormula->hide();
        }
}

void AxesDialog::initLabelsRotation(int xAngle, int yAngle)
{
	xBottomLabelsRotation=xAngle;
		xTopLabelsRotation=yAngle;
}

void AxesDialog::showGeneralPage()
{
	generalDialog->showPage (frame);
}

void AxesDialog::showFormulaBox()
{
	if (boxShowFormula->isChecked())
		boxFormula->show();
	else
		boxFormula->hide();
}

void AxesDialog::customAxisLabelFont()
{
	int axis = mapToQwtAxisId();
		bool okF;
		QFont oldFont = d_graph->axisTitleFont(axis);
	QFont fnt = QFontDialog::getFont( &okF, oldFont,this);
	if (okF && fnt != oldFont)
		d_graph->setAxisTitleFont(axis, fnt);
}

void AxesDialog::pageChanged ( QWidget *page )
{
  	if (lastPage == scalesPage && page == axesPage)
  	{
  		axesTitlesList->setCurrentRow(axesList->currentRow());
  	    lastPage = page;
  	}
  	else if (lastPage == axesPage && page == scalesPage)
  	{
  		axesList->setCurrentRow(axesTitlesList->currentRow());
  	    lastPage = page;
  	}
}

void AxesDialog::updateAntialiasing(bool on)
{	
	if (generalDialog->currentWidget() != frame)
		return;
			
	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g = (Graph*)allPlots.at(i);
			if (g)
				g->setAntialiasing(on);
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
			g->setAntialiasing(on);
	}
}

void AxesDialog::updateCanvasTransparency(bool on)
{	
	if (generalDialog->currentWidget() != frame)
		return;
			
	boxCanvasColor->setEnabled(!on);
	
	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g = (Graph*)allPlots.at(i);
			if (g)
			{
				QColor c = boxCanvasColor->color();
				if (boxCanvasTransparency->isChecked())
					c.setAlpha(0);
				g->setCanvasBackground(c);
			}
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
		{
			QColor c = boxCanvasColor->color();
			if (boxCanvasTransparency->isChecked())
				c.setAlpha(0);
			g->setCanvasBackground(c);
		}
	}
}

void AxesDialog::updateBackgroundTransparency(bool on)
{	
	if (generalDialog->currentWidget() != frame)
		return;
			
	boxBackgroundColor->setEnabled(!on);
	
	if (boxAll->isChecked())
	{
		QWidgetList allPlots = mPlot->graphPtrs();
		for (int i=0; i<allPlots.count();i++)
		{
			Graph* g = (Graph*)allPlots.at(i);
			if (g)
			{
				QColor c = boxBackgroundColor->color();
				if (boxBackgroundTransparency->isChecked())
					c.setAlpha(0);
				g->setBackgroundColor(c);
			}
		}
	}
	else
	{
		Graph* g = (Graph*)mPlot->activeGraph();
		if (g)
		{
			QColor c = boxBackgroundColor->color();
			if (boxBackgroundTransparency->isChecked())
				c.setAlpha(0);
			g->setBackgroundColor(c);
		}
	}
}

int AxesDialog::exec()
{
	axesList->setCurrentRow(0);
	axesGridList->setCurrentRow(0);
	axesTitlesList->setCurrentRow(0);
		
    setModal(true);
    show();
	return 0;
}
