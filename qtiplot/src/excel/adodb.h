/****************************************************************************
**
** Namespace ADODB generated by dumpcpp from type library
** msado15.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_ADODB_H
#define QAX_DUMPCPP_ADODB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef ADODB_EXPORT
#define ADODB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace ADODB {

    enum ADCPROP_ASYNCTHREADPRIORITY_ENUM {
        adPriorityLowest        = 1,
        adPriorityBelowNormal   = 2,
        adPriorityNormal        = 3,
        adPriorityAboveNormal   = 4,
        adPriorityHighest       = 5
    };

    enum ADCPROP_AUTORECALC_ENUM {
        adRecalcUpFront         = 0,
        adRecalcAlways          = 1
    };

    enum ADCPROP_UPDATECRITERIA_ENUM {
        adCriteriaKey           = 0,
        adCriteriaAllCols       = 1,
        adCriteriaUpdCols       = 2,
        adCriteriaTimeStamp     = 3
    };

    enum ADCPROP_UPDATERESYNC_ENUM {
        adResyncNone            = 0,
        adResyncAutoIncrement   = 1,
        adResyncConflicts       = 2,
        adResyncUpdates         = 4,
        adResyncInserts         = 8,
        adResyncAll             = 15
    };

    enum AffectEnum {
        adAffectCurrent         = 1,
        adAffectGroup           = 2,
        adAffectAll             = 3,
        adAffectAllChapters     = 4
    };

    enum BookmarkEnum {
        adBookmarkCurrent       = 0,
        adBookmarkFirst         = 1,
        adBookmarkLast          = 2
    };

    enum CommandTypeEnum {
        adCmdUnspecified        = -1,
        adCmdUnknown            = 8,
        adCmdText               = 1,
        adCmdTable              = 2,
        adCmdStoredProc         = 4,
        adCmdFile               = 256,
        adCmdTableDirect        = 512
    };

    enum CompareEnum {
        adCompareLessThan       = 0,
        adCompareEqual          = 1,
        adCompareGreaterThan    = 2,
        adCompareNotEqual       = 3,
        adCompareNotComparable  = 4
    };

    enum ConnectModeEnum {
        adModeUnknown           = 0,
        adModeRead              = 1,
        adModeWrite             = 2,
        adModeReadWrite         = 3,
        adModeShareDenyRead     = 4,
        adModeShareDenyWrite    = 8,
        adModeShareExclusive    = 12,
        adModeShareDenyNone     = 16,
        adModeRecursive         = 4194304
    };

    enum ConnectOptionEnum {
        adConnectUnspecified    = -1,
        adAsyncConnect          = 16
    };

    enum ConnectPromptEnum {
        adPromptAlways          = 1,
        adPromptComplete        = 2,
        adPromptCompleteRequired= 3,
        adPromptNever           = 4
    };

    enum CopyRecordOptionsEnum {
        adCopyUnspecified       = -1,
        adCopyOverWrite         = 1,
        adCopyAllowEmulation    = 4,
        adCopyNonRecursive      = 2
    };

    enum CursorLocationEnum {
        adUseNone               = 1,
        adUseServer             = 2,
        adUseClient             = 3,
        adUseClientBatch        = 3
    };

    enum CursorOptionEnum {
        adHoldRecords           = 256,
        adMovePrevious          = 512,
        adAddNew                = 16778240,
        adDelete                = 16779264,
        adUpdate                = 16809984,
        adBookmark              = 8192,
        adApproxPosition        = 16384,
        adUpdateBatch           = 65536,
        adResync                = 131072,
        adNotify                = 262144,
        adFind                  = 524288,
        adSeek                  = 4194304,
        adIndex                 = 8388608
    };

    enum CursorTypeEnum {
        adOpenUnspecified       = -1,
        adOpenForwardOnly       = 0,
        adOpenKeyset            = 1,
        adOpenDynamic           = 2,
        adOpenStatic            = 3
    };

    enum DataTypeEnum {
        adEmpty                 = 0,
        adTinyInt               = 16,
        adSmallInt              = 2,
        adInteger               = 3,
        adBigInt                = 20,
        adUnsignedTinyInt       = 17,
        adUnsignedSmallInt      = 18,
        adUnsignedInt           = 19,
        adUnsignedBigInt        = 21,
        adSingle                = 4,
        adDouble                = 5,
        adCurrency              = 6,
        adDecimal               = 14,
        adNumeric               = 131,
        adBoolean               = 11,
        adError                 = 10,
        adUserDefined           = 132,
        adVariant               = 12,
        adIDispatch             = 9,
        adIUnknown              = 13,
        adGUID                  = 72,
        adDate                  = 7,
        adDBDate                = 133,
        adDBTime                = 134,
        adDBTimeStamp           = 135,
        adBSTR                  = 8,
        adChar                  = 129,
        adVarChar               = 200,
        adLongVarChar           = 201,
        adWChar                 = 130,
        adVarWChar              = 202,
        adLongVarWChar          = 203,
        adBinary                = 128,
        adVarBinary             = 204,
        adLongVarBinary         = 205,
        adChapter               = 136,
        adFileTime              = 64,
        adPropVariant           = 138,
        adVarNumeric            = 139,
        adArray                 = 8192
    };

    enum EditModeEnum {
        adEditNone              = 0,
        adEditInProgress        = 1,
        adEditAdd               = 2,
        adEditDelete            = 4
    };

    enum ErrorValueEnum {
        adErrProviderFailed     = 3000,
        adErrInvalidArgument    = 3001,
        adErrOpeningFile        = 3002,
        adErrReadFile           = 3003,
        adErrWriteFile          = 3004,
        adErrNoCurrentRecord    = 3021,
        adErrIllegalOperation   = 3219,
        adErrCantChangeProvider = 3220,
        adErrInTransaction      = 3246,
        adErrFeatureNotAvailable= 3251,
        adErrItemNotFound       = 3265,
        adErrObjectInCollection = 3367,
        adErrObjectNotSet       = 3420,
        adErrDataConversion     = 3421,
        adErrObjectClosed       = 3704,
        adErrObjectOpen         = 3705,
        adErrProviderNotFound   = 3706,
        adErrBoundToCommand     = 3707,
        adErrInvalidParamInfo   = 3708,
        adErrInvalidConnection  = 3709,
        adErrNotReentrant       = 3710,
        adErrStillExecuting     = 3711,
        adErrOperationCancelled = 3712,
        adErrStillConnecting    = 3713,
        adErrInvalidTransaction = 3714,
        adErrNotExecuting       = 3715,
        adErrUnsafeOperation    = 3716,
        adwrnSecurityDialog     = 3717,
        adwrnSecurityDialogHeader= 3718,
        adErrIntegrityViolation = 3719,
        adErrPermissionDenied   = 3720,
        adErrDataOverflow       = 3721,
        adErrSchemaViolation    = 3722,
        adErrSignMismatch       = 3723,
        adErrCantConvertvalue   = 3724,
        adErrCantCreate         = 3725,
        adErrColumnNotOnThisRow = 3726,
        adErrURLDoesNotExist    = 3727,
        adErrTreePermissionDenied= 3728,
        adErrInvalidURL         = 3729,
        adErrResourceLocked     = 3730,
        adErrResourceExists     = 3731,
        adErrCannotComplete     = 3732,
        adErrVolumeNotFound     = 3733,
        adErrOutOfSpace         = 3734,
        adErrResourceOutOfScope = 3735,
        adErrUnavailable        = 3736,
        adErrURLNamedRowDoesNotExist= 3737,
        adErrDelResOutOfScope   = 3738,
        adErrPropInvalidColumn  = 3739,
        adErrPropInvalidOption  = 3740,
        adErrPropInvalidValue   = 3741,
        adErrPropConflicting    = 3742,
        adErrPropNotAllSettable = 3743,
        adErrPropNotSet         = 3744,
        adErrPropNotSettable    = 3745,
        adErrPropNotSupported   = 3746,
        adErrCatalogNotSet      = 3747,
        adErrCantChangeConnection= 3748,
        adErrFieldsUpdateFailed = 3749,
        adErrDenyNotSupported   = 3750,
        adErrDenyTypeNotSupported= 3751,
        adErrProviderNotSpecified= 3753,
        adErrConnectionStringTooLong= 3754
    };

    enum EventReasonEnum {
        adRsnAddNew             = 1,
        adRsnDelete             = 2,
        adRsnUpdate             = 3,
        adRsnUndoUpdate         = 4,
        adRsnUndoAddNew         = 5,
        adRsnUndoDelete         = 6,
        adRsnRequery            = 7,
        adRsnResynch            = 8,
        adRsnClose              = 9,
        adRsnMove               = 10,
        adRsnFirstChange        = 11,
        adRsnMoveFirst          = 12,
        adRsnMoveNext           = 13,
        adRsnMovePrevious       = 14,
        adRsnMoveLast           = 15
    };

    enum EventStatusEnum {
        adStatusOK              = 1,
        adStatusErrorsOccurred  = 2,
        adStatusCantDeny        = 3,
        adStatusCancel          = 4,
        adStatusUnwantedEvent   = 5
    };

    enum ExecuteOptionEnum {
        adOptionUnspecified     = -1,
        adAsyncExecute          = 16,
        adAsyncFetch            = 32,
        adAsyncFetchNonBlocking = 64,
        adExecuteNoRecords      = 128,
        adExecuteStream         = 1024,
        adExecuteRecord         = 2048
    };

    enum FieldAttributeEnum {
        adFldUnspecified        = -1,
        adFldMayDefer           = 2,
        adFldUpdatable          = 4,
        adFldUnknownUpdatable   = 8,
        adFldFixed              = 16,
        adFldIsNullable         = 32,
        adFldMayBeNull          = 64,
        adFldLong               = 128,
        adFldRowID              = 256,
        adFldRowVersion         = 512,
        adFldCacheDeferred      = 4096,
        adFldIsChapter          = 8192,
        adFldNegativeScale      = 16384,
        adFldKeyColumn          = 32768,
        adFldIsRowURL           = 65536,
        adFldIsDefaultStream    = 131072,
        adFldIsCollection       = 262144
    };

    enum FieldEnum {
        adDefaultStream         = -1,
        adRecordURL             = -2
    };

    enum FieldStatusEnum {
        adFieldOK               = 0,
        adFieldCantConvertValue = 2,
        adFieldIsNull           = 3,
        adFieldTruncated        = 4,
        adFieldSignMismatch     = 5,
        adFieldDataOverflow     = 6,
        adFieldCantCreate       = 7,
        adFieldUnavailable      = 8,
        adFieldPermissionDenied = 9,
        adFieldIntegrityViolation= 10,
        adFieldSchemaViolation  = 11,
        adFieldBadStatus        = 12,
        adFieldDefault          = 13,
        adFieldIgnore           = 15,
        adFieldDoesNotExist     = 16,
        adFieldInvalidURL       = 17,
        adFieldResourceLocked   = 18,
        adFieldResourceExists   = 19,
        adFieldCannotComplete   = 20,
        adFieldVolumeNotFound   = 21,
        adFieldOutOfSpace       = 22,
        adFieldCannotDeleteSource= 23,
        adFieldReadOnly         = 24,
        adFieldResourceOutOfScope= 25,
        adFieldAlreadyExists    = 26,
        adFieldPendingInsert    = 65536,
        adFieldPendingDelete    = 131072,
        adFieldPendingChange    = 262144,
        adFieldPendingUnknown   = 524288,
        adFieldPendingUnknownDelete= 1048576
    };

    enum FilterGroupEnum {
        adFilterNone            = 0,
        adFilterPendingRecords  = 1,
        adFilterAffectedRecords = 2,
        adFilterFetchedRecords  = 3,
        adFilterPredicate       = 4,
        adFilterConflictingRecords= 5
    };

    enum GetRowsOptionEnum {
        adGetRowsRest           = -1
    };

    enum IsolationLevelEnum {
        adXactUnspecified       = -1,
        adXactChaos             = 16,
        adXactReadUncommitted   = 256,
        adXactBrowse            = 256,
        adXactCursorStability   = 4096,
        adXactReadCommitted     = 4096,
        adXactRepeatableRead    = 65536,
        adXactSerializable      = 1048576,
        adXactIsolated          = 1048576
    };

    enum LineSeparatorEnum {
        adLF                    = 10,
        adCR                    = 13,
        adCRLF                  = -1
    };

    enum LockTypeEnum {
        adLockUnspecified       = -1,
        adLockReadOnly          = 1,
        adLockPessimistic       = 2,
        adLockOptimistic        = 3,
        adLockBatchOptimistic   = 4
    };

    enum MarshalOptionsEnum {
        adMarshalAll            = 0,
        adMarshalModifiedOnly   = 1
    };

    enum MoveRecordOptionsEnum {
        adMoveUnspecified       = -1,
        adMoveOverWrite         = 1,
        adMoveDontUpdateLinks   = 2,
        adMoveAllowEmulation    = 4
    };

    enum ObjectStateEnum {
        adStateClosed           = 0,
        adStateOpen             = 1,
        adStateConnecting       = 2,
        adStateExecuting        = 4,
        adStateFetching         = 8
    };

    enum ParameterAttributesEnum {
        adParamSigned           = 16,
        adParamNullable         = 64,
        adParamLong             = 128
    };

    enum ParameterDirectionEnum {
        adParamUnknown          = 0,
        adParamInput            = 1,
        adParamOutput           = 2,
        adParamInputOutput      = 3,
        adParamReturnValue      = 4
    };

    enum PersistFormatEnum {
        adPersistADTG           = 0,
        adPersistXML            = 1
    };

    enum PositionEnum {
        adPosUnknown            = -1,
        adPosBOF                = -2,
        adPosEOF                = -3
    };

    enum PropertyAttributesEnum {
        adPropNotSupported      = 0,
        adPropRequired          = 1,
        adPropOptional          = 2,
        adPropRead              = 512,
        adPropWrite             = 1024
    };

    enum RecordCreateOptionsEnum {
        adCreateCollection      = 8192,
        adCreateStructDoc       = -2147483648,
        adCreateNonCollection   = 0,
        adOpenIfExists          = 33554432,
        adCreateOverwrite       = 67108864,
        adFailIfNotExists       = -1
    };

    enum RecordOpenOptionsEnum {
        adOpenRecordUnspecified = -1,
        adOpenSource            = 8388608,
        adOpenOutput            = 8388608,
        adOpenAsync             = 4096,
        adDelayFetchStream      = 16384,
        adDelayFetchFields      = 32768,
        adOpenExecuteCommand    = 65536
    };

    enum RecordStatusEnum {
        adRecOK                 = 0,
        adRecNew                = 1,
        adRecModified           = 2,
        adRecDeleted            = 4,
        adRecUnmodified         = 8,
        adRecInvalid            = 16,
        adRecMultipleChanges    = 64,
        adRecPendingChanges     = 128,
        adRecCanceled           = 256,
        adRecCantRelease        = 1024,
        adRecConcurrencyViolation= 2048,
        adRecIntegrityViolation = 4096,
        adRecMaxChangesExceeded = 8192,
        adRecObjectOpen         = 16384,
        adRecOutOfMemory        = 32768,
        adRecPermissionDenied   = 65536,
        adRecSchemaViolation    = 131072,
        adRecDBDeleted          = 262144
    };

    enum RecordTypeEnum {
        adSimpleRecord          = 0,
        adCollectionRecord      = 1,
        adStructDoc             = 2
    };

    enum ResyncEnum {
        adResyncUnderlyingValues= 1,
        adResyncAllValues       = 2
    };

    enum SaveOptionsEnum {
        adSaveCreateNotExist    = 1,
        adSaveCreateOverWrite   = 2
    };

    enum SchemaEnum {
        adSchemaProviderSpecific= -1,
        adSchemaAsserts         = 0,
        adSchemaCatalogs        = 1,
        adSchemaCharacterSets   = 2,
        adSchemaCollations      = 3,
        adSchemaColumns         = 4,
        adSchemaCheckConstraints= 5,
        adSchemaConstraintColumnUsage= 6,
        adSchemaConstraintTableUsage= 7,
        adSchemaKeyColumnUsage  = 8,
        adSchemaReferentialContraints= 9,
        adSchemaReferentialConstraints= 9,
        adSchemaTableConstraints= 10,
        adSchemaColumnsDomainUsage= 11,
        adSchemaIndexes         = 12,
        adSchemaColumnPrivileges= 13,
        adSchemaTablePrivileges = 14,
        adSchemaUsagePrivileges = 15,
        adSchemaProcedures      = 16,
        adSchemaSchemata        = 17,
        adSchemaSQLLanguages    = 18,
        adSchemaStatistics      = 19,
        adSchemaTables          = 20,
        adSchemaTranslations    = 21,
        adSchemaProviderTypes   = 22,
        adSchemaViews           = 23,
        adSchemaViewColumnUsage = 24,
        adSchemaViewTableUsage  = 25,
        adSchemaProcedureParameters= 26,
        adSchemaForeignKeys     = 27,
        adSchemaPrimaryKeys     = 28,
        adSchemaProcedureColumns= 29,
        adSchemaDBInfoKeywords  = 30,
        adSchemaDBInfoLiterals  = 31,
        adSchemaCubes           = 32,
        adSchemaDimensions      = 33,
        adSchemaHierarchies     = 34,
        adSchemaLevels          = 35,
        adSchemaMeasures        = 36,
        adSchemaProperties      = 37,
        adSchemaMembers         = 38,
        adSchemaTrustees        = 39,
        adSchemaFunctions       = 40,
        adSchemaActions         = 41,
        adSchemaCommands        = 42,
        adSchemaSets            = 43
    };

    enum SearchDirectionEnum {
        adSearchForward         = 1,
        adSearchBackward        = -1
    };

    enum SeekEnum {
        adSeekFirstEQ           = 1,
        adSeekLastEQ            = 2,
        adSeekAfterEQ           = 4,
        adSeekAfter             = 8,
        adSeekBeforeEQ          = 16,
        adSeekBefore            = 32
    };

    enum StreamOpenOptionsEnum {
        adOpenStreamUnspecified = -1,
        adOpenStreamAsync       = 1,
        adOpenStreamFromRecord  = 4
    };

    enum StreamReadEnum {
        adReadAll               = -1,
        adReadLine              = -2
    };

    enum StreamTypeEnum {
        adTypeBinary            = 1,
        adTypeText              = 2
    };

    enum StreamWriteEnum {
        adWriteChar             = 0,
        adWriteLine             = 1,
        stWriteChar             = 0,
        stWriteLine             = 1
    };

    enum StringFormatEnum {
        adClipString            = 2
    };

    enum XactAttributeEnum {
        adXactCommitRetaining   = 131072,
        adXactAbortRetaining    = 262144,
        adXactAsyncPhaseOne     = 524288,
        adXactSyncPhaseOne      = 1048576
    };

// forward declarations
    enum CursorTypeEnum;
    enum CursorOptionEnum;
    enum LockTypeEnum;
    enum ExecuteOptionEnum;
    enum ConnectOptionEnum;
    enum ObjectStateEnum;
    enum CursorLocationEnum;
    enum DataTypeEnum;
    enum FieldAttributeEnum;
    enum EditModeEnum;
    enum RecordStatusEnum;
    enum GetRowsOptionEnum;
    enum PositionEnum;
    enum BookmarkEnum;
    enum MarshalOptionsEnum;
    enum AffectEnum;
    enum ResyncEnum;
    enum CompareEnum;
    enum FilterGroupEnum;
    enum SearchDirectionEnum;
    enum PersistFormatEnum;
    enum StringFormatEnum;
    enum ConnectPromptEnum;
    enum ConnectModeEnum;
    enum RecordCreateOptionsEnum;
    enum RecordOpenOptionsEnum;
    enum IsolationLevelEnum;
    enum XactAttributeEnum;
    enum PropertyAttributesEnum;
    enum ErrorValueEnum;
    enum ParameterAttributesEnum;
    enum ParameterDirectionEnum;
    enum CommandTypeEnum;
    enum EventStatusEnum;
    enum EventReasonEnum;
    enum SchemaEnum;
    enum FieldStatusEnum;
    enum SeekEnum;
    enum ADCPROP_UPDATECRITERIA_ENUM;
    enum ADCPROP_ASYNCTHREADPRIORITY_ENUM;
    enum ADCPROP_AUTORECALC_ENUM;
    enum ADCPROP_UPDATERESYNC_ENUM;
    enum MoveRecordOptionsEnum;
    enum CopyRecordOptionsEnum;
    enum StreamTypeEnum;
    enum LineSeparatorEnum;
    enum StreamOpenOptionsEnum;
    enum StreamWriteEnum;
    enum SaveOptionsEnum;
    enum FieldEnum;
    enum StreamReadEnum;
    enum RecordTypeEnum;
    class ConnectionEventsVt;
    class RecordsetEventsVt;
    class ADOConnectionConstruction15;
    class ADOConnectionConstruction;
    class ADORecordConstruction;
    class ADOStreamConstruction;
    class ADOCommandConstruction;
    class ADORecordsetConstruction;
    enum CursorTypeEnum;
    enum CursorOptionEnum;
    enum LockTypeEnum;
    enum ExecuteOptionEnum;
    enum ConnectOptionEnum;
    enum ObjectStateEnum;
    enum CursorLocationEnum;
    enum DataTypeEnum;
    enum FieldAttributeEnum;
    enum EditModeEnum;
    enum RecordStatusEnum;
    enum GetRowsOptionEnum;
    enum PositionEnum;
    enum BookmarkEnum;
    enum MarshalOptionsEnum;
    enum AffectEnum;
    enum ResyncEnum;
    enum CompareEnum;
    enum FilterGroupEnum;
    enum SearchDirectionEnum;
    enum PersistFormatEnum;
    enum StringFormatEnum;
    enum ConnectPromptEnum;
    enum ConnectModeEnum;
    enum RecordCreateOptionsEnum;
    enum RecordOpenOptionsEnum;
    enum IsolationLevelEnum;
    enum XactAttributeEnum;
    enum PropertyAttributesEnum;
    enum ErrorValueEnum;
    enum ParameterAttributesEnum;
    enum ParameterDirectionEnum;
    enum CommandTypeEnum;
    enum EventStatusEnum;
    enum EventReasonEnum;
    enum SchemaEnum;
    enum FieldStatusEnum;
    enum SeekEnum;
    enum ADCPROP_UPDATECRITERIA_ENUM;
    enum ADCPROP_ASYNCTHREADPRIORITY_ENUM;
    enum ADCPROP_AUTORECALC_ENUM;
    enum ADCPROP_UPDATERESYNC_ENUM;
    enum MoveRecordOptionsEnum;
    enum CopyRecordOptionsEnum;
    enum StreamTypeEnum;
    enum LineSeparatorEnum;
    enum StreamOpenOptionsEnum;
    enum StreamWriteEnum;
    enum SaveOptionsEnum;
    enum FieldEnum;
    enum StreamReadEnum;
    enum RecordTypeEnum;
    class Properties;
    class Property;
    class Error;
    class _Connection;
    class _Recordset;
    class _Parameter;
    class Parameters;
    class Errors;
    class Fields;
    class Field;
    class ConnectionEventsVt;
    class RecordsetEventsVt;
    class _Command;
    class ADOConnectionConstruction15;
    class ADOConnectionConstruction;
    class _Stream;
    class ADORecordConstruction;
    class ADOStreamConstruction;
    class ADOCommandConstruction;
    class ADORecordsetConstruction;

class ADODB_EXPORT _Collection : public QAxObject
{
public:
    _Collection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _DynaCollection : public QAxObject
{
public:
    _DynaCollection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Append

    For more information, see help context 1231029 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Append(IDispatch* Object);

    /*
    Method Delete

    For more information, see help context 1231044 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _ADO : public QAxObject
{
public:
    _ADO(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Properties : public QAxObject
{
public:
    Properties(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    For more information, see help context 1231057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Property* Item(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Property : public QAxObject
{
public:
    Property(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Type

    For more information, see help context 1231178 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::DataTypeEnum Type() const; //Returns the value of Type

    /*
    Property Value

    For more information, see help context 1231181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Error : public QAxObject
{
public:
    Error(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Description

    For more information, see help context 1231135 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property HelpContext

    For more information, see help context 1231145 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int HelpContext() const; //Returns the value of HelpContext

    /*
    Property HelpFile

    For more information, see help context 1000017 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString HelpFile() const; //Returns the value of HelpFile

    /*
    Property NativeError

    For more information, see help context 1231152 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int NativeError() const; //Returns the value of NativeError

    /*
    Property Number

    For more information, see help context 1231153 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Number() const; //Returns the value of Number

    /*
    Property SQLState

    For more information, see help context 1231175 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString SQLState() const; //Returns the value of SQLState

    /*
    Property Source

    For more information, see help context 1231172 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Source() const; //Returns the value of Source

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Errors : public QAxObject
{
public:
    Errors(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Clear

    For more information, see help context 1231037 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Clear();

    /*
    Method Item

    For more information, see help context 1231057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Error* Item(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Command15 : public QAxObject
{
public:
    Command15(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
    Property CommandText

    For more information, see help context 1231123 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CommandText() const; //Returns the value of CommandText
    inline void SetCommandText(const QString& value); //Sets the value of the CommandText property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property CommandType

    For more information, see help context 1231125 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CommandTypeEnum CommandType() const; //Returns the value of CommandType
    inline void SetCommandType(ADODB::CommandTypeEnum value); //Sets the value of the CommandType property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parameters

    For more information, see help context 1231103 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Parameters* Parameters() const; //Returns the value of Parameters

    /*
    Property Prepared

    For more information, see help context 1231161 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Prepared() const; //Returns the value of Prepared
    inline void SetPrepared(bool value); //Sets the value of the Prepared property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute();

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _Connection : public QAxObject
{
public:
    _Connection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property ConnectionString

    For more information, see help context 1231128 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ConnectionString() const; //Returns the value of ConnectionString
    inline void SetConnectionString(const QString& value); //Sets the value of the ConnectionString property

    /*
    Property ConnectionTimeout

    For more information, see help context 1231129 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int ConnectionTimeout() const; //Returns the value of ConnectionTimeout
    inline void SetConnectionTimeout(int value); //Sets the value of the ConnectionTimeout property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property DefaultDatabase

    For more information, see help context 1231133 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DefaultDatabase() const; //Returns the value of DefaultDatabase
    inline void SetDefaultDatabase(const QString& value); //Sets the value of the DefaultDatabase property

    /*
    Property Errors

    For more information, see help context 1231101 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Errors* Errors() const; //Returns the value of Errors

    /*
    Property IsolationLevel

    For more information, see help context 1231146 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::IsolationLevelEnum IsolationLevel() const; //Returns the value of IsolationLevel
    inline void SetIsolationLevel(ADODB::IsolationLevelEnum value); //Sets the value of the IsolationLevel property

    /*
    Property Mode

    For more information, see help context 1231150 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Provider

    For more information, see help context 1231162 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Provider() const; //Returns the value of Provider
    inline void SetProvider(const QString& value); //Sets the value of the Provider property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Version

    For more information, see help context 1231182 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Version() const; //Returns the value of Version

    /*
    Method BeginTrans

    For more information, see help context 1231031 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int BeginTrans();

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CommitTrans

    For more information, see help context 1000008 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CommitTrans();

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText);

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText, QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText, QVariant& RecordsAffected, int Options);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID, const QString& Password);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID, const QString& Password, int Options);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions, const QVariant& SchemaID);

    /*
    Method RollbackTrans

    For more information, see help context 1000009 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void RollbackTrans();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Connection15 : public QAxObject
{
public:
    Connection15(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property ConnectionString

    For more information, see help context 1231128 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ConnectionString() const; //Returns the value of ConnectionString
    inline void SetConnectionString(const QString& value); //Sets the value of the ConnectionString property

    /*
    Property ConnectionTimeout

    For more information, see help context 1231129 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int ConnectionTimeout() const; //Returns the value of ConnectionTimeout
    inline void SetConnectionTimeout(int value); //Sets the value of the ConnectionTimeout property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property DefaultDatabase

    For more information, see help context 1231133 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DefaultDatabase() const; //Returns the value of DefaultDatabase
    inline void SetDefaultDatabase(const QString& value); //Sets the value of the DefaultDatabase property

    /*
    Property Errors

    For more information, see help context 1231101 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Errors* Errors() const; //Returns the value of Errors

    /*
    Property IsolationLevel

    For more information, see help context 1231146 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::IsolationLevelEnum IsolationLevel() const; //Returns the value of IsolationLevel
    inline void SetIsolationLevel(ADODB::IsolationLevelEnum value); //Sets the value of the IsolationLevel property

    /*
    Property Mode

    For more information, see help context 1231150 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Provider

    For more information, see help context 1231162 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Provider() const; //Returns the value of Provider
    inline void SetProvider(const QString& value); //Sets the value of the Provider property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Version

    For more information, see help context 1231182 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Version() const; //Returns the value of Version

    /*
    Method BeginTrans

    For more information, see help context 1231031 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int BeginTrans();

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CommitTrans

    For more information, see help context 1000008 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CommitTrans();

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText);

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText, QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText, QVariant& RecordsAffected, int Options);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID, const QString& Password);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID, const QString& Password, int Options);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions, const QVariant& SchemaID);

    /*
    Method RollbackTrans

    For more information, see help context 1000009 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void RollbackTrans();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _Recordset : public QAxObject
{
public:
    _Recordset(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbsolutePage

    For more information, see help context 1231108 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePage() const; //Returns the value of AbsolutePage
    inline void SetAbsolutePage(ADODB::PositionEnum value); //Sets the value of the AbsolutePage property

    /*
    Property AbsolutePosition

    For more information, see help context 1231109 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePosition() const; //Returns the value of AbsolutePosition
    inline void SetAbsolutePosition(ADODB::PositionEnum value); //Sets the value of the AbsolutePosition property

    /*
    Property ActiveCommand

    For more information, see help context 1235900 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IDispatch* ActiveCommand() const; //Returns the value of ActiveCommand

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
	Property BOF

    For more information, see help context 1231120 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool BOF() const; //Returns the value of BOF

    /*
    Property Bookmark

    For more information, see help context 1231121 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Bookmark() const; //Returns the value of Bookmark
    inline void SetBookmark(const QVariant& value); //Sets the value of the Bookmark property

    /*
    Property CacheSize

    For more information, see help context 1231122 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CacheSize() const; //Returns the value of CacheSize
    inline void SetCacheSize(int value); //Sets the value of the CacheSize property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property CursorType

    For more information, see help context 1231132 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorTypeEnum CursorType() const; //Returns the value of CursorType
    inline void SetCursorType(ADODB::CursorTypeEnum value); //Sets the value of the CursorType property

    /*
    Property DataMember

    For more information, see help context 1235901 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DataMember() const; //Returns the value of DataMember
    inline void SetDataMember(const QString& value); //Sets the value of the DataMember property

    /*
    Property DataSource

    For more information, see help context 1235902 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* DataSource() const; //Returns the value of DataSource

    /*
	Property adoEOF

    For more information, see help context 1000016 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool adoEOF() const; //Returns the value of adoEOF

    /*
    Property EditMode

    For more information, see help context 1231137 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::EditModeEnum EditMode() const; //Returns the value of EditMode

    /*
    Property Fields

    For more information, see help context 1231102 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Filter

    For more information, see help context 1231140 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Filter() const; //Returns the value of Filter
    inline void SetFilter(const QVariant& value); //Sets the value of the Filter property

    /*
    Property Index

    For more information, see help context 1267418 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Index() const; //Returns the value of Index
    inline void SetIndex(const QString& value); //Sets the value of the Index property

    /*
    Property LockType

    For more information, see help context 1231147 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LockTypeEnum LockType() const; //Returns the value of LockType
    inline void SetLockType(ADODB::LockTypeEnum value); //Sets the value of the LockType property

    /*
    Property MarshalOptions

    For more information, see help context 1231148 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::MarshalOptionsEnum MarshalOptions() const; //Returns the value of MarshalOptions
    inline void SetMarshalOptions(ADODB::MarshalOptionsEnum value); //Sets the value of the MarshalOptions property

    /*
    Property MaxRecords

    For more information, see help context 1231149 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int MaxRecords() const; //Returns the value of MaxRecords
    inline void SetMaxRecords(int value); //Sets the value of the MaxRecords property

    /*
    Property PageCount

    For more information, see help context 1231157 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property PageSize

    For more information, see help context 1231158 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageSize() const; //Returns the value of PageSize
    inline void SetPageSize(int value); //Sets the value of the PageSize property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordCount

    For more information, see help context 1231163 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int RecordCount() const; //Returns the value of RecordCount

    /*
    Property Sort

    For more information, see help context 1231169 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Sort() const; //Returns the value of Sort
    inline void SetSort(const QString& value); //Sets the value of the Sort property

    /*
    Property Source

    For more information, see help context 1231173 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Source() const; //Returns the value of Source
    inline void SetSource(const QVariant& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Status

    For more information, see help context 1231177 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Status() const; //Returns the value of Status

    /*
    Property StayInSync

    For more information, see help context 1235920 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool StayInSync() const; //Returns the value of StayInSync
    inline void SetStayInSync(bool value); //Sets the value of the StayInSync property

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew();

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList);

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList, const QVariant& Values);

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method CancelUpdate

    For more information, see help context 1231035 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelUpdate();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone(ADODB::LockTypeEnum LockType);

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method Collect

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Collect(const QVariant& Index);

    /*
    Method CompareBookmarks

    For more information, see help context 1235876 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline CompareEnum CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2);

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete();

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(ADODB::AffectEnum AffectRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows();

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start, const QVariant& Fields);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString();

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords, const QVariant& Start);

    /*
    Method MoveFirst

    For more information, see help context 1231059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveFirst();

    /*
    Method MoveLast

    For more information, see help context 1000010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveLast();

    /*
    Method MoveNext

    For more information, see help context 1000011 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveNext();

    /*
    Method MovePrevious

    For more information, see help context 1000012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MovePrevious();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset(QVariant& RecordsAffected);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options);

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery();

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery(int Options);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync();

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues);

    /*
    Method Save

    For more information, see help context 1231071 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Save();

    /*
    Method Save

    For more information, see help context 1231071 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Save(const QVariant& Destination);

    /*
    Method Save

    For more information, see help context 1231071 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Save(const QVariant& Destination, ADODB::PersistFormatEnum PersistFormat);

    /*
    Method Seek

    For more information, see help context 1267419 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Seek(const QVariant& KeyValues);

    /*
    Method Seek

    For more information, see help context 1267419 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Seek(const QVariant& KeyValues, ADODB::SeekEnum SeekOption);

    /*
    Method SetCollect
    */
    inline QVariant SetCollect(const QVariant& Index, const QVariant& rhs);

    /*
    Method Supports

    For more information, see help context 1231073 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Supports(ADODB::CursorOptionEnum CursorOptions);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update();

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields, const QVariant& Values);

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch();

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method _xClone

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* _xClone();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync(ADODB::AffectEnum AffectRecords);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave();

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Recordset21 : public QAxObject
{
public:
    Recordset21(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbsolutePage

    For more information, see help context 1231108 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePage() const; //Returns the value of AbsolutePage
    inline void SetAbsolutePage(ADODB::PositionEnum value); //Sets the value of the AbsolutePage property

    /*
    Property AbsolutePosition

    For more information, see help context 1231109 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePosition() const; //Returns the value of AbsolutePosition
    inline void SetAbsolutePosition(ADODB::PositionEnum value); //Sets the value of the AbsolutePosition property

    /*
    Property ActiveCommand

    For more information, see help context 1235900 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IDispatch* ActiveCommand() const; //Returns the value of ActiveCommand

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
	Property BOF

    For more information, see help context 1231120 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool BOF() const; //Returns the value of BOF

    /*
    Property Bookmark

    For more information, see help context 1231121 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Bookmark() const; //Returns the value of Bookmark
    inline void SetBookmark(const QVariant& value); //Sets the value of the Bookmark property

    /*
    Property CacheSize

    For more information, see help context 1231122 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CacheSize() const; //Returns the value of CacheSize
    inline void SetCacheSize(int value); //Sets the value of the CacheSize property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property CursorType

    For more information, see help context 1231132 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorTypeEnum CursorType() const; //Returns the value of CursorType
    inline void SetCursorType(ADODB::CursorTypeEnum value); //Sets the value of the CursorType property

    /*
    Property DataMember

    For more information, see help context 1235901 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DataMember() const; //Returns the value of DataMember
    inline void SetDataMember(const QString& value); //Sets the value of the DataMember property

    /*
    Property DataSource

    For more information, see help context 1235902 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* DataSource() const; //Returns the value of DataSource

    /*
	Property adoEOF

    For more information, see help context 1000016 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool adoEOF() const; //Returns the value of adoEOF

    /*
    Property EditMode

    For more information, see help context 1231137 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::EditModeEnum EditMode() const; //Returns the value of EditMode

    /*
    Property Fields

    For more information, see help context 1231102 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Filter

    For more information, see help context 1231140 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Filter() const; //Returns the value of Filter
    inline void SetFilter(const QVariant& value); //Sets the value of the Filter property

    /*
    Property Index

    For more information, see help context 1267418 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Index() const; //Returns the value of Index
    inline void SetIndex(const QString& value); //Sets the value of the Index property

    /*
    Property LockType

    For more information, see help context 1231147 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LockTypeEnum LockType() const; //Returns the value of LockType
    inline void SetLockType(ADODB::LockTypeEnum value); //Sets the value of the LockType property

    /*
    Property MarshalOptions

    For more information, see help context 1231148 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::MarshalOptionsEnum MarshalOptions() const; //Returns the value of MarshalOptions
    inline void SetMarshalOptions(ADODB::MarshalOptionsEnum value); //Sets the value of the MarshalOptions property

    /*
    Property MaxRecords

    For more information, see help context 1231149 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int MaxRecords() const; //Returns the value of MaxRecords
    inline void SetMaxRecords(int value); //Sets the value of the MaxRecords property

    /*
    Property PageCount

    For more information, see help context 1231157 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property PageSize

    For more information, see help context 1231158 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageSize() const; //Returns the value of PageSize
    inline void SetPageSize(int value); //Sets the value of the PageSize property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordCount

    For more information, see help context 1231163 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int RecordCount() const; //Returns the value of RecordCount

    /*
    Property Sort

    For more information, see help context 1231169 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Sort() const; //Returns the value of Sort
    inline void SetSort(const QString& value); //Sets the value of the Sort property

    /*
    Property Source

    For more information, see help context 1231173 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Source() const; //Returns the value of Source
    inline void SetSource(const QVariant& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Status

    For more information, see help context 1231177 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Status() const; //Returns the value of Status

    /*
    Property StayInSync

    For more information, see help context 1235920 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool StayInSync() const; //Returns the value of StayInSync
    inline void SetStayInSync(bool value); //Sets the value of the StayInSync property

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew();

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList);

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList, const QVariant& Values);

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method CancelUpdate

    For more information, see help context 1231035 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelUpdate();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone(ADODB::LockTypeEnum LockType);

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method Collect

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Collect(const QVariant& Index);

    /*
    Method CompareBookmarks

    For more information, see help context 1235876 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline CompareEnum CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2);

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete();

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(ADODB::AffectEnum AffectRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows();

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start, const QVariant& Fields);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString();

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords, const QVariant& Start);

    /*
    Method MoveFirst

    For more information, see help context 1231059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveFirst();

    /*
    Method MoveLast

    For more information, see help context 1000010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveLast();

    /*
    Method MoveNext

    For more information, see help context 1000011 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveNext();

    /*
    Method MovePrevious

    For more information, see help context 1000012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MovePrevious();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset(QVariant& RecordsAffected);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options);

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery();

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery(int Options);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync();

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues);

    /*
    Method Seek

    For more information, see help context 1267419 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Seek(const QVariant& KeyValues);

    /*
    Method Seek

    For more information, see help context 1267419 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Seek(const QVariant& KeyValues, ADODB::SeekEnum SeekOption);

    /*
    Method SetCollect
    */
    inline QVariant SetCollect(const QVariant& Index, const QVariant& rhs);

    /*
    Method Supports

    For more information, see help context 1231073 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Supports(ADODB::CursorOptionEnum CursorOptions);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update();

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields, const QVariant& Values);

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch();

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method _xClone

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* _xClone();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync(ADODB::AffectEnum AffectRecords);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave();

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Recordset20 : public QAxObject
{
public:
    Recordset20(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbsolutePage

    For more information, see help context 1231108 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePage() const; //Returns the value of AbsolutePage
    inline void SetAbsolutePage(ADODB::PositionEnum value); //Sets the value of the AbsolutePage property

    /*
    Property AbsolutePosition

    For more information, see help context 1231109 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePosition() const; //Returns the value of AbsolutePosition
    inline void SetAbsolutePosition(ADODB::PositionEnum value); //Sets the value of the AbsolutePosition property

    /*
    Property ActiveCommand

    For more information, see help context 1235900 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IDispatch* ActiveCommand() const; //Returns the value of ActiveCommand

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
	Property BOF

    For more information, see help context 1231120 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool BOF() const; //Returns the value of BOF

    /*
    Property Bookmark

    For more information, see help context 1231121 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Bookmark() const; //Returns the value of Bookmark
    inline void SetBookmark(const QVariant& value); //Sets the value of the Bookmark property

    /*
    Property CacheSize

    For more information, see help context 1231122 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CacheSize() const; //Returns the value of CacheSize
    inline void SetCacheSize(int value); //Sets the value of the CacheSize property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property CursorType

    For more information, see help context 1231132 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorTypeEnum CursorType() const; //Returns the value of CursorType
    inline void SetCursorType(ADODB::CursorTypeEnum value); //Sets the value of the CursorType property

    /*
    Property DataMember

    For more information, see help context 1235901 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DataMember() const; //Returns the value of DataMember
    inline void SetDataMember(const QString& value); //Sets the value of the DataMember property

    /*
    Property DataSource

    For more information, see help context 1235902 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* DataSource() const; //Returns the value of DataSource

    /*
	Property adoEOF

    For more information, see help context 1000016 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool adoEOF() const; //Returns the value of adoEOF

    /*
    Property EditMode

    For more information, see help context 1231137 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::EditModeEnum EditMode() const; //Returns the value of EditMode

    /*
    Property Fields

    For more information, see help context 1231102 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Filter

    For more information, see help context 1231140 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Filter() const; //Returns the value of Filter
    inline void SetFilter(const QVariant& value); //Sets the value of the Filter property

    /*
    Property LockType

    For more information, see help context 1231147 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LockTypeEnum LockType() const; //Returns the value of LockType
    inline void SetLockType(ADODB::LockTypeEnum value); //Sets the value of the LockType property

    /*
    Property MarshalOptions

    For more information, see help context 1231148 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::MarshalOptionsEnum MarshalOptions() const; //Returns the value of MarshalOptions
    inline void SetMarshalOptions(ADODB::MarshalOptionsEnum value); //Sets the value of the MarshalOptions property

    /*
    Property MaxRecords

    For more information, see help context 1231149 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int MaxRecords() const; //Returns the value of MaxRecords
    inline void SetMaxRecords(int value); //Sets the value of the MaxRecords property

    /*
    Property PageCount

    For more information, see help context 1231157 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property PageSize

    For more information, see help context 1231158 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageSize() const; //Returns the value of PageSize
    inline void SetPageSize(int value); //Sets the value of the PageSize property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordCount

    For more information, see help context 1231163 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int RecordCount() const; //Returns the value of RecordCount

    /*
    Property Sort

    For more information, see help context 1231169 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Sort() const; //Returns the value of Sort
    inline void SetSort(const QString& value); //Sets the value of the Sort property

    /*
    Property Source

    For more information, see help context 1231173 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Source() const; //Returns the value of Source
    inline void SetSource(const QVariant& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Status

    For more information, see help context 1231177 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Status() const; //Returns the value of Status

    /*
    Property StayInSync

    For more information, see help context 1235920 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool StayInSync() const; //Returns the value of StayInSync
    inline void SetStayInSync(bool value); //Sets the value of the StayInSync property

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew();

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList);

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList, const QVariant& Values);

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method CancelUpdate

    For more information, see help context 1231035 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelUpdate();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone(ADODB::LockTypeEnum LockType);

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method Collect

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Collect(const QVariant& Index);

    /*
    Method CompareBookmarks

    For more information, see help context 1235876 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline CompareEnum CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2);

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete();

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(ADODB::AffectEnum AffectRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows();

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start, const QVariant& Fields);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString();

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords, const QVariant& Start);

    /*
    Method MoveFirst

    For more information, see help context 1231059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveFirst();

    /*
    Method MoveLast

    For more information, see help context 1000010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveLast();

    /*
    Method MoveNext

    For more information, see help context 1000011 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveNext();

    /*
    Method MovePrevious

    For more information, see help context 1000012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MovePrevious();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset(QVariant& RecordsAffected);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options);

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery();

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery(int Options);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync();

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues);

    /*
    Method SetCollect
    */
    inline QVariant SetCollect(const QVariant& Index, const QVariant& rhs);

    /*
    Method Supports

    For more information, see help context 1231073 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Supports(ADODB::CursorOptionEnum CursorOptions);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update();

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields, const QVariant& Values);

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch();

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method _xClone

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* _xClone();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync(ADODB::AffectEnum AffectRecords);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave();

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Recordset15 : public QAxObject
{
public:
    Recordset15(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbsolutePage

    For more information, see help context 1231108 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePage() const; //Returns the value of AbsolutePage
    inline void SetAbsolutePage(ADODB::PositionEnum value); //Sets the value of the AbsolutePage property

    /*
    Property AbsolutePosition

    For more information, see help context 1231109 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePosition() const; //Returns the value of AbsolutePosition
    inline void SetAbsolutePosition(ADODB::PositionEnum value); //Sets the value of the AbsolutePosition property

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
	Property BOF

    For more information, see help context 1231120 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool BOF() const; //Returns the value of BOF

    /*
    Property Bookmark

    For more information, see help context 1231121 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Bookmark() const; //Returns the value of Bookmark
    inline void SetBookmark(const QVariant& value); //Sets the value of the Bookmark property

    /*
    Property CacheSize

    For more information, see help context 1231122 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CacheSize() const; //Returns the value of CacheSize
    inline void SetCacheSize(int value); //Sets the value of the CacheSize property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property CursorType

    For more information, see help context 1231132 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorTypeEnum CursorType() const; //Returns the value of CursorType
    inline void SetCursorType(ADODB::CursorTypeEnum value); //Sets the value of the CursorType property

    /*
	Property adoEOF

    For more information, see help context 1000016 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool adoEOF() const; //Returns the value of adoEOF

    /*
    Property EditMode

    For more information, see help context 1231137 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::EditModeEnum EditMode() const; //Returns the value of EditMode

    /*
    Property Fields

    For more information, see help context 1231102 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Filter

    For more information, see help context 1231140 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Filter() const; //Returns the value of Filter
    inline void SetFilter(const QVariant& value); //Sets the value of the Filter property

    /*
    Property LockType

    For more information, see help context 1231147 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LockTypeEnum LockType() const; //Returns the value of LockType
    inline void SetLockType(ADODB::LockTypeEnum value); //Sets the value of the LockType property

    /*
    Property MarshalOptions

    For more information, see help context 1231148 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::MarshalOptionsEnum MarshalOptions() const; //Returns the value of MarshalOptions
    inline void SetMarshalOptions(ADODB::MarshalOptionsEnum value); //Sets the value of the MarshalOptions property

    /*
    Property MaxRecords

    For more information, see help context 1231149 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int MaxRecords() const; //Returns the value of MaxRecords
    inline void SetMaxRecords(int value); //Sets the value of the MaxRecords property

    /*
    Property PageCount

    For more information, see help context 1231157 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property PageSize

    For more information, see help context 1231158 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageSize() const; //Returns the value of PageSize
    inline void SetPageSize(int value); //Sets the value of the PageSize property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordCount

    For more information, see help context 1231163 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int RecordCount() const; //Returns the value of RecordCount

    /*
    Property Sort

    For more information, see help context 1231169 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Sort() const; //Returns the value of Sort
    inline void SetSort(const QString& value); //Sets the value of the Sort property

    /*
    Property Source

    For more information, see help context 1231173 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Source() const; //Returns the value of Source
    inline void SetSource(const QVariant& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Status

    For more information, see help context 1231177 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Status() const; //Returns the value of Status

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew();

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList);

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList, const QVariant& Values);

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method CancelUpdate

    For more information, see help context 1231035 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelUpdate();

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method Collect

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Collect(const QVariant& Index);

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete();

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(ADODB::AffectEnum AffectRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows();

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start, const QVariant& Fields);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords, const QVariant& Start);

    /*
    Method MoveFirst

    For more information, see help context 1231059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveFirst();

    /*
    Method MoveLast

    For more information, see help context 1000010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveLast();

    /*
    Method MoveNext

    For more information, see help context 1000011 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveNext();

    /*
    Method MovePrevious

    For more information, see help context 1000012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MovePrevious();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset(QVariant& RecordsAffected);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options);

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery();

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery(int Options);

    /*
    Method SetCollect
    */
    inline QVariant SetCollect(const QVariant& Index, const QVariant& rhs);

    /*
    Method Supports

    For more information, see help context 1231073 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Supports(ADODB::CursorOptionEnum CursorOptions);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update();

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields, const QVariant& Values);

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch();

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method _xClone

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* _xClone();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync(ADODB::AffectEnum AffectRecords);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Fields : public QAxObject
{
public:
    Fields(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Append

    For more information, see help context 1241181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Append(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method Append

    For more information, see help context 1241181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize);

    /*
    Method Append

    For more information, see help context 1241181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib);

    /*
    Method Append

    For more information, see help context 1241181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib, const QVariant& FieldValue);

    /*
    Method CancelUpdate

    For more information, see help context 1241184 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelUpdate();

    /*
    Method Delete

    For more information, see help context 1241180 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(const QVariant& Index);

    /*
    Method Item

    For more information, see help context 1231057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Field* Item(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method Resync

    For more information, see help context 1241183 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync();

    /*
    Method Resync

    For more information, see help context 1241183 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::ResyncEnum ResyncValues);

    /*
    Method Update

    For more information, see help context 1241182 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update();

    /*
    Method _Append

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _Append(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method _Append

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize);

    /*
    Method _Append

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Fields20 : public QAxObject
{
public:
    Fields20(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Delete

    For more information, see help context 1241180 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(const QVariant& Index);

    /*
    Method Item

    For more information, see help context 1231057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Field* Item(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _Append

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _Append(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method _Append

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize);

    /*
    Method _Append

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Fields15 : public QAxObject
{
public:
    Fields15(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    For more information, see help context 1231057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Field* Item(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Field : public QAxObject
{
public:
    Field(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActualSize

    For more information, see help context 1231116 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int ActualSize() const; //Returns the value of ActualSize

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property DataFormat

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* DataFormat() const; //Returns the value of DataFormat

    /*
    Property DefinedSize

    For more information, see help context 1231134 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int DefinedSize() const; //Returns the value of DefinedSize
    inline void SetDefinedSize(int value); //Sets the value of the DefinedSize property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NumericScale

    For more information, see help context 1231154 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint NumericScale() const; //Returns the value of NumericScale
    inline void SetNumericScale(uint value); //Sets the value of the NumericScale property

    /*
    Property OriginalValue

    For more information, see help context 1231156 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant OriginalValue() const; //Returns the value of OriginalValue

    /*
    Property Precision

    For more information, see help context 1231160 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint Precision() const; //Returns the value of Precision
    inline void SetPrecision(uint value); //Sets the value of the Precision property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Status

    For more information, see help context 1231118 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Status() const; //Returns the value of Status

    /*
    Property Type

    For more information, see help context 1231178 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::DataTypeEnum Type() const; //Returns the value of Type
    inline void SetType(ADODB::DataTypeEnum value); //Sets the value of the Type property

    /*
    Property UnderlyingValue

    For more information, see help context 1231179 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant UnderlyingValue() const; //Returns the value of UnderlyingValue

    /*
    Property Value

    For more information, see help context 1231181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method AppendChunk

    For more information, see help context 1231030 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AppendChunk(const QVariant& Data);

    /*
    Method GetChunk

    For more information, see help context 1231054 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetChunk(int Length);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Field20 : public QAxObject
{
public:
    Field20(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActualSize

    For more information, see help context 1231116 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int ActualSize() const; //Returns the value of ActualSize

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property DataFormat

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* DataFormat() const; //Returns the value of DataFormat

    /*
    Property DefinedSize

    For more information, see help context 1231134 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int DefinedSize() const; //Returns the value of DefinedSize
    inline void SetDefinedSize(int value); //Sets the value of the DefinedSize property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NumericScale

    For more information, see help context 1231154 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint NumericScale() const; //Returns the value of NumericScale
    inline void SetNumericScale(uint value); //Sets the value of the NumericScale property

    /*
    Property OriginalValue

    For more information, see help context 1231156 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant OriginalValue() const; //Returns the value of OriginalValue

    /*
    Property Precision

    For more information, see help context 1231160 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint Precision() const; //Returns the value of Precision
    inline void SetPrecision(uint value); //Sets the value of the Precision property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Type

    For more information, see help context 1231178 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::DataTypeEnum Type() const; //Returns the value of Type
    inline void SetType(ADODB::DataTypeEnum value); //Sets the value of the Type property

    /*
    Property UnderlyingValue

    For more information, see help context 1231179 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant UnderlyingValue() const; //Returns the value of UnderlyingValue

    /*
    Property Value

    For more information, see help context 1231181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method AppendChunk

    For more information, see help context 1231030 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AppendChunk(const QVariant& Data);

    /*
    Method GetChunk

    For more information, see help context 1231054 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetChunk(int Length);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _Parameter : public QAxObject
{
public:
    _Parameter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property Direction

    For more information, see help context 1231136 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ParameterDirectionEnum Direction() const; //Returns the value of Direction
    inline void SetDirection(ADODB::ParameterDirectionEnum value); //Sets the value of the Direction property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NumericScale

    For more information, see help context 1231154 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint NumericScale() const; //Returns the value of NumericScale
    inline void SetNumericScale(uint value); //Sets the value of the NumericScale property

    /*
    Property Precision

    For more information, see help context 1231160 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint Precision() const; //Returns the value of Precision
    inline void SetPrecision(uint value); //Sets the value of the Precision property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Size

    For more information, see help context 1231168 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Size() const; //Returns the value of Size
    inline void SetSize(int value); //Sets the value of the Size property

    /*
    Property Type

    For more information, see help context 1231178 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::DataTypeEnum Type() const; //Returns the value of Type
    inline void SetType(ADODB::DataTypeEnum value); //Sets the value of the Type property

    /*
    Property Value

    For more information, see help context 1231181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method AppendChunk

    For more information, see help context 1231030 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AppendChunk(const QVariant& Val);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Parameters : public QAxObject
{
public:
    Parameters(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 1231130 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Append

    For more information, see help context 1231029 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Append(IDispatch* Object);

    /*
    Method Delete

    For more information, see help context 1231044 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(const QVariant& Index);

    /*
    Method Item

    For more information, see help context 1231057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* Item(const QVariant& Index);

    /*
    Method Refresh

    For more information, see help context 1231066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Refresh();

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Command25 : public QAxObject
{
public:
    Command25(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
    Property CommandText

    For more information, see help context 1231123 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CommandText() const; //Returns the value of CommandText
    inline void SetCommandText(const QString& value); //Sets the value of the CommandText property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property CommandType

    For more information, see help context 1231125 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CommandTypeEnum CommandType() const; //Returns the value of CommandType
    inline void SetCommandType(ADODB::CommandTypeEnum value); //Sets the value of the CommandType property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parameters

    For more information, see help context 1231103 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Parameters* Parameters() const; //Returns the value of Parameters

    /*
    Property Prepared

    For more information, see help context 1231161 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Prepared() const; //Returns the value of Prepared
    inline void SetPrepared(bool value); //Sets the value of the Prepared property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute();

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _Command : public QAxObject
{
public:
    _Command(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
    Property CommandStream

    For more information, see help context 1231190 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant CommandStream() const; //Returns the value of CommandStream

    /*
    Property CommandText

    For more information, see help context 1231123 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CommandText() const; //Returns the value of CommandText
    inline void SetCommandText(const QString& value); //Sets the value of the CommandText property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property CommandType

    For more information, see help context 1231125 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CommandTypeEnum CommandType() const; //Returns the value of CommandType
    inline void SetCommandType(ADODB::CommandTypeEnum value); //Sets the value of the CommandType property

    /*
    Property Dialect

    For more information, see help context 1231191 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Dialect() const; //Returns the value of Dialect
    inline void SetDialect(const QString& value); //Sets the value of the Dialect property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NamedParameters

    For more information, see help context 1231192 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool NamedParameters() const; //Returns the value of NamedParameters
    inline void SetNamedParameters(bool value); //Sets the value of the NamedParameters property

    /*
    Property Parameters

    For more information, see help context 1231103 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Parameters* Parameters() const; //Returns the value of Parameters

    /*
    Property Prepared

    For more information, see help context 1231161 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Prepared() const; //Returns the value of Prepared
    inline void SetPrepared(bool value); //Sets the value of the Prepared property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute();

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class ConnectionEventsVt : public QAxObject {};

// stub for vtable-only interface
class RecordsetEventsVt : public QAxObject {};

// skipping event interface ConnectionEvents

// skipping event interface RecordsetEvents

// stub for vtable-only interface
class ADOConnectionConstruction15 : public QAxObject {};

// stub for vtable-only interface
class ADOConnectionConstruction : public QAxObject {};

class ADODB_EXPORT _Record : public QAxObject
{
public:
    _Record(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QString& value); //Sets the value of the ActiveConnection property

    /*
    Property Fields

    For more information, see help context 1232009 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Mode

    For more information, see help context 1232002 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property ParentURL

    For more information, see help context 1232003 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ParentURL() const; //Returns the value of ParentURL

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordType

    For more information, see help context 1232010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::RecordTypeEnum RecordType() const; //Returns the value of RecordType

    /*
    Property Source

    For more information, see help context 1232001 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Source() const; //Returns the value of Source
    inline void SetSource(const QString& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1232000 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ObjectStateEnum State() const; //Returns the value of State

    /*
    Method Cancel

    For more information, see help context 1232012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method Close

    For more information, see help context 1232008 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord();

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options, bool Async);

    /*
    Method DeleteRecord

    For more information, see help context 1232006 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void DeleteRecord();

    /*
    Method DeleteRecord

    For more information, see help context 1232006 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void DeleteRecord(const QString& Source);

    /*
    Method DeleteRecord

    For more information, see help context 1232006 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void DeleteRecord(const QString& Source, bool Async);

    /*
    Method GetChildren

    For more information, see help context 1232013 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* GetChildren();

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord();

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options, bool Async);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName, const QString& Password);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT _Stream : public QAxObject
{
public:
    _Stream(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Charset

    For more information, see help context 1232057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Charset() const; //Returns the value of Charset
    inline void SetCharset(const QString& value); //Sets the value of the Charset property

    /*
    Property EOS

    For more information, see help context 1232051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool EOS() const; //Returns the value of EOS

    /*
    Property LineSeparator

    For more information, see help context 1232054 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LineSeparatorEnum LineSeparator() const; //Returns the value of LineSeparator
    inline void SetLineSeparator(ADODB::LineSeparatorEnum value); //Sets the value of the LineSeparator property

    /*
    Property Mode

    For more information, see help context 1232056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property Position

    For more information, see help context 1232052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Position() const; //Returns the value of Position
    inline void SetPosition(int value); //Sets the value of the Position property

    /*
    Property Size

    For more information, see help context 1232050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Size() const; //Returns the value of Size

    /*
    Property State

    For more information, see help context 1232055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ObjectStateEnum State() const; //Returns the value of State

    /*
    Property Type

    For more information, see help context 1232053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::StreamTypeEnum Type() const; //Returns the value of Type
    inline void SetType(ADODB::StreamTypeEnum value); //Sets the value of the Type property

    /*
    Method Cancel

    For more information, see help context 1232070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method Close

    For more information, see help context 1232060 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CopyTo

    For more information, see help context 1232064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CopyTo(ADODB::_Stream* DestStream);

    /*
    Method CopyTo

    For more information, see help context 1232064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CopyTo(ADODB::_Stream* DestStream, int CharNumber);

    /*
    Method Flush

    For more information, see help context 1232065 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Flush();

    /*
    Method LoadFromFile

    For more information, see help context 1232067 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void LoadFromFile(const QString& FileName);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName, const QString& Password);

    /*
    Method Read

    For more information, see help context 1232058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Read();

    /*
    Method Read

    For more information, see help context 1232058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Read(int NumBytes);

    /*
    Method ReadText

    For more information, see help context 1232068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ReadText();

    /*
    Method ReadText

    For more information, see help context 1232068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ReadText(int NumChars);

    /*
    Method SaveToFile

    For more information, see help context 1232066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SaveToFile(const QString& FileName);

    /*
    Method SaveToFile

    For more information, see help context 1232066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SaveToFile(const QString& FileName, ADODB::SaveOptionsEnum Options);

    /*
    Method SetEOS

    For more information, see help context 1232063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SetEOS();

    /*
    Method SkipLine

    For more information, see help context 1232061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SkipLine();

    /*
    Method Write

    For more information, see help context 1232062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Write(const QVariant& Buffer);

    /*
    Method WriteText

    For more information, see help context 1232069 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void WriteText(const QString& Data);

    /*
    Method WriteText

    For more information, see help context 1232069 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void WriteText(const QString& Data, ADODB::StreamWriteEnum Options);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class ADORecordConstruction : public QAxObject {};

// stub for vtable-only interface
class ADOStreamConstruction : public QAxObject {};

// stub for vtable-only interface
class ADOCommandConstruction : public QAxObject {};

// stub for vtable-only interface
class ADORecordsetConstruction : public QAxObject {};

class ADODB_EXPORT Field15 : public QAxObject
{
public:
    Field15(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActualSize

    For more information, see help context 1231116 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int ActualSize() const; //Returns the value of ActualSize

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes

    /*
    Property DefinedSize

    For more information, see help context 1231134 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int DefinedSize() const; //Returns the value of DefinedSize

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NumericScale

    For more information, see help context 1231154 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint NumericScale() const; //Returns the value of NumericScale

    /*
    Property OriginalValue

    For more information, see help context 1231156 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant OriginalValue() const; //Returns the value of OriginalValue

    /*
    Property Precision

    For more information, see help context 1231160 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint Precision() const; //Returns the value of Precision

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Type

    For more information, see help context 1231178 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::DataTypeEnum Type() const; //Returns the value of Type

    /*
    Property UnderlyingValue

    For more information, see help context 1231179 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant UnderlyingValue() const; //Returns the value of UnderlyingValue

    /*
    Property Value

    For more information, see help context 1231181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method AppendChunk

    For more information, see help context 1231030 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AppendChunk(const QVariant& Data);

    /*
    Method GetChunk

    For more information, see help context 1231054 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetChunk(int Length);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class ADODB_EXPORT Connection : public QAxObject
{
public:
    Connection(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{00000514-0000-0010-8000-00aa006d2ea4}");
        else
            setControl("{00000514-0000-0010-8000-00aa006d2ea4}:" + licenseKey);
    }

    Connection(_Connection *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property ConnectionString

    For more information, see help context 1231128 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ConnectionString() const; //Returns the value of ConnectionString
    inline void SetConnectionString(const QString& value); //Sets the value of the ConnectionString property

    /*
    Property ConnectionTimeout

    For more information, see help context 1231129 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int ConnectionTimeout() const; //Returns the value of ConnectionTimeout
    inline void SetConnectionTimeout(int value); //Sets the value of the ConnectionTimeout property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property DefaultDatabase

    For more information, see help context 1231133 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DefaultDatabase() const; //Returns the value of DefaultDatabase
    inline void SetDefaultDatabase(const QString& value); //Sets the value of the DefaultDatabase property

    /*
    Property Errors

    For more information, see help context 1231101 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Errors* Errors() const; //Returns the value of Errors

    /*
    Property IsolationLevel

    For more information, see help context 1231146 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::IsolationLevelEnum IsolationLevel() const; //Returns the value of IsolationLevel
    inline void SetIsolationLevel(ADODB::IsolationLevelEnum value); //Sets the value of the IsolationLevel property

    /*
    Property Mode

    For more information, see help context 1231150 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Provider

    For more information, see help context 1231162 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Provider() const; //Returns the value of Provider
    inline void SetProvider(const QString& value); //Sets the value of the Provider property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Version

    For more information, see help context 1231182 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Version() const; //Returns the value of Version

    /*
    Method BeginTrans

    For more information, see help context 1231031 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int BeginTrans();

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CommitTrans

    For more information, see help context 1000008 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CommitTrans();

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText);

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText, QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(const QString& CommandText, QVariant& RecordsAffected, int Options);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID, const QString& Password);

    /*
    Method Open

    For more information, see help context 1231062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QString& ConnectionString, const QString& UserID, const QString& Password, int Options);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions);

    /*
    Method OpenSchema

    For more information, see help context 1231064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions, const QVariant& SchemaID);

    /*
    Method RollbackTrans

    For more information, see help context 1000009 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void RollbackTrans();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Record : public QAxObject
{
public:
    Record(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{00000560-0000-0010-8000-00aa006d2ea4}");
        else
            setControl("{00000560-0000-0010-8000-00aa006d2ea4}:" + licenseKey);
    }

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QString& value); //Sets the value of the ActiveConnection property

    /*
    Property Fields

    For more information, see help context 1232009 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Mode

    For more information, see help context 1232002 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property ParentURL

    For more information, see help context 1232003 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ParentURL() const; //Returns the value of ParentURL

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordType

    For more information, see help context 1232010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::RecordTypeEnum RecordType() const; //Returns the value of RecordType

    /*
    Property Source

    For more information, see help context 1232001 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Source() const; //Returns the value of Source
    inline void SetSource(const QString& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1232000 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ObjectStateEnum State() const; //Returns the value of State

    /*
    Method Cancel

    For more information, see help context 1232012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method Close

    For more information, see help context 1232008 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord();

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options);

    /*
    Method CopyRecord

    For more information, see help context 1232005 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options, bool Async);

    /*
    Method DeleteRecord

    For more information, see help context 1232006 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void DeleteRecord();

    /*
    Method DeleteRecord

    For more information, see help context 1232006 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void DeleteRecord(const QString& Source);

    /*
    Method DeleteRecord

    For more information, see help context 1232006 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void DeleteRecord(const QString& Source, bool Async);

    /*
    Method GetChildren

    For more information, see help context 1232013 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* GetChildren();

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord();

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options);

    /*
    Method MoveRecord

    For more information, see help context 1232004 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options, bool Async);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName);

    /*
    Method Open

    For more information, see help context 1232007 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName, const QString& Password);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Stream : public QAxObject
{
public:
    Stream(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{00000566-0000-0010-8000-00aa006d2ea4}");
        else
            setControl("{00000566-0000-0010-8000-00aa006d2ea4}:" + licenseKey);
    }

    /*
    Property Charset

    For more information, see help context 1232057 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Charset() const; //Returns the value of Charset
    inline void SetCharset(const QString& value); //Sets the value of the Charset property

    /*
    Property EOS

    For more information, see help context 1232051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool EOS() const; //Returns the value of EOS

    /*
    Property LineSeparator

    For more information, see help context 1232054 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LineSeparatorEnum LineSeparator() const; //Returns the value of LineSeparator
    inline void SetLineSeparator(ADODB::LineSeparatorEnum value); //Sets the value of the LineSeparator property

    /*
    Property Mode

    For more information, see help context 1232056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ConnectModeEnum Mode() const; //Returns the value of Mode
    inline void SetMode(ADODB::ConnectModeEnum value); //Sets the value of the Mode property

    /*
    Property Position

    For more information, see help context 1232052 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Position() const; //Returns the value of Position
    inline void SetPosition(int value); //Sets the value of the Position property

    /*
    Property Size

    For more information, see help context 1232050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Size() const; //Returns the value of Size

    /*
    Property State

    For more information, see help context 1232055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ObjectStateEnum State() const; //Returns the value of State

    /*
    Property Type

    For more information, see help context 1232053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::StreamTypeEnum Type() const; //Returns the value of Type
    inline void SetType(ADODB::StreamTypeEnum value); //Sets the value of the Type property

    /*
    Method Cancel

    For more information, see help context 1232070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method Close

    For more information, see help context 1232060 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method CopyTo

    For more information, see help context 1232064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CopyTo(ADODB::_Stream* DestStream);

    /*
    Method CopyTo

    For more information, see help context 1232064 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CopyTo(ADODB::_Stream* DestStream, int CharNumber);

    /*
    Method Flush

    For more information, see help context 1232065 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Flush();

    /*
    Method LoadFromFile

    For more information, see help context 1232067 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void LoadFromFile(const QString& FileName);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName);

    /*
    Method Open

    For more information, see help context 1232059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName, const QString& Password);

    /*
    Method Read

    For more information, see help context 1232058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Read();

    /*
    Method Read

    For more information, see help context 1232058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Read(int NumBytes);

    /*
    Method ReadText

    For more information, see help context 1232068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ReadText();

    /*
    Method ReadText

    For more information, see help context 1232068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString ReadText(int NumChars);

    /*
    Method SaveToFile

    For more information, see help context 1232066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SaveToFile(const QString& FileName);

    /*
    Method SaveToFile

    For more information, see help context 1232066 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SaveToFile(const QString& FileName, ADODB::SaveOptionsEnum Options);

    /*
    Method SetEOS

    For more information, see help context 1232063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SetEOS();

    /*
    Method SkipLine

    For more information, see help context 1232061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void SkipLine();

    /*
    Method Write

    For more information, see help context 1232062 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Write(const QVariant& Buffer);

    /*
    Method WriteText

    For more information, see help context 1232069 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void WriteText(const QString& Data);

    /*
    Method WriteText

    For more information, see help context 1232069 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void WriteText(const QString& Data, ADODB::StreamWriteEnum Options);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Command : public QAxObject
{
public:
    Command(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{00000507-0000-0010-8000-00aa006d2ea4}");
        else
            setControl("{00000507-0000-0010-8000-00aa006d2ea4}:" + licenseKey);
    }

    Command(_Command *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
    Property CommandStream

    For more information, see help context 1231190 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant CommandStream() const; //Returns the value of CommandStream

    /*
    Property CommandText

    For more information, see help context 1231123 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString CommandText() const; //Returns the value of CommandText
    inline void SetCommandText(const QString& value); //Sets the value of the CommandText property

    /*
    Property CommandTimeout

    For more information, see help context 1231124 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CommandTimeout() const; //Returns the value of CommandTimeout
    inline void SetCommandTimeout(int value); //Sets the value of the CommandTimeout property

    /*
    Property CommandType

    For more information, see help context 1231125 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CommandTypeEnum CommandType() const; //Returns the value of CommandType
    inline void SetCommandType(ADODB::CommandTypeEnum value); //Sets the value of the CommandType property

    /*
    Property Dialect

    For more information, see help context 1231191 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Dialect() const; //Returns the value of Dialect
    inline void SetDialect(const QString& value); //Sets the value of the Dialect property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NamedParameters

    For more information, see help context 1231192 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool NamedParameters() const; //Returns the value of NamedParameters
    inline void SetNamedParameters(bool value); //Sets the value of the NamedParameters property

    /*
    Property Parameters

    For more information, see help context 1231103 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Parameters* Parameters() const; //Returns the value of Parameters

    /*
    Property Prepared

    For more information, see help context 1231161 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Prepared() const; //Returns the value of Prepared
    inline void SetPrepared(bool value); //Sets the value of the Prepared property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter();

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size);

    /*
    Method CreateParameter

    For more information, see help context 1231042 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Parameter* CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute();

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters);

    /*
    Method Execute

    For more information, see help context 1231051 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Recordset : public QAxObject
{
public:
    Recordset(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{00000535-0000-0010-8000-00aa006d2ea4}");
        else
            setControl("{00000535-0000-0010-8000-00aa006d2ea4}:" + licenseKey);
    }

    Recordset(_Recordset *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AbsolutePage

    For more information, see help context 1231108 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePage() const; //Returns the value of AbsolutePage
    inline void SetAbsolutePage(ADODB::PositionEnum value); //Sets the value of the AbsolutePage property

    /*
    Property AbsolutePosition

    For more information, see help context 1231109 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::PositionEnum AbsolutePosition() const; //Returns the value of AbsolutePosition
    inline void SetAbsolutePosition(ADODB::PositionEnum value); //Sets the value of the AbsolutePosition property

    /*
    Property ActiveCommand

    For more information, see help context 1235900 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IDispatch* ActiveCommand() const; //Returns the value of ActiveCommand

    /*
    Property ActiveConnection

    For more information, see help context 1231115 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant ActiveConnection() const; //Returns the value of ActiveConnection
    inline void SetActiveConnection(const QVariant& value); //Sets the value of the ActiveConnection property

    /*
	Property BOF

    For more information, see help context 1231120 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool BOF() const; //Returns the value of BOF

    /*
    Property Bookmark

    For more information, see help context 1231121 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Bookmark() const; //Returns the value of Bookmark
    inline void SetBookmark(const QVariant& value); //Sets the value of the Bookmark property

    /*
    Property CacheSize

    For more information, see help context 1231122 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int CacheSize() const; //Returns the value of CacheSize
    inline void SetCacheSize(int value); //Sets the value of the CacheSize property

    /*
    Property CursorLocation

    For more information, see help context 1231131 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorLocationEnum CursorLocation() const; //Returns the value of CursorLocation
    inline void SetCursorLocation(ADODB::CursorLocationEnum value); //Sets the value of the CursorLocation property

    /*
    Property CursorType

    For more information, see help context 1231132 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::CursorTypeEnum CursorType() const; //Returns the value of CursorType
    inline void SetCursorType(ADODB::CursorTypeEnum value); //Sets the value of the CursorType property

    /*
    Property DataMember

    For more information, see help context 1235901 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString DataMember() const; //Returns the value of DataMember
    inline void SetDataMember(const QString& value); //Sets the value of the DataMember property

    /*
    Property DataSource

    For more information, see help context 1235902 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline IUnknown* DataSource() const; //Returns the value of DataSource

    /*
	Property adoEOF

    For more information, see help context 1000016 in C:\WINDOWS\HELP\ado270.chm.
    */
	inline bool adoEOF() const; //Returns the value of adoEOF

    /*
    Property EditMode

    For more information, see help context 1231137 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::EditModeEnum EditMode() const; //Returns the value of EditMode

    /*
    Property Fields

    For more information, see help context 1231102 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Fields* Fields() const; //Returns the value of Fields

    /*
    Property Filter

    For more information, see help context 1231140 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Filter() const; //Returns the value of Filter
    inline void SetFilter(const QVariant& value); //Sets the value of the Filter property

    /*
    Property Index

    For more information, see help context 1267418 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Index() const; //Returns the value of Index
    inline void SetIndex(const QString& value); //Sets the value of the Index property

    /*
    Property LockType

    For more information, see help context 1231147 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::LockTypeEnum LockType() const; //Returns the value of LockType
    inline void SetLockType(ADODB::LockTypeEnum value); //Sets the value of the LockType property

    /*
    Property MarshalOptions

    For more information, see help context 1231148 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::MarshalOptionsEnum MarshalOptions() const; //Returns the value of MarshalOptions
    inline void SetMarshalOptions(ADODB::MarshalOptionsEnum value); //Sets the value of the MarshalOptions property

    /*
    Property MaxRecords

    For more information, see help context 1231149 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int MaxRecords() const; //Returns the value of MaxRecords
    inline void SetMaxRecords(int value); //Sets the value of the MaxRecords property

    /*
    Property PageCount

    For more information, see help context 1231157 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property PageSize

    For more information, see help context 1231158 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int PageSize() const; //Returns the value of PageSize
    inline void SetPageSize(int value); //Sets the value of the PageSize property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property RecordCount

    For more information, see help context 1231163 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int RecordCount() const; //Returns the value of RecordCount

    /*
    Property Sort

    For more information, see help context 1231169 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Sort() const; //Returns the value of Sort
    inline void SetSort(const QString& value); //Sets the value of the Sort property

    /*
    Property Source

    For more information, see help context 1231173 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Source() const; //Returns the value of Source
    inline void SetSource(const QVariant& value); //Sets the value of the Source property

    /*
    Property State

    For more information, see help context 1231176 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int State() const; //Returns the value of State

    /*
    Property Status

    For more information, see help context 1231177 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Status() const; //Returns the value of Status

    /*
    Property StayInSync

    For more information, see help context 1235920 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool StayInSync() const; //Returns the value of StayInSync
    inline void SetStayInSync(bool value); //Sets the value of the StayInSync property

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew();

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList);

    /*
    Method AddNew

    For more information, see help context 1231028 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AddNew(const QVariant& FieldList, const QVariant& Values);

    /*
    Method Cancel

    For more information, see help context 1231032 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Cancel();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch();

    /*
    Method CancelBatch

    For more information, see help context 1231034 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method CancelUpdate

    For more information, see help context 1231035 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void CancelUpdate();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone();

    /*
    Method Clone

    For more information, see help context 1231038 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* Clone(ADODB::LockTypeEnum LockType);

    /*
    Method Close

    For more information, see help context 1231039 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Close();

    /*
    Method Collect

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Collect(const QVariant& Index);

    /*
    Method CompareBookmarks

    For more information, see help context 1235876 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline CompareEnum CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2);

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete();

    /*
    Method Delete

    For more information, see help context 1231050 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Delete(ADODB::AffectEnum AffectRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection);

    /*
    Method Find

    For more information, see help context 1231053 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows();

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start);

    /*
    Method GetRows

    For more information, see help context 1231055 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant GetRows(int Rows, const QVariant& Start, const QVariant& Fields);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString();

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter);

    /*
    Method GetString

    For more information, see help context 1231056 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords);

    /*
    Method Move

    For more information, see help context 1231058 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Move(int NumRecords, const QVariant& Start);

    /*
    Method MoveFirst

    For more information, see help context 1231059 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveFirst();

    /*
    Method MoveLast

    For more information, see help context 1000010 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveLast();

    /*
    Method MoveNext

    For more information, see help context 1000011 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MoveNext();

    /*
    Method MovePrevious

    For more information, see help context 1000012 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void MovePrevious();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset();

    /*
    Method NextRecordset

    For more information, see help context 1231061 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* NextRecordset(QVariant& RecordsAffected);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open();

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType);

    /*
    Method Open

    For more information, see help context 1231063 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options);

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery();

    /*
    Method Requery

    For more information, see help context 1231068 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Requery(int Options);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync();

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords);

    /*
    Method Resync

    For more information, see help context 1231070 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues);

    /*
    Method Save

    For more information, see help context 1231071 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Save();

    /*
    Method Save

    For more information, see help context 1231071 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Save(const QVariant& Destination);

    /*
    Method Save

    For more information, see help context 1231071 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Save(const QVariant& Destination, ADODB::PersistFormatEnum PersistFormat);

    /*
    Method Seek

    For more information, see help context 1267419 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Seek(const QVariant& KeyValues);

    /*
    Method Seek

    For more information, see help context 1267419 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Seek(const QVariant& KeyValues, ADODB::SeekEnum SeekOption);

    /*
    Method SetCollect
    */
    inline QVariant SetCollect(const QVariant& Index, const QVariant& rhs);

    /*
    Method Supports

    For more information, see help context 1231073 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline bool Supports(ADODB::CursorOptionEnum CursorOptions);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update();

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields);

    /*
    Method Update

    For more information, see help context 1231074 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void Update(const QVariant& Fields, const QVariant& Values);

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch();

    /*
    Method UpdateBatch

    For more information, see help context 1231075 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void UpdateBatch(ADODB::AffectEnum AffectRecords);

    /*
    Method _xClone

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::_Recordset* _xClone();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync();

    /*
    Method _xResync

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xResync(ADODB::AffectEnum AffectRecords);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave();

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName);

    /*
    Method _xSave

    For more information, see help context 0 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void _xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ADODB_EXPORT Parameter : public QAxObject
{
public:
    Parameter(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{0000050b-0000-0010-8000-00aa006d2ea4}");
        else
            setControl("{0000050b-0000-0010-8000-00aa006d2ea4}:" + licenseKey);
    }

    Parameter(_Parameter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Attributes

    For more information, see help context 1231117 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Attributes() const; //Returns the value of Attributes
    inline void SetAttributes(int value); //Sets the value of the Attributes property

    /*
    Property Direction

    For more information, see help context 1231136 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::ParameterDirectionEnum Direction() const; //Returns the value of Direction
    inline void SetDirection(ADODB::ParameterDirectionEnum value); //Sets the value of the Direction property

    /*
    Property Name

    For more information, see help context 1231151 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NumericScale

    For more information, see help context 1231154 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint NumericScale() const; //Returns the value of NumericScale
    inline void SetNumericScale(uint value); //Sets the value of the NumericScale property

    /*
    Property Precision

    For more information, see help context 1231160 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline uint Precision() const; //Returns the value of Precision
    inline void SetPrecision(uint value); //Sets the value of the Precision property

    /*
    Property Properties

    For more information, see help context 1231104 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::Properties* Properties() const; //Returns the value of Properties

    /*
    Property Size

    For more information, see help context 1231168 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline int Size() const; //Returns the value of Size
    inline void SetSize(int value); //Sets the value of the Size property

    /*
    Property Type

    For more information, see help context 1231178 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline ADODB::DataTypeEnum Type() const; //Returns the value of Type
    inline void SetType(ADODB::DataTypeEnum value); //Sets the value of the Type property

    /*
    Property Value

    For more information, see help context 1231181 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method AppendChunk

    For more information, see help context 1231030 in C:\WINDOWS\HELP\ado270.chm.
    */
    inline void AppendChunk(const QVariant& Val);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_ADODB_NOINLINES
inline int _Collection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void _Collection::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline IUnknown* _Collection::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int _DynaCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void _DynaCollection::Append(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _DynaCollection::Delete(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _DynaCollection::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline IUnknown* _DynaCollection::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline ADODB::Properties* _ADO::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}


inline int Properties::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline ADODB::Property* Properties::Item(const QVariant& Index)
{
    ADODB::Property* qax_result = 0;
    qRegisterMetaType("Property*", &qax_result);
    qRegisterMetaType("Property", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void Properties::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline IUnknown* Properties::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int Property::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Property::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline QString Property::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline ADODB::DataTypeEnum Property::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::DataTypeEnum*)qax_result.constData();
}

inline QVariant Property::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Property::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }


inline QString Error::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Error::HelpContext() const
{
    QVariant qax_result = property("HelpContext");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Error::HelpFile() const
{
    QVariant qax_result = property("HelpFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Error::NativeError() const
{
    QVariant qax_result = property("NativeError");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Error::Number() const
{
    QVariant qax_result = property("Number");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Error::SQLState() const
{
    QVariant qax_result = property("SQLState");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Error::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline int Errors::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Errors::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline ADODB::Error* Errors::Item(const QVariant& Index)
{
    ADODB::Error* qax_result = 0;
    qRegisterMetaType("Error*", &qax_result);
    qRegisterMetaType("Error", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void Errors::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline IUnknown* Errors::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline QVariant Command15::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Command15::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline QString Command15::CommandText() const
{
    QVariant qax_result = property("CommandText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command15::SetCommandText(const QString& value){ setProperty("CommandText", QVariant(value)); }

inline int Command15::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Command15::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline ADODB::CommandTypeEnum Command15::CommandType() const
{
    QVariant qax_result = property("CommandType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CommandTypeEnum*)qax_result.constData();
}
inline void Command15::SetCommandType(ADODB::CommandTypeEnum value){ setProperty("CommandType", QVariant(value)); }

inline QString Command15::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command15::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline ADODB::Parameters* Command15::Parameters() const
{
    ADODB::Parameters* qax_pointer = 0;
    qRegisterMetaType("Parameters*", &qax_pointer);
    qRegisterMetaType("Parameters", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Parameters**)qax_result.constData();
}

inline bool Command15::Prepared() const
{
    QVariant qax_result = property("Prepared");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Command15::SetPrepared(bool value){ setProperty("Prepared", QVariant(value)); }

inline ADODB::Properties* Command15::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline ADODB::_Parameter* Command15::CreateParameter()
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command15::CreateParameter(const QString& Name)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command15::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command15::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command15::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command15::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command15::Execute()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command15::Execute(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command15::Execute(QVariant& RecordsAffected, QVariant& Parameters)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command15::Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}


inline int _Connection::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Connection::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline int _Connection::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Connection::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline QString _Connection::ConnectionString() const
{
    QVariant qax_result = property("ConnectionString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Connection::SetConnectionString(const QString& value){ setProperty("ConnectionString", QVariant(value)); }

inline int _Connection::ConnectionTimeout() const
{
    QVariant qax_result = property("ConnectionTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Connection::SetConnectionTimeout(int value){ setProperty("ConnectionTimeout", QVariant(value)); }

inline ADODB::CursorLocationEnum _Connection::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void _Connection::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline QString _Connection::DefaultDatabase() const
{
    QVariant qax_result = property("DefaultDatabase");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Connection::SetDefaultDatabase(const QString& value){ setProperty("DefaultDatabase", QVariant(value)); }

inline ADODB::Errors* _Connection::Errors() const
{
    ADODB::Errors* qax_pointer = 0;
    qRegisterMetaType("Errors*", &qax_pointer);
    qRegisterMetaType("Errors", qax_pointer);
    QVariant qax_result = property("Errors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Errors**)qax_result.constData();
}

inline ADODB::IsolationLevelEnum _Connection::IsolationLevel() const
{
    QVariant qax_result = property("IsolationLevel");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::IsolationLevelEnum*)qax_result.constData();
}
inline void _Connection::SetIsolationLevel(ADODB::IsolationLevelEnum value){ setProperty("IsolationLevel", QVariant(value)); }

inline ADODB::ConnectModeEnum _Connection::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void _Connection::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline ADODB::Properties* _Connection::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline QString _Connection::Provider() const
{
    QVariant qax_result = property("Provider");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Connection::SetProvider(const QString& value){ setProperty("Provider", QVariant(value)); }

inline int _Connection::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString _Connection::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int _Connection::BeginTrans()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void _Connection::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _Connection::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void _Connection::CommitTrans()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline ADODB::_Recordset* _Connection::Execute(const QString& CommandText)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Connection::Execute(const QString& CommandText, QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Connection::Execute(const QString& CommandText, QVariant& RecordsAffected, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText, (void*)&RecordsAffected, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void _Connection::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void _Connection::Open(const QString& ConnectionString)
{
    void *_a[] = {0, (void*)&ConnectionString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void _Connection::Open(const QString& ConnectionString, const QString& UserID)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void _Connection::Open(const QString& ConnectionString, const QString& UserID, const QString& Password)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void _Connection::Open(const QString& ConnectionString, const QString& UserID, const QString& Password, int Options)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline ADODB::_Recordset* _Connection::OpenSchema(ADODB::SchemaEnum Schema)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Connection::OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema, (void*)&Restrictions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Connection::OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions, const QVariant& SchemaID)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema, (void*)&Restrictions, (void*)&SchemaID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void _Connection::RollbackTrans()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline int Connection15::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Connection15::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline int Connection15::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Connection15::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline QString Connection15::ConnectionString() const
{
    QVariant qax_result = property("ConnectionString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Connection15::SetConnectionString(const QString& value){ setProperty("ConnectionString", QVariant(value)); }

inline int Connection15::ConnectionTimeout() const
{
    QVariant qax_result = property("ConnectionTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Connection15::SetConnectionTimeout(int value){ setProperty("ConnectionTimeout", QVariant(value)); }

inline ADODB::CursorLocationEnum Connection15::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void Connection15::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline QString Connection15::DefaultDatabase() const
{
    QVariant qax_result = property("DefaultDatabase");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Connection15::SetDefaultDatabase(const QString& value){ setProperty("DefaultDatabase", QVariant(value)); }

inline ADODB::Errors* Connection15::Errors() const
{
    ADODB::Errors* qax_pointer = 0;
    qRegisterMetaType("Errors*", &qax_pointer);
    qRegisterMetaType("Errors", qax_pointer);
    QVariant qax_result = property("Errors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Errors**)qax_result.constData();
}

inline ADODB::IsolationLevelEnum Connection15::IsolationLevel() const
{
    QVariant qax_result = property("IsolationLevel");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::IsolationLevelEnum*)qax_result.constData();
}
inline void Connection15::SetIsolationLevel(ADODB::IsolationLevelEnum value){ setProperty("IsolationLevel", QVariant(value)); }

inline ADODB::ConnectModeEnum Connection15::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void Connection15::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline ADODB::Properties* Connection15::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline QString Connection15::Provider() const
{
    QVariant qax_result = property("Provider");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Connection15::SetProvider(const QString& value){ setProperty("Provider", QVariant(value)); }

inline int Connection15::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Connection15::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Connection15::BeginTrans()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void Connection15::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Connection15::CommitTrans()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline ADODB::_Recordset* Connection15::Execute(const QString& CommandText)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection15::Execute(const QString& CommandText, QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection15::Execute(const QString& CommandText, QVariant& RecordsAffected, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText, (void*)&RecordsAffected, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void Connection15::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Connection15::Open(const QString& ConnectionString)
{
    void *_a[] = {0, (void*)&ConnectionString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Connection15::Open(const QString& ConnectionString, const QString& UserID)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Connection15::Open(const QString& ConnectionString, const QString& UserID, const QString& Password)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Connection15::Open(const QString& ConnectionString, const QString& UserID, const QString& Password, int Options)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline ADODB::_Recordset* Connection15::OpenSchema(ADODB::SchemaEnum Schema)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection15::OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema, (void*)&Restrictions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection15::OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions, const QVariant& SchemaID)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema, (void*)&Restrictions, (void*)&SchemaID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void Connection15::RollbackTrans()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline ADODB::PositionEnum _Recordset::AbsolutePage() const
{
    QVariant qax_result = property("AbsolutePage");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void _Recordset::SetAbsolutePage(ADODB::PositionEnum value){ setProperty("AbsolutePage", QVariant(value)); }

inline ADODB::PositionEnum _Recordset::AbsolutePosition() const
{
    QVariant qax_result = property("AbsolutePosition");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void _Recordset::SetAbsolutePosition(ADODB::PositionEnum value){ setProperty("AbsolutePosition", QVariant(value)); }

inline IDispatch* _Recordset::ActiveCommand() const
{
    QVariant qax_result = property("ActiveCommand");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QVariant _Recordset::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _Recordset::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline bool _Recordset::BOF() const
{
	QVariant qax_result = property("BOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QVariant _Recordset::Bookmark() const
{
    QVariant qax_result = property("Bookmark");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _Recordset::SetBookmark(const QVariant& value){ setProperty("Bookmark", QVariant(value)); }

inline int _Recordset::CacheSize() const
{
    QVariant qax_result = property("CacheSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Recordset::SetCacheSize(int value){ setProperty("CacheSize", QVariant(value)); }

inline ADODB::CursorLocationEnum _Recordset::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void _Recordset::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline ADODB::CursorTypeEnum _Recordset::CursorType() const
{
    QVariant qax_result = property("CursorType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorTypeEnum*)qax_result.constData();
}
inline void _Recordset::SetCursorType(ADODB::CursorTypeEnum value){ setProperty("CursorType", QVariant(value)); }

inline QString _Recordset::DataMember() const
{
    QVariant qax_result = property("DataMember");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Recordset::SetDataMember(const QString& value){ setProperty("DataMember", QVariant(value)); }

inline IUnknown* _Recordset::DataSource() const
{
    QVariant qax_result = property("DataSource");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool _Recordset::adoEOF() const
{
	QVariant qax_result = property("adoEOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::EditModeEnum _Recordset::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::EditModeEnum*)qax_result.constData();
}

inline ADODB::Fields* _Recordset::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline QVariant _Recordset::Filter() const
{
    QVariant qax_result = property("Filter");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _Recordset::SetFilter(const QVariant& value){ setProperty("Filter", QVariant(value)); }

inline QString _Recordset::Index() const
{
    QVariant qax_result = property("Index");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Recordset::SetIndex(const QString& value){ setProperty("Index", QVariant(value)); }

inline ADODB::LockTypeEnum _Recordset::LockType() const
{
    QVariant qax_result = property("LockType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LockTypeEnum*)qax_result.constData();
}
inline void _Recordset::SetLockType(ADODB::LockTypeEnum value){ setProperty("LockType", QVariant(value)); }

inline ADODB::MarshalOptionsEnum _Recordset::MarshalOptions() const
{
    QVariant qax_result = property("MarshalOptions");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::MarshalOptionsEnum*)qax_result.constData();
}
inline void _Recordset::SetMarshalOptions(ADODB::MarshalOptionsEnum value){ setProperty("MarshalOptions", QVariant(value)); }

inline int _Recordset::MaxRecords() const
{
    QVariant qax_result = property("MaxRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Recordset::SetMaxRecords(int value){ setProperty("MaxRecords", QVariant(value)); }

inline int _Recordset::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int _Recordset::PageSize() const
{
    QVariant qax_result = property("PageSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Recordset::SetPageSize(int value){ setProperty("PageSize", QVariant(value)); }

inline ADODB::Properties* _Recordset::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int _Recordset::RecordCount() const
{
    QVariant qax_result = property("RecordCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString _Recordset::Sort() const
{
    QVariant qax_result = property("Sort");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Recordset::SetSort(const QString& value){ setProperty("Sort", QVariant(value)); }

inline QVariant _Recordset::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _Recordset::SetSource(const QVariant& value){ setProperty("Source", QVariant(value)); }

inline int _Recordset::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int _Recordset::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool _Recordset::StayInSync() const
{
    QVariant qax_result = property("StayInSync");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _Recordset::SetStayInSync(bool value){ setProperty("StayInSync", QVariant(value)); }

inline void _Recordset::AddNew()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _Recordset::AddNew(const QVariant& FieldList)
{
    void *_a[] = {0, (void*)&FieldList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _Recordset::AddNew(const QVariant& FieldList, const QVariant& Values)
{
    void *_a[] = {0, (void*)&FieldList, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void _Recordset::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void _Recordset::CancelBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void _Recordset::CancelBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void _Recordset::CancelUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline ADODB::_Recordset* _Recordset::Clone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Recordset::Clone(ADODB::LockTypeEnum LockType)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void _Recordset::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QVariant _Recordset::Collect(const QVariant& Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline CompareEnum _Recordset::CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2)
{
    CompareEnum qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Bookmark1, (void*)&Bookmark2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void _Recordset::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void _Recordset::Delete(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void _Recordset::Find(const QString& Criteria)
{
    void *_a[] = {0, (void*)&Criteria};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void _Recordset::Find(const QString& Criteria, int SkipRecords)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void _Recordset::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void _Recordset::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline QVariant _Recordset::GetRows()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QVariant _Recordset::GetRows(int Rows)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QVariant _Recordset::GetRows(int Rows, const QVariant& Start)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline QVariant _Recordset::GetRows(int Rows, const QVariant& Start, const QVariant& Fields)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString _Recordset::GetString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline QString _Recordset::GetString(ADODB::StringFormatEnum StringFormat)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline QString _Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline QString _Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString _Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline QString _Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter, (void*)&NullExpr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline void _Recordset::Move(int NumRecords)
{
    void *_a[] = {0, (void*)&NumRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void _Recordset::Move(int NumRecords, const QVariant& Start)
{
    void *_a[] = {0, (void*)&NumRecords, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void _Recordset::MoveFirst()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void _Recordset::MoveLast()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void _Recordset::MoveNext()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void _Recordset::MovePrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline ADODB::_Recordset* _Recordset::NextRecordset()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Recordset::NextRecordset(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void _Recordset::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void _Recordset::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void _Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void _Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void _Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void _Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void _Recordset::Requery()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void _Recordset::Requery(int Options)
{
    void *_a[] = {0, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void _Recordset::Resync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void _Recordset::Resync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void _Recordset::Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues)
{
    void *_a[] = {0, (void*)&AffectRecords, (void*)&ResyncValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void _Recordset::Save()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void _Recordset::Save(const QVariant& Destination)
{
    void *_a[] = {0, (void*)&Destination};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void _Recordset::Save(const QVariant& Destination, ADODB::PersistFormatEnum PersistFormat)
{
    void *_a[] = {0, (void*)&Destination, (void*)&PersistFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void _Recordset::Seek(const QVariant& KeyValues)
{
    void *_a[] = {0, (void*)&KeyValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void _Recordset::Seek(const QVariant& KeyValues, ADODB::SeekEnum SeekOption)
{
    void *_a[] = {0, (void*)&KeyValues, (void*)&SeekOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline QVariant _Recordset::SetCollect(const QVariant& Index, const QVariant& rhs)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool _Recordset::Supports(ADODB::CursorOptionEnum CursorOptions)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CursorOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline void _Recordset::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void _Recordset::Update(const QVariant& Fields)
{
    void *_a[] = {0, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void _Recordset::Update(const QVariant& Fields, const QVariant& Values)
{
    void *_a[] = {0, (void*)&Fields, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void _Recordset::UpdateBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void _Recordset::UpdateBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline ADODB::_Recordset* _Recordset::_xClone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline void _Recordset::_xResync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void _Recordset::_xResync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void _Recordset::_xSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void _Recordset::_xSave(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void _Recordset::_xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&PersistFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}


inline ADODB::PositionEnum Recordset21::AbsolutePage() const
{
    QVariant qax_result = property("AbsolutePage");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset21::SetAbsolutePage(ADODB::PositionEnum value){ setProperty("AbsolutePage", QVariant(value)); }

inline ADODB::PositionEnum Recordset21::AbsolutePosition() const
{
    QVariant qax_result = property("AbsolutePosition");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset21::SetAbsolutePosition(ADODB::PositionEnum value){ setProperty("AbsolutePosition", QVariant(value)); }

inline IDispatch* Recordset21::ActiveCommand() const
{
    QVariant qax_result = property("ActiveCommand");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QVariant Recordset21::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset21::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline bool Recordset21::BOF() const
{
	QVariant qax_result = property("BOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QVariant Recordset21::Bookmark() const
{
    QVariant qax_result = property("Bookmark");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset21::SetBookmark(const QVariant& value){ setProperty("Bookmark", QVariant(value)); }

inline int Recordset21::CacheSize() const
{
    QVariant qax_result = property("CacheSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset21::SetCacheSize(int value){ setProperty("CacheSize", QVariant(value)); }

inline ADODB::CursorLocationEnum Recordset21::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void Recordset21::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline ADODB::CursorTypeEnum Recordset21::CursorType() const
{
    QVariant qax_result = property("CursorType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorTypeEnum*)qax_result.constData();
}
inline void Recordset21::SetCursorType(ADODB::CursorTypeEnum value){ setProperty("CursorType", QVariant(value)); }

inline QString Recordset21::DataMember() const
{
    QVariant qax_result = property("DataMember");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset21::SetDataMember(const QString& value){ setProperty("DataMember", QVariant(value)); }

inline IUnknown* Recordset21::DataSource() const
{
    QVariant qax_result = property("DataSource");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool Recordset21::adoEOF() const
{
	QVariant qax_result = property("adoEOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::EditModeEnum Recordset21::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::EditModeEnum*)qax_result.constData();
}

inline ADODB::Fields* Recordset21::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline QVariant Recordset21::Filter() const
{
    QVariant qax_result = property("Filter");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset21::SetFilter(const QVariant& value){ setProperty("Filter", QVariant(value)); }

inline QString Recordset21::Index() const
{
    QVariant qax_result = property("Index");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset21::SetIndex(const QString& value){ setProperty("Index", QVariant(value)); }

inline ADODB::LockTypeEnum Recordset21::LockType() const
{
    QVariant qax_result = property("LockType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LockTypeEnum*)qax_result.constData();
}
inline void Recordset21::SetLockType(ADODB::LockTypeEnum value){ setProperty("LockType", QVariant(value)); }

inline ADODB::MarshalOptionsEnum Recordset21::MarshalOptions() const
{
    QVariant qax_result = property("MarshalOptions");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::MarshalOptionsEnum*)qax_result.constData();
}
inline void Recordset21::SetMarshalOptions(ADODB::MarshalOptionsEnum value){ setProperty("MarshalOptions", QVariant(value)); }

inline int Recordset21::MaxRecords() const
{
    QVariant qax_result = property("MaxRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset21::SetMaxRecords(int value){ setProperty("MaxRecords", QVariant(value)); }

inline int Recordset21::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset21::PageSize() const
{
    QVariant qax_result = property("PageSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset21::SetPageSize(int value){ setProperty("PageSize", QVariant(value)); }

inline ADODB::Properties* Recordset21::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Recordset21::RecordCount() const
{
    QVariant qax_result = property("RecordCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Recordset21::Sort() const
{
    QVariant qax_result = property("Sort");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset21::SetSort(const QString& value){ setProperty("Sort", QVariant(value)); }

inline QVariant Recordset21::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset21::SetSource(const QVariant& value){ setProperty("Source", QVariant(value)); }

inline int Recordset21::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset21::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool Recordset21::StayInSync() const
{
    QVariant qax_result = property("StayInSync");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Recordset21::SetStayInSync(bool value){ setProperty("StayInSync", QVariant(value)); }

inline void Recordset21::AddNew()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Recordset21::AddNew(const QVariant& FieldList)
{
    void *_a[] = {0, (void*)&FieldList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Recordset21::AddNew(const QVariant& FieldList, const QVariant& Values)
{
    void *_a[] = {0, (void*)&FieldList, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Recordset21::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Recordset21::CancelBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Recordset21::CancelBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Recordset21::CancelUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline ADODB::_Recordset* Recordset21::Clone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset21::Clone(ADODB::LockTypeEnum LockType)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void Recordset21::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QVariant Recordset21::Collect(const QVariant& Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline CompareEnum Recordset21::CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2)
{
    CompareEnum qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Bookmark1, (void*)&Bookmark2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void Recordset21::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Recordset21::Delete(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void Recordset21::Find(const QString& Criteria)
{
    void *_a[] = {0, (void*)&Criteria};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void Recordset21::Find(const QString& Criteria, int SkipRecords)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Recordset21::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Recordset21::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline QVariant Recordset21::GetRows()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QVariant Recordset21::GetRows(int Rows)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QVariant Recordset21::GetRows(int Rows, const QVariant& Start)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline QVariant Recordset21::GetRows(int Rows, const QVariant& Start, const QVariant& Fields)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString Recordset21::GetString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline QString Recordset21::GetString(ADODB::StringFormatEnum StringFormat)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline QString Recordset21::GetString(ADODB::StringFormatEnum StringFormat, int NumRows)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline QString Recordset21::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString Recordset21::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline QString Recordset21::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter, (void*)&NullExpr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline void Recordset21::Move(int NumRecords)
{
    void *_a[] = {0, (void*)&NumRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void Recordset21::Move(int NumRecords, const QVariant& Start)
{
    void *_a[] = {0, (void*)&NumRecords, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void Recordset21::MoveFirst()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void Recordset21::MoveLast()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void Recordset21::MoveNext()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void Recordset21::MovePrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline ADODB::_Recordset* Recordset21::NextRecordset()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset21::NextRecordset(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void Recordset21::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void Recordset21::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void Recordset21::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void Recordset21::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void Recordset21::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void Recordset21::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void Recordset21::Requery()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void Recordset21::Requery(int Options)
{
    void *_a[] = {0, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void Recordset21::Resync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void Recordset21::Resync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void Recordset21::Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues)
{
    void *_a[] = {0, (void*)&AffectRecords, (void*)&ResyncValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void Recordset21::Seek(const QVariant& KeyValues)
{
    void *_a[] = {0, (void*)&KeyValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void Recordset21::Seek(const QVariant& KeyValues, ADODB::SeekEnum SeekOption)
{
    void *_a[] = {0, (void*)&KeyValues, (void*)&SeekOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline QVariant Recordset21::SetCollect(const QVariant& Index, const QVariant& rhs)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline bool Recordset21::Supports(ADODB::CursorOptionEnum CursorOptions)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CursorOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline void Recordset21::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void Recordset21::Update(const QVariant& Fields)
{
    void *_a[] = {0, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void Recordset21::Update(const QVariant& Fields, const QVariant& Values)
{
    void *_a[] = {0, (void*)&Fields, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void Recordset21::UpdateBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void Recordset21::UpdateBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline ADODB::_Recordset* Recordset21::_xClone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void Recordset21::_xResync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void Recordset21::_xResync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void Recordset21::_xSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void Recordset21::_xSave(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void Recordset21::_xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&PersistFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}


inline ADODB::PositionEnum Recordset20::AbsolutePage() const
{
    QVariant qax_result = property("AbsolutePage");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset20::SetAbsolutePage(ADODB::PositionEnum value){ setProperty("AbsolutePage", QVariant(value)); }

inline ADODB::PositionEnum Recordset20::AbsolutePosition() const
{
    QVariant qax_result = property("AbsolutePosition");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset20::SetAbsolutePosition(ADODB::PositionEnum value){ setProperty("AbsolutePosition", QVariant(value)); }

inline IDispatch* Recordset20::ActiveCommand() const
{
    QVariant qax_result = property("ActiveCommand");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QVariant Recordset20::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset20::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline bool Recordset20::BOF() const
{
	QVariant qax_result = property("BOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QVariant Recordset20::Bookmark() const
{
    QVariant qax_result = property("Bookmark");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset20::SetBookmark(const QVariant& value){ setProperty("Bookmark", QVariant(value)); }

inline int Recordset20::CacheSize() const
{
    QVariant qax_result = property("CacheSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset20::SetCacheSize(int value){ setProperty("CacheSize", QVariant(value)); }

inline ADODB::CursorLocationEnum Recordset20::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void Recordset20::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline ADODB::CursorTypeEnum Recordset20::CursorType() const
{
    QVariant qax_result = property("CursorType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorTypeEnum*)qax_result.constData();
}
inline void Recordset20::SetCursorType(ADODB::CursorTypeEnum value){ setProperty("CursorType", QVariant(value)); }

inline QString Recordset20::DataMember() const
{
    QVariant qax_result = property("DataMember");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset20::SetDataMember(const QString& value){ setProperty("DataMember", QVariant(value)); }

inline IUnknown* Recordset20::DataSource() const
{
    QVariant qax_result = property("DataSource");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool Recordset20::adoEOF() const
{
	QVariant qax_result = property("adoEOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::EditModeEnum Recordset20::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::EditModeEnum*)qax_result.constData();
}

inline ADODB::Fields* Recordset20::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline QVariant Recordset20::Filter() const
{
    QVariant qax_result = property("Filter");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset20::SetFilter(const QVariant& value){ setProperty("Filter", QVariant(value)); }

inline ADODB::LockTypeEnum Recordset20::LockType() const
{
    QVariant qax_result = property("LockType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LockTypeEnum*)qax_result.constData();
}
inline void Recordset20::SetLockType(ADODB::LockTypeEnum value){ setProperty("LockType", QVariant(value)); }

inline ADODB::MarshalOptionsEnum Recordset20::MarshalOptions() const
{
    QVariant qax_result = property("MarshalOptions");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::MarshalOptionsEnum*)qax_result.constData();
}
inline void Recordset20::SetMarshalOptions(ADODB::MarshalOptionsEnum value){ setProperty("MarshalOptions", QVariant(value)); }

inline int Recordset20::MaxRecords() const
{
    QVariant qax_result = property("MaxRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset20::SetMaxRecords(int value){ setProperty("MaxRecords", QVariant(value)); }

inline int Recordset20::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset20::PageSize() const
{
    QVariant qax_result = property("PageSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset20::SetPageSize(int value){ setProperty("PageSize", QVariant(value)); }

inline ADODB::Properties* Recordset20::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Recordset20::RecordCount() const
{
    QVariant qax_result = property("RecordCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Recordset20::Sort() const
{
    QVariant qax_result = property("Sort");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset20::SetSort(const QString& value){ setProperty("Sort", QVariant(value)); }

inline QVariant Recordset20::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset20::SetSource(const QVariant& value){ setProperty("Source", QVariant(value)); }

inline int Recordset20::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset20::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool Recordset20::StayInSync() const
{
    QVariant qax_result = property("StayInSync");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Recordset20::SetStayInSync(bool value){ setProperty("StayInSync", QVariant(value)); }

inline void Recordset20::AddNew()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Recordset20::AddNew(const QVariant& FieldList)
{
    void *_a[] = {0, (void*)&FieldList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Recordset20::AddNew(const QVariant& FieldList, const QVariant& Values)
{
    void *_a[] = {0, (void*)&FieldList, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Recordset20::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Recordset20::CancelBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Recordset20::CancelBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Recordset20::CancelUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline ADODB::_Recordset* Recordset20::Clone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset20::Clone(ADODB::LockTypeEnum LockType)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void Recordset20::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QVariant Recordset20::Collect(const QVariant& Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline CompareEnum Recordset20::CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2)
{
    CompareEnum qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Bookmark1, (void*)&Bookmark2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void Recordset20::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Recordset20::Delete(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void Recordset20::Find(const QString& Criteria)
{
    void *_a[] = {0, (void*)&Criteria};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void Recordset20::Find(const QString& Criteria, int SkipRecords)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Recordset20::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Recordset20::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline QVariant Recordset20::GetRows()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QVariant Recordset20::GetRows(int Rows)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QVariant Recordset20::GetRows(int Rows, const QVariant& Start)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline QVariant Recordset20::GetRows(int Rows, const QVariant& Start, const QVariant& Fields)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString Recordset20::GetString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline QString Recordset20::GetString(ADODB::StringFormatEnum StringFormat)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline QString Recordset20::GetString(ADODB::StringFormatEnum StringFormat, int NumRows)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline QString Recordset20::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString Recordset20::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline QString Recordset20::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter, (void*)&NullExpr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline void Recordset20::Move(int NumRecords)
{
    void *_a[] = {0, (void*)&NumRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void Recordset20::Move(int NumRecords, const QVariant& Start)
{
    void *_a[] = {0, (void*)&NumRecords, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void Recordset20::MoveFirst()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void Recordset20::MoveLast()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void Recordset20::MoveNext()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void Recordset20::MovePrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline ADODB::_Recordset* Recordset20::NextRecordset()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset20::NextRecordset(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void Recordset20::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void Recordset20::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void Recordset20::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void Recordset20::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void Recordset20::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void Recordset20::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void Recordset20::Requery()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void Recordset20::Requery(int Options)
{
    void *_a[] = {0, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void Recordset20::Resync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void Recordset20::Resync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void Recordset20::Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues)
{
    void *_a[] = {0, (void*)&AffectRecords, (void*)&ResyncValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline QVariant Recordset20::SetCollect(const QVariant& Index, const QVariant& rhs)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool Recordset20::Supports(ADODB::CursorOptionEnum CursorOptions)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CursorOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void Recordset20::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void Recordset20::Update(const QVariant& Fields)
{
    void *_a[] = {0, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void Recordset20::Update(const QVariant& Fields, const QVariant& Values)
{
    void *_a[] = {0, (void*)&Fields, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void Recordset20::UpdateBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void Recordset20::UpdateBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline ADODB::_Recordset* Recordset20::_xClone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline void Recordset20::_xResync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void Recordset20::_xResync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void Recordset20::_xSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void Recordset20::_xSave(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void Recordset20::_xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&PersistFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}


inline ADODB::PositionEnum Recordset15::AbsolutePage() const
{
    QVariant qax_result = property("AbsolutePage");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset15::SetAbsolutePage(ADODB::PositionEnum value){ setProperty("AbsolutePage", QVariant(value)); }

inline ADODB::PositionEnum Recordset15::AbsolutePosition() const
{
    QVariant qax_result = property("AbsolutePosition");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset15::SetAbsolutePosition(ADODB::PositionEnum value){ setProperty("AbsolutePosition", QVariant(value)); }

inline QVariant Recordset15::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset15::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline bool Recordset15::BOF() const
{
	QVariant qax_result = property("BOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QVariant Recordset15::Bookmark() const
{
    QVariant qax_result = property("Bookmark");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset15::SetBookmark(const QVariant& value){ setProperty("Bookmark", QVariant(value)); }

inline int Recordset15::CacheSize() const
{
    QVariant qax_result = property("CacheSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset15::SetCacheSize(int value){ setProperty("CacheSize", QVariant(value)); }

inline ADODB::CursorLocationEnum Recordset15::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void Recordset15::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline ADODB::CursorTypeEnum Recordset15::CursorType() const
{
    QVariant qax_result = property("CursorType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorTypeEnum*)qax_result.constData();
}
inline void Recordset15::SetCursorType(ADODB::CursorTypeEnum value){ setProperty("CursorType", QVariant(value)); }

inline bool Recordset15::adoEOF() const
{
	QVariant qax_result = property("adoEOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::EditModeEnum Recordset15::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::EditModeEnum*)qax_result.constData();
}

inline ADODB::Fields* Recordset15::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline QVariant Recordset15::Filter() const
{
    QVariant qax_result = property("Filter");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset15::SetFilter(const QVariant& value){ setProperty("Filter", QVariant(value)); }

inline ADODB::LockTypeEnum Recordset15::LockType() const
{
    QVariant qax_result = property("LockType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LockTypeEnum*)qax_result.constData();
}
inline void Recordset15::SetLockType(ADODB::LockTypeEnum value){ setProperty("LockType", QVariant(value)); }

inline ADODB::MarshalOptionsEnum Recordset15::MarshalOptions() const
{
    QVariant qax_result = property("MarshalOptions");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::MarshalOptionsEnum*)qax_result.constData();
}
inline void Recordset15::SetMarshalOptions(ADODB::MarshalOptionsEnum value){ setProperty("MarshalOptions", QVariant(value)); }

inline int Recordset15::MaxRecords() const
{
    QVariant qax_result = property("MaxRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset15::SetMaxRecords(int value){ setProperty("MaxRecords", QVariant(value)); }

inline int Recordset15::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset15::PageSize() const
{
    QVariant qax_result = property("PageSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset15::SetPageSize(int value){ setProperty("PageSize", QVariant(value)); }

inline ADODB::Properties* Recordset15::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Recordset15::RecordCount() const
{
    QVariant qax_result = property("RecordCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Recordset15::Sort() const
{
    QVariant qax_result = property("Sort");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset15::SetSort(const QString& value){ setProperty("Sort", QVariant(value)); }

inline QVariant Recordset15::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset15::SetSource(const QVariant& value){ setProperty("Source", QVariant(value)); }

inline int Recordset15::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset15::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Recordset15::AddNew()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Recordset15::AddNew(const QVariant& FieldList)
{
    void *_a[] = {0, (void*)&FieldList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Recordset15::AddNew(const QVariant& FieldList, const QVariant& Values)
{
    void *_a[] = {0, (void*)&FieldList, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Recordset15::CancelBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Recordset15::CancelBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Recordset15::CancelUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Recordset15::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline QVariant Recordset15::Collect(const QVariant& Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void Recordset15::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Recordset15::Delete(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Recordset15::Find(const QString& Criteria)
{
    void *_a[] = {0, (void*)&Criteria};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Recordset15::Find(const QString& Criteria, int SkipRecords)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void Recordset15::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Recordset15::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline QVariant Recordset15::GetRows()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QVariant Recordset15::GetRows(int Rows)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QVariant Recordset15::GetRows(int Rows, const QVariant& Start)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline QVariant Recordset15::GetRows(int Rows, const QVariant& Start, const QVariant& Fields)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void Recordset15::Move(int NumRecords)
{
    void *_a[] = {0, (void*)&NumRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Recordset15::Move(int NumRecords, const QVariant& Start)
{
    void *_a[] = {0, (void*)&NumRecords, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Recordset15::MoveFirst()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void Recordset15::MoveLast()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void Recordset15::MoveNext()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void Recordset15::MovePrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline ADODB::_Recordset* Recordset15::NextRecordset()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset15::NextRecordset(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline void Recordset15::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void Recordset15::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void Recordset15::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void Recordset15::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void Recordset15::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void Recordset15::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void Recordset15::Requery()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void Recordset15::Requery(int Options)
{
    void *_a[] = {0, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline QVariant Recordset15::SetCollect(const QVariant& Index, const QVariant& rhs)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool Recordset15::Supports(ADODB::CursorOptionEnum CursorOptions)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CursorOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void Recordset15::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void Recordset15::Update(const QVariant& Fields)
{
    void *_a[] = {0, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void Recordset15::Update(const QVariant& Fields, const QVariant& Values)
{
    void *_a[] = {0, (void*)&Fields, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void Recordset15::UpdateBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void Recordset15::UpdateBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline ADODB::_Recordset* Recordset15::_xClone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void Recordset15::_xResync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void Recordset15::_xResync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}


inline int Fields::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Fields::Append(const QString& Name, ADODB::DataTypeEnum Type)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Fields::Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Fields::Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize, (void*)&Attrib};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Fields::Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib, const QVariant& FieldValue)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize, (void*)&Attrib, (void*)&FieldValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Fields::CancelUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Fields::Delete(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline ADODB::Field* Fields::Item(const QVariant& Index)
{
    ADODB::Field* qax_result = 0;
    qRegisterMetaType("Field*", &qax_result);
    qRegisterMetaType("Field", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void Fields::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Fields::Resync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Fields::Resync(ADODB::ResyncEnum ResyncValues)
{
    void *_a[] = {0, (void*)&ResyncValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Fields::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Fields::_Append(const QString& Name, ADODB::DataTypeEnum Type)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void Fields::_Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Fields::_Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize, (void*)&Attrib};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline IUnknown* Fields::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline int Fields20::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Fields20::Delete(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline ADODB::Field* Fields20::Item(const QVariant& Index)
{
    ADODB::Field* qax_result = 0;
    qRegisterMetaType("Field*", &qax_result);
    qRegisterMetaType("Field", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void Fields20::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Fields20::_Append(const QString& Name, ADODB::DataTypeEnum Type)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Fields20::_Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Fields20::_Append(const QString& Name, ADODB::DataTypeEnum Type, int DefinedSize, ADODB::FieldAttributeEnum Attrib)
{
    void *_a[] = {0, (void*)&Name, (void*)&Type, (void*)&DefinedSize, (void*)&Attrib};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline IUnknown* Fields20::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline int Fields15::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline ADODB::Field* Fields15::Item(const QVariant& Index)
{
    ADODB::Field* qax_result = 0;
    qRegisterMetaType("Field*", &qax_result);
    qRegisterMetaType("Field", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void Fields15::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline IUnknown* Fields15::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int Field::ActualSize() const
{
    QVariant qax_result = property("ActualSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Field::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Field::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline IUnknown* Field::DataFormat() const
{
    QVariant qax_result = property("DataFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int Field::DefinedSize() const
{
    QVariant qax_result = property("DefinedSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Field::SetDefinedSize(int value){ setProperty("DefinedSize", QVariant(value)); }

inline QString Field::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline uint Field::NumericScale() const
{
    QVariant qax_result = property("NumericScale");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void Field::SetNumericScale(uint value){ setProperty("NumericScale", QVariant(value)); }

inline QVariant Field::OriginalValue() const
{
    QVariant qax_result = property("OriginalValue");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline uint Field::Precision() const
{
    QVariant qax_result = property("Precision");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void Field::SetPrecision(uint value){ setProperty("Precision", QVariant(value)); }

inline ADODB::Properties* Field::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Field::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline ADODB::DataTypeEnum Field::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::DataTypeEnum*)qax_result.constData();
}
inline void Field::SetType(ADODB::DataTypeEnum value){ setProperty("Type", QVariant(value)); }

inline QVariant Field::UnderlyingValue() const
{
    QVariant qax_result = property("UnderlyingValue");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QVariant Field::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Field::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void Field::AppendChunk(const QVariant& Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline QVariant Field::GetChunk(int Length)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int Field20::ActualSize() const
{
    QVariant qax_result = property("ActualSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Field20::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Field20::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline IUnknown* Field20::DataFormat() const
{
    QVariant qax_result = property("DataFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int Field20::DefinedSize() const
{
    QVariant qax_result = property("DefinedSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Field20::SetDefinedSize(int value){ setProperty("DefinedSize", QVariant(value)); }

inline QString Field20::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline uint Field20::NumericScale() const
{
    QVariant qax_result = property("NumericScale");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void Field20::SetNumericScale(uint value){ setProperty("NumericScale", QVariant(value)); }

inline QVariant Field20::OriginalValue() const
{
    QVariant qax_result = property("OriginalValue");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline uint Field20::Precision() const
{
    QVariant qax_result = property("Precision");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void Field20::SetPrecision(uint value){ setProperty("Precision", QVariant(value)); }

inline ADODB::Properties* Field20::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline ADODB::DataTypeEnum Field20::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::DataTypeEnum*)qax_result.constData();
}
inline void Field20::SetType(ADODB::DataTypeEnum value){ setProperty("Type", QVariant(value)); }

inline QVariant Field20::UnderlyingValue() const
{
    QVariant qax_result = property("UnderlyingValue");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QVariant Field20::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Field20::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void Field20::AppendChunk(const QVariant& Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline QVariant Field20::GetChunk(int Length)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int _Parameter::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Parameter::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline ADODB::ParameterDirectionEnum _Parameter::Direction() const
{
    QVariant qax_result = property("Direction");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ParameterDirectionEnum*)qax_result.constData();
}
inline void _Parameter::SetDirection(ADODB::ParameterDirectionEnum value){ setProperty("Direction", QVariant(value)); }

inline QString _Parameter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Parameter::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline uint _Parameter::NumericScale() const
{
    QVariant qax_result = property("NumericScale");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void _Parameter::SetNumericScale(uint value){ setProperty("NumericScale", QVariant(value)); }

inline uint _Parameter::Precision() const
{
    QVariant qax_result = property("Precision");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void _Parameter::SetPrecision(uint value){ setProperty("Precision", QVariant(value)); }

inline ADODB::Properties* _Parameter::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int _Parameter::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Parameter::SetSize(int value){ setProperty("Size", QVariant(value)); }

inline ADODB::DataTypeEnum _Parameter::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::DataTypeEnum*)qax_result.constData();
}
inline void _Parameter::SetType(ADODB::DataTypeEnum value){ setProperty("Type", QVariant(value)); }

inline QVariant _Parameter::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _Parameter::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void _Parameter::AppendChunk(const QVariant& Val)
{
    void *_a[] = {0, (void*)&Val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline int Parameters::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Parameters::Append(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Parameters::Delete(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline ADODB::_Parameter* Parameters::Item(const QVariant& Index)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void Parameters::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IUnknown* Parameters::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}


inline QVariant Command25::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Command25::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline QString Command25::CommandText() const
{
    QVariant qax_result = property("CommandText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command25::SetCommandText(const QString& value){ setProperty("CommandText", QVariant(value)); }

inline int Command25::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Command25::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline ADODB::CommandTypeEnum Command25::CommandType() const
{
    QVariant qax_result = property("CommandType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CommandTypeEnum*)qax_result.constData();
}
inline void Command25::SetCommandType(ADODB::CommandTypeEnum value){ setProperty("CommandType", QVariant(value)); }

inline QString Command25::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command25::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline ADODB::Parameters* Command25::Parameters() const
{
    ADODB::Parameters* qax_pointer = 0;
    qRegisterMetaType("Parameters*", &qax_pointer);
    qRegisterMetaType("Parameters", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Parameters**)qax_result.constData();
}

inline bool Command25::Prepared() const
{
    QVariant qax_result = property("Prepared");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Command25::SetPrepared(bool value){ setProperty("Prepared", QVariant(value)); }

inline ADODB::Properties* Command25::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Command25::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Command25::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline ADODB::_Parameter* Command25::CreateParameter()
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command25::CreateParameter(const QString& Name)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command25::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command25::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command25::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command25::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command25::Execute()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command25::Execute(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command25::Execute(QVariant& RecordsAffected, QVariant& Parameters)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command25::Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline QVariant _Command::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _Command::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline QVariant _Command::CommandStream() const
{
    QVariant qax_result = property("CommandStream");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QString _Command::CommandText() const
{
    QVariant qax_result = property("CommandText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Command::SetCommandText(const QString& value){ setProperty("CommandText", QVariant(value)); }

inline int _Command::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Command::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline ADODB::CommandTypeEnum _Command::CommandType() const
{
    QVariant qax_result = property("CommandType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CommandTypeEnum*)qax_result.constData();
}
inline void _Command::SetCommandType(ADODB::CommandTypeEnum value){ setProperty("CommandType", QVariant(value)); }

inline QString _Command::Dialect() const
{
    QVariant qax_result = property("Dialect");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Command::SetDialect(const QString& value){ setProperty("Dialect", QVariant(value)); }

inline QString _Command::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Command::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline bool _Command::NamedParameters() const
{
    QVariant qax_result = property("NamedParameters");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _Command::SetNamedParameters(bool value){ setProperty("NamedParameters", QVariant(value)); }

inline ADODB::Parameters* _Command::Parameters() const
{
    ADODB::Parameters* qax_pointer = 0;
    qRegisterMetaType("Parameters*", &qax_pointer);
    qRegisterMetaType("Parameters", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Parameters**)qax_result.constData();
}

inline bool _Command::Prepared() const
{
    QVariant qax_result = property("Prepared");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _Command::SetPrepared(bool value){ setProperty("Prepared", QVariant(value)); }

inline ADODB::Properties* _Command::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int _Command::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void _Command::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline ADODB::_Parameter* _Command::CreateParameter()
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline ADODB::_Parameter* _Command::CreateParameter(const QString& Name)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline ADODB::_Parameter* _Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline ADODB::_Parameter* _Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline ADODB::_Parameter* _Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline ADODB::_Parameter* _Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Command::Execute()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Command::Execute(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Command::Execute(QVariant& RecordsAffected, QVariant& Parameters)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline ADODB::_Recordset* _Command::Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline int Connection::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Connection::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline int Connection::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Connection::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline QString Connection::ConnectionString() const
{
    QVariant qax_result = property("ConnectionString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Connection::SetConnectionString(const QString& value){ setProperty("ConnectionString", QVariant(value)); }

inline int Connection::ConnectionTimeout() const
{
    QVariant qax_result = property("ConnectionTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Connection::SetConnectionTimeout(int value){ setProperty("ConnectionTimeout", QVariant(value)); }

inline ADODB::CursorLocationEnum Connection::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void Connection::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline QString Connection::DefaultDatabase() const
{
    QVariant qax_result = property("DefaultDatabase");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Connection::SetDefaultDatabase(const QString& value){ setProperty("DefaultDatabase", QVariant(value)); }

inline ADODB::Errors* Connection::Errors() const
{
    ADODB::Errors* qax_pointer = 0;
    qRegisterMetaType("Errors*", &qax_pointer);
    qRegisterMetaType("Errors", qax_pointer);
    QVariant qax_result = property("Errors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Errors**)qax_result.constData();
}

inline ADODB::IsolationLevelEnum Connection::IsolationLevel() const
{
    QVariant qax_result = property("IsolationLevel");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::IsolationLevelEnum*)qax_result.constData();
}
inline void Connection::SetIsolationLevel(ADODB::IsolationLevelEnum value){ setProperty("IsolationLevel", QVariant(value)); }

inline ADODB::ConnectModeEnum Connection::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void Connection::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline ADODB::Properties* Connection::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline QString Connection::Provider() const
{
    QVariant qax_result = property("Provider");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Connection::SetProvider(const QString& value){ setProperty("Provider", QVariant(value)); }

inline int Connection::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Connection::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Connection::BeginTrans()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void Connection::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Connection::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void Connection::CommitTrans()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline ADODB::_Recordset* Connection::Execute(const QString& CommandText)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection::Execute(const QString& CommandText, QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection::Execute(const QString& CommandText, QVariant& RecordsAffected, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandText, (void*)&RecordsAffected, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void Connection::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Connection::Open(const QString& ConnectionString)
{
    void *_a[] = {0, (void*)&ConnectionString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void Connection::Open(const QString& ConnectionString, const QString& UserID)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Connection::Open(const QString& ConnectionString, const QString& UserID, const QString& Password)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Connection::Open(const QString& ConnectionString, const QString& UserID, const QString& Password, int Options)
{
    void *_a[] = {0, (void*)&ConnectionString, (void*)&UserID, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline ADODB::_Recordset* Connection::OpenSchema(ADODB::SchemaEnum Schema)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection::OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema, (void*)&Restrictions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline ADODB::_Recordset* Connection::OpenSchema(ADODB::SchemaEnum Schema, const QVariant& Restrictions, const QVariant& SchemaID)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Schema, (void*)&Restrictions, (void*)&SchemaID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline void Connection::RollbackTrans()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}


inline QString _Record::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Record::SetActiveConnection(const QString& value){ setProperty("ActiveConnection", QVariant(value)); }

inline ADODB::Fields* _Record::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline ADODB::ConnectModeEnum _Record::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void _Record::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline QString _Record::ParentURL() const
{
    QVariant qax_result = property("ParentURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline ADODB::Properties* _Record::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline ADODB::RecordTypeEnum _Record::RecordType() const
{
    QVariant qax_result = property("RecordType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::RecordTypeEnum*)qax_result.constData();
}

inline QString _Record::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Record::SetSource(const QString& value){ setProperty("Source", QVariant(value)); }

inline ADODB::ObjectStateEnum _Record::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ObjectStateEnum*)qax_result.constData();
}

inline void _Record::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _Record::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QString _Record::CopyRecord()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString _Record::CopyRecord(const QString& Source)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QString _Record::CopyRecord(const QString& Source, const QString& Destination)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString _Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString _Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString _Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QString _Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options, bool Async)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options, (void*)&Async};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void _Record::DeleteRecord()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void _Record::DeleteRecord(const QString& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void _Record::DeleteRecord(const QString& Source, bool Async)
{
    void *_a[] = {0, (void*)&Source, (void*)&Async};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline ADODB::_Recordset* _Record::GetChildren()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString _Record::MoveRecord()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString _Record::MoveRecord(const QString& Source)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QString _Record::MoveRecord(const QString& Source, const QString& Destination)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QString _Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline QString _Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString _Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString _Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options, bool Async)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options, (void*)&Async};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void _Record::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void _Record::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void _Record::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void _Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void _Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void _Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void _Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions, (void*)&Options, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void _Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName, const QString& Password)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions, (void*)&Options, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}


inline QString Record::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Record::SetActiveConnection(const QString& value){ setProperty("ActiveConnection", QVariant(value)); }

inline ADODB::Fields* Record::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline ADODB::ConnectModeEnum Record::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void Record::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline QString Record::ParentURL() const
{
    QVariant qax_result = property("ParentURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline ADODB::Properties* Record::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline ADODB::RecordTypeEnum Record::RecordType() const
{
    QVariant qax_result = property("RecordType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::RecordTypeEnum*)qax_result.constData();
}

inline QString Record::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Record::SetSource(const QString& value){ setProperty("Source", QVariant(value)); }

inline ADODB::ObjectStateEnum Record::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ObjectStateEnum*)qax_result.constData();
}

inline void Record::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Record::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QString Record::CopyRecord()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString Record::CopyRecord(const QString& Source)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QString Record::CopyRecord(const QString& Source, const QString& Destination)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QString Record::CopyRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::CopyRecordOptionsEnum Options, bool Async)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options, (void*)&Async};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void Record::DeleteRecord()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Record::DeleteRecord(const QString& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Record::DeleteRecord(const QString& Source, bool Async)
{
    void *_a[] = {0, (void*)&Source, (void*)&Async};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline ADODB::_Recordset* Record::GetChildren()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString Record::MoveRecord()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString Record::MoveRecord(const QString& Source)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QString Record::MoveRecord(const QString& Source, const QString& Destination)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QString Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline QString Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString Record::MoveRecord(const QString& Source, const QString& Destination, const QString& UserName, const QString& Password, ADODB::MoveRecordOptionsEnum Options, bool Async)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Source, (void*)&Destination, (void*)&UserName, (void*)&Password, (void*)&Options, (void*)&Async};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void Record::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void Record::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void Record::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions, (void*)&Options, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void Record::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::ConnectModeEnum Mode, ADODB::RecordCreateOptionsEnum CreateOptions, ADODB::RecordOpenOptionsEnum Options, const QString& UserName, const QString& Password)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&Mode, (void*)&CreateOptions, (void*)&Options, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}


inline QString _Stream::Charset() const
{
    QVariant qax_result = property("Charset");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Stream::SetCharset(const QString& value){ setProperty("Charset", QVariant(value)); }

inline bool _Stream::EOS() const
{
    QVariant qax_result = property("EOS");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::LineSeparatorEnum _Stream::LineSeparator() const
{
    QVariant qax_result = property("LineSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LineSeparatorEnum*)qax_result.constData();
}
inline void _Stream::SetLineSeparator(ADODB::LineSeparatorEnum value){ setProperty("LineSeparator", QVariant(value)); }

inline ADODB::ConnectModeEnum _Stream::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void _Stream::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline int _Stream::Position() const
{
    QVariant qax_result = property("Position");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _Stream::SetPosition(int value){ setProperty("Position", QVariant(value)); }

inline int _Stream::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline ADODB::ObjectStateEnum _Stream::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ObjectStateEnum*)qax_result.constData();
}

inline ADODB::StreamTypeEnum _Stream::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::StreamTypeEnum*)qax_result.constData();
}
inline void _Stream::SetType(ADODB::StreamTypeEnum value){ setProperty("Type", QVariant(value)); }

inline void _Stream::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _Stream::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _Stream::CopyTo(ADODB::_Stream* DestStream)
{
    void *_a[] = {0, (void*)&DestStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void _Stream::CopyTo(ADODB::_Stream* DestStream, int CharNumber)
{
    void *_a[] = {0, (void*)&DestStream, (void*)&CharNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void _Stream::Flush()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void _Stream::LoadFromFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void _Stream::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void _Stream::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void _Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void _Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void _Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode, (void*)&Options, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void _Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName, const QString& Password)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode, (void*)&Options, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline QVariant _Stream::Read()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QVariant _Stream::Read(int NumBytes)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&NumBytes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString _Stream::ReadText()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QString _Stream::ReadText(int NumChars)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&NumChars};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void _Stream::SaveToFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void _Stream::SaveToFile(const QString& FileName, ADODB::SaveOptionsEnum Options)
{
    void *_a[] = {0, (void*)&FileName, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void _Stream::SetEOS()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void _Stream::SkipLine()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void _Stream::Write(const QVariant& Buffer)
{
    void *_a[] = {0, (void*)&Buffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void _Stream::WriteText(const QString& Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void _Stream::WriteText(const QString& Data, ADODB::StreamWriteEnum Options)
{
    void *_a[] = {0, (void*)&Data, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}


inline QString Stream::Charset() const
{
    QVariant qax_result = property("Charset");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Stream::SetCharset(const QString& value){ setProperty("Charset", QVariant(value)); }

inline bool Stream::EOS() const
{
    QVariant qax_result = property("EOS");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::LineSeparatorEnum Stream::LineSeparator() const
{
    QVariant qax_result = property("LineSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LineSeparatorEnum*)qax_result.constData();
}
inline void Stream::SetLineSeparator(ADODB::LineSeparatorEnum value){ setProperty("LineSeparator", QVariant(value)); }

inline ADODB::ConnectModeEnum Stream::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ConnectModeEnum*)qax_result.constData();
}
inline void Stream::SetMode(ADODB::ConnectModeEnum value){ setProperty("Mode", QVariant(value)); }

inline int Stream::Position() const
{
    QVariant qax_result = property("Position");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Stream::SetPosition(int value){ setProperty("Position", QVariant(value)); }

inline int Stream::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline ADODB::ObjectStateEnum Stream::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ObjectStateEnum*)qax_result.constData();
}

inline ADODB::StreamTypeEnum Stream::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::StreamTypeEnum*)qax_result.constData();
}
inline void Stream::SetType(ADODB::StreamTypeEnum value){ setProperty("Type", QVariant(value)); }

inline void Stream::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Stream::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Stream::CopyTo(ADODB::_Stream* DestStream)
{
    void *_a[] = {0, (void*)&DestStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Stream::CopyTo(ADODB::_Stream* DestStream, int CharNumber)
{
    void *_a[] = {0, (void*)&DestStream, (void*)&CharNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Stream::Flush()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Stream::LoadFromFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Stream::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Stream::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode, (void*)&Options, (void*)&UserName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Stream::Open(const QVariant& Source, ADODB::ConnectModeEnum Mode, ADODB::StreamOpenOptionsEnum Options, const QString& UserName, const QString& Password)
{
    void *_a[] = {0, (void*)&Source, (void*)&Mode, (void*)&Options, (void*)&UserName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline QVariant Stream::Read()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QVariant Stream::Read(int NumBytes)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&NumBytes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString Stream::ReadText()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QString Stream::ReadText(int NumChars)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&NumChars};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void Stream::SaveToFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Stream::SaveToFile(const QString& FileName, ADODB::SaveOptionsEnum Options)
{
    void *_a[] = {0, (void*)&FileName, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void Stream::SetEOS()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Stream::SkipLine()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void Stream::Write(const QVariant& Buffer)
{
    void *_a[] = {0, (void*)&Buffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void Stream::WriteText(const QString& Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void Stream::WriteText(const QString& Data, ADODB::StreamWriteEnum Options)
{
    void *_a[] = {0, (void*)&Data, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}


inline QVariant Command::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Command::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline QVariant Command::CommandStream() const
{
    QVariant qax_result = property("CommandStream");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QString Command::CommandText() const
{
    QVariant qax_result = property("CommandText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command::SetCommandText(const QString& value){ setProperty("CommandText", QVariant(value)); }

inline int Command::CommandTimeout() const
{
    QVariant qax_result = property("CommandTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Command::SetCommandTimeout(int value){ setProperty("CommandTimeout", QVariant(value)); }

inline ADODB::CommandTypeEnum Command::CommandType() const
{
    QVariant qax_result = property("CommandType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CommandTypeEnum*)qax_result.constData();
}
inline void Command::SetCommandType(ADODB::CommandTypeEnum value){ setProperty("CommandType", QVariant(value)); }

inline QString Command::Dialect() const
{
    QVariant qax_result = property("Dialect");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command::SetDialect(const QString& value){ setProperty("Dialect", QVariant(value)); }

inline QString Command::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Command::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline bool Command::NamedParameters() const
{
    QVariant qax_result = property("NamedParameters");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Command::SetNamedParameters(bool value){ setProperty("NamedParameters", QVariant(value)); }

inline ADODB::Parameters* Command::Parameters() const
{
    ADODB::Parameters* qax_pointer = 0;
    qRegisterMetaType("Parameters*", &qax_pointer);
    qRegisterMetaType("Parameters", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Parameters**)qax_result.constData();
}

inline bool Command::Prepared() const
{
    QVariant qax_result = property("Prepared");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Command::SetPrepared(bool value){ setProperty("Prepared", QVariant(value)); }

inline ADODB::Properties* Command::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Command::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Command::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline ADODB::_Parameter* Command::CreateParameter()
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command::CreateParameter(const QString& Name)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline ADODB::_Parameter* Command::CreateParameter(const QString& Name, ADODB::DataTypeEnum Type, ADODB::ParameterDirectionEnum Direction, int Size, const QVariant& Value)
{
    ADODB::_Parameter* qax_result = 0;
    qRegisterMetaType("_Parameter*", &qax_result);
    qRegisterMetaType("_Parameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Type, (void*)&Direction, (void*)&Size, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command::Execute()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command::Execute(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command::Execute(QVariant& RecordsAffected, QVariant& Parameters)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline ADODB::_Recordset* Command::Execute(QVariant& RecordsAffected, QVariant& Parameters, int Options)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected, (void*)&Parameters, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline ADODB::PositionEnum Recordset::AbsolutePage() const
{
    QVariant qax_result = property("AbsolutePage");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset::SetAbsolutePage(ADODB::PositionEnum value){ setProperty("AbsolutePage", QVariant(value)); }

inline ADODB::PositionEnum Recordset::AbsolutePosition() const
{
    QVariant qax_result = property("AbsolutePosition");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::PositionEnum*)qax_result.constData();
}
inline void Recordset::SetAbsolutePosition(ADODB::PositionEnum value){ setProperty("AbsolutePosition", QVariant(value)); }

inline IDispatch* Recordset::ActiveCommand() const
{
    QVariant qax_result = property("ActiveCommand");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QVariant Recordset::ActiveConnection() const
{
    QVariant qax_result = property("ActiveConnection");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset::SetActiveConnection(const QVariant& value){ setProperty("ActiveConnection", QVariant(value)); }

inline bool Recordset::BOF() const
{
	QVariant qax_result = property("BOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QVariant Recordset::Bookmark() const
{
    QVariant qax_result = property("Bookmark");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset::SetBookmark(const QVariant& value){ setProperty("Bookmark", QVariant(value)); }

inline int Recordset::CacheSize() const
{
    QVariant qax_result = property("CacheSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset::SetCacheSize(int value){ setProperty("CacheSize", QVariant(value)); }

inline ADODB::CursorLocationEnum Recordset::CursorLocation() const
{
    QVariant qax_result = property("CursorLocation");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorLocationEnum*)qax_result.constData();
}
inline void Recordset::SetCursorLocation(ADODB::CursorLocationEnum value){ setProperty("CursorLocation", QVariant(value)); }

inline ADODB::CursorTypeEnum Recordset::CursorType() const
{
    QVariant qax_result = property("CursorType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::CursorTypeEnum*)qax_result.constData();
}
inline void Recordset::SetCursorType(ADODB::CursorTypeEnum value){ setProperty("CursorType", QVariant(value)); }

inline QString Recordset::DataMember() const
{
    QVariant qax_result = property("DataMember");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset::SetDataMember(const QString& value){ setProperty("DataMember", QVariant(value)); }

inline IUnknown* Recordset::DataSource() const
{
    QVariant qax_result = property("DataSource");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool Recordset::adoEOF() const
{
	QVariant qax_result = property("adoEOF");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline ADODB::EditModeEnum Recordset::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::EditModeEnum*)qax_result.constData();
}

inline ADODB::Fields* Recordset::Fields() const
{
    ADODB::Fields* qax_pointer = 0;
    qRegisterMetaType("Fields*", &qax_pointer);
    qRegisterMetaType("Fields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Fields**)qax_result.constData();
}

inline QVariant Recordset::Filter() const
{
    QVariant qax_result = property("Filter");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset::SetFilter(const QVariant& value){ setProperty("Filter", QVariant(value)); }

inline QString Recordset::Index() const
{
    QVariant qax_result = property("Index");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset::SetIndex(const QString& value){ setProperty("Index", QVariant(value)); }

inline ADODB::LockTypeEnum Recordset::LockType() const
{
    QVariant qax_result = property("LockType");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::LockTypeEnum*)qax_result.constData();
}
inline void Recordset::SetLockType(ADODB::LockTypeEnum value){ setProperty("LockType", QVariant(value)); }

inline ADODB::MarshalOptionsEnum Recordset::MarshalOptions() const
{
    QVariant qax_result = property("MarshalOptions");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::MarshalOptionsEnum*)qax_result.constData();
}
inline void Recordset::SetMarshalOptions(ADODB::MarshalOptionsEnum value){ setProperty("MarshalOptions", QVariant(value)); }

inline int Recordset::MaxRecords() const
{
    QVariant qax_result = property("MaxRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset::SetMaxRecords(int value){ setProperty("MaxRecords", QVariant(value)); }

inline int Recordset::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset::PageSize() const
{
    QVariant qax_result = property("PageSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Recordset::SetPageSize(int value){ setProperty("PageSize", QVariant(value)); }

inline ADODB::Properties* Recordset::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Recordset::RecordCount() const
{
    QVariant qax_result = property("RecordCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Recordset::Sort() const
{
    QVariant qax_result = property("Sort");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Recordset::SetSort(const QString& value){ setProperty("Sort", QVariant(value)); }

inline QVariant Recordset::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Recordset::SetSource(const QVariant& value){ setProperty("Source", QVariant(value)); }

inline int Recordset::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Recordset::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool Recordset::StayInSync() const
{
    QVariant qax_result = property("StayInSync");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Recordset::SetStayInSync(bool value){ setProperty("StayInSync", QVariant(value)); }

inline void Recordset::AddNew()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void Recordset::AddNew(const QVariant& FieldList)
{
    void *_a[] = {0, (void*)&FieldList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Recordset::AddNew(const QVariant& FieldList, const QVariant& Values)
{
    void *_a[] = {0, (void*)&FieldList, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void Recordset::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void Recordset::CancelBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Recordset::CancelBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Recordset::CancelUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline ADODB::_Recordset* Recordset::Clone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset::Clone(ADODB::LockTypeEnum LockType)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void Recordset::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline QVariant Recordset::Collect(const QVariant& Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline CompareEnum Recordset::CompareBookmarks(const QVariant& Bookmark1, const QVariant& Bookmark2)
{
    CompareEnum qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Bookmark1, (void*)&Bookmark2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void Recordset::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void Recordset::Delete(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void Recordset::Find(const QString& Criteria)
{
    void *_a[] = {0, (void*)&Criteria};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void Recordset::Find(const QString& Criteria, int SkipRecords)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void Recordset::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void Recordset::Find(const QString& Criteria, int SkipRecords, ADODB::SearchDirectionEnum SearchDirection, const QVariant& Start)
{
    void *_a[] = {0, (void*)&Criteria, (void*)&SkipRecords, (void*)&SearchDirection, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline QVariant Recordset::GetRows()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline QVariant Recordset::GetRows(int Rows)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline QVariant Recordset::GetRows(int Rows, const QVariant& Start)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline QVariant Recordset::GetRows(int Rows, const QVariant& Start, const QVariant& Fields)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Rows, (void*)&Start, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline QString Recordset::GetString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline QString Recordset::GetString(ADODB::StringFormatEnum StringFormat)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline QString Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline QString Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline QString Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline QString Recordset::GetString(ADODB::StringFormatEnum StringFormat, int NumRows, const QString& ColumnDelimeter, const QString& RowDelimeter, const QString& NullExpr)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StringFormat, (void*)&NumRows, (void*)&ColumnDelimeter, (void*)&RowDelimeter, (void*)&NullExpr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void Recordset::Move(int NumRecords)
{
    void *_a[] = {0, (void*)&NumRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void Recordset::Move(int NumRecords, const QVariant& Start)
{
    void *_a[] = {0, (void*)&NumRecords, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void Recordset::MoveFirst()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void Recordset::MoveLast()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void Recordset::MoveNext()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void Recordset::MovePrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline ADODB::_Recordset* Recordset::NextRecordset()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline ADODB::_Recordset* Recordset::NextRecordset(QVariant& RecordsAffected)
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&RecordsAffected};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void Recordset::Open()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void Recordset::Open(const QVariant& Source)
{
    void *_a[] = {0, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void Recordset::Open(const QVariant& Source, const QVariant& ActiveConnection, ADODB::CursorTypeEnum CursorType, ADODB::LockTypeEnum LockType, int Options)
{
    void *_a[] = {0, (void*)&Source, (void*)&ActiveConnection, (void*)&CursorType, (void*)&LockType, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void Recordset::Requery()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void Recordset::Requery(int Options)
{
    void *_a[] = {0, (void*)&Options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void Recordset::Resync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void Recordset::Resync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void Recordset::Resync(ADODB::AffectEnum AffectRecords, ADODB::ResyncEnum ResyncValues)
{
    void *_a[] = {0, (void*)&AffectRecords, (void*)&ResyncValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void Recordset::Save()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void Recordset::Save(const QVariant& Destination)
{
    void *_a[] = {0, (void*)&Destination};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void Recordset::Save(const QVariant& Destination, ADODB::PersistFormatEnum PersistFormat)
{
    void *_a[] = {0, (void*)&Destination, (void*)&PersistFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void Recordset::Seek(const QVariant& KeyValues)
{
    void *_a[] = {0, (void*)&KeyValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void Recordset::Seek(const QVariant& KeyValues, ADODB::SeekEnum SeekOption)
{
    void *_a[] = {0, (void*)&KeyValues, (void*)&SeekOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline QVariant Recordset::SetCollect(const QVariant& Index, const QVariant& rhs)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool Recordset::Supports(ADODB::CursorOptionEnum CursorOptions)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CursorOptions};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline void Recordset::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void Recordset::Update(const QVariant& Fields)
{
    void *_a[] = {0, (void*)&Fields};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void Recordset::Update(const QVariant& Fields, const QVariant& Values)
{
    void *_a[] = {0, (void*)&Fields, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void Recordset::UpdateBatch()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void Recordset::UpdateBatch(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline ADODB::_Recordset* Recordset::_xClone()
{
    ADODB::_Recordset* qax_result = 0;
    qRegisterMetaType("_Recordset*", &qax_result);
    qRegisterMetaType("_Recordset", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline void Recordset::_xResync()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void Recordset::_xResync(ADODB::AffectEnum AffectRecords)
{
    void *_a[] = {0, (void*)&AffectRecords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void Recordset::_xSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void Recordset::_xSave(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void Recordset::_xSave(const QString& FileName, ADODB::PersistFormatEnum PersistFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&PersistFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}


inline int Field15::ActualSize() const
{
    QVariant qax_result = property("ActualSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Field15::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Field15::DefinedSize() const
{
    QVariant qax_result = property("DefinedSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Field15::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline uint Field15::NumericScale() const
{
    QVariant qax_result = property("NumericScale");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline QVariant Field15::OriginalValue() const
{
    QVariant qax_result = property("OriginalValue");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline uint Field15::Precision() const
{
    QVariant qax_result = property("Precision");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline ADODB::Properties* Field15::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline ADODB::DataTypeEnum Field15::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::DataTypeEnum*)qax_result.constData();
}

inline QVariant Field15::UnderlyingValue() const
{
    QVariant qax_result = property("UnderlyingValue");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QVariant Field15::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Field15::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void Field15::AppendChunk(const QVariant& Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline QVariant Field15::GetChunk(int Length)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int Parameter::Attributes() const
{
    QVariant qax_result = property("Attributes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Parameter::SetAttributes(int value){ setProperty("Attributes", QVariant(value)); }

inline ADODB::ParameterDirectionEnum Parameter::Direction() const
{
    QVariant qax_result = property("Direction");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::ParameterDirectionEnum*)qax_result.constData();
}
inline void Parameter::SetDirection(ADODB::ParameterDirectionEnum value){ setProperty("Direction", QVariant(value)); }

inline QString Parameter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Parameter::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline uint Parameter::NumericScale() const
{
    QVariant qax_result = property("NumericScale");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void Parameter::SetNumericScale(uint value){ setProperty("NumericScale", QVariant(value)); }

inline uint Parameter::Precision() const
{
    QVariant qax_result = property("Precision");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void Parameter::SetPrecision(uint value){ setProperty("Precision", QVariant(value)); }

inline ADODB::Properties* Parameter::Properties() const
{
    ADODB::Properties* qax_pointer = 0;
    qRegisterMetaType("Properties*", &qax_pointer);
    qRegisterMetaType("Properties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::Properties**)qax_result.constData();
}

inline int Parameter::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Parameter::SetSize(int value){ setProperty("Size", QVariant(value)); }

inline ADODB::DataTypeEnum Parameter::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(ADODB::DataTypeEnum*)qax_result.constData();
}
inline void Parameter::SetType(ADODB::DataTypeEnum value){ setProperty("Type", QVariant(value)); }

inline QVariant Parameter::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Parameter::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void Parameter::AppendChunk(const QVariant& Val)
{
    void *_a[] = {0, (void*)&Val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Collection *t)
{ Q_ASSERT(!t); return new ADODB::_Collection; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_DynaCollection *t)
{ Q_ASSERT(!t); return new ADODB::_DynaCollection; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_ADO *t)
{ Q_ASSERT(!t); return new ADODB::_ADO; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Properties *t)
{ Q_ASSERT(!t); return new ADODB::Properties; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Property *t)
{ Q_ASSERT(!t); return new ADODB::Property; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Error *t)
{ Q_ASSERT(!t); return new ADODB::Error; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Errors *t)
{ Q_ASSERT(!t); return new ADODB::Errors; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Command15 *t)
{ Q_ASSERT(!t); return new ADODB::Command15; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Connection *t)
{ Q_ASSERT(!t); return new ADODB::_Connection; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Connection15 *t)
{ Q_ASSERT(!t); return new ADODB::Connection15; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Recordset *t)
{ Q_ASSERT(!t); return new ADODB::_Recordset; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Recordset21 *t)
{ Q_ASSERT(!t); return new ADODB::Recordset21; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Recordset20 *t)
{ Q_ASSERT(!t); return new ADODB::Recordset20; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Recordset15 *t)
{ Q_ASSERT(!t); return new ADODB::Recordset15; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Fields *t)
{ Q_ASSERT(!t); return new ADODB::Fields; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Fields20 *t)
{ Q_ASSERT(!t); return new ADODB::Fields20; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Fields15 *t)
{ Q_ASSERT(!t); return new ADODB::Fields15; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Field *t)
{ Q_ASSERT(!t); return new ADODB::Field; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Field20 *t)
{ Q_ASSERT(!t); return new ADODB::Field20; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Parameter *t)
{ Q_ASSERT(!t); return new ADODB::_Parameter; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Parameters *t)
{ Q_ASSERT(!t); return new ADODB::Parameters; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Command25 *t)
{ Q_ASSERT(!t); return new ADODB::Command25; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Command *t)
{ Q_ASSERT(!t); return new ADODB::_Command; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Connection *t)
{ Q_ASSERT(!t); return new ADODB::Connection; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Record *t)
{ Q_ASSERT(!t); return new ADODB::_Record; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Record *t)
{ Q_ASSERT(!t); return new ADODB::Record; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::_Stream *t)
{ Q_ASSERT(!t); return new ADODB::_Stream; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Stream *t)
{ Q_ASSERT(!t); return new ADODB::Stream; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Command *t)
{ Q_ASSERT(!t); return new ADODB::Command; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Recordset *t)
{ Q_ASSERT(!t); return new ADODB::Recordset; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Field15 *t)
{ Q_ASSERT(!t); return new ADODB::Field15; }

template<>
inline void *qMetaTypeConstructHelper(const ADODB::Parameter *t)
{ Q_ASSERT(!t); return new ADODB::Parameter; }

#endif

