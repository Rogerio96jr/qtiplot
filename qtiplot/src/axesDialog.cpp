/***************************************************************************
    File                 : axesDialog.cpp
    Project              : QtiPlot
    --------------------------------------------------------------------
    Copyright            : (C) 2006 by Ion Vasilief, Tilman Hoener zu Siederdissen
    Email                : ion_vasilief@yahoo.fr, thzs@gmx.net
    Description          : General plot options dialog
                           
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *  This program is free software; you can redistribute it and/or modify   *
 *  it under the terms of the GNU General Public License as published by   *
 *  the Free Software Foundation; either version 2 of the License, or      *
 *  (at your option) any later version.                                    *
 *                                                                         *
 *  This program is distributed in the hope that it will be useful,        *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *  GNU General Public License for more details.                           *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the Free Software           *
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor,                    *
 *   Boston, MA  02110-1301  USA                                           *
 *                                                                         *
 ***************************************************************************/
#include "axesDialog.h"
#include "textDialog.h"
#include "colorBox.h"
#include "graph.h"
#include "plot.h"
#include "parser.h"
#include "colorButton.h"
#include "multilayer.h"
#include "txt_icons.h"
#include "symbolDialog.h"

#include <q3textedit.h>
#include <qcolordialog.h>
#include <qcheckbox.h>
#include <qcombobox.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <q3listbox.h>
#include <qpushbutton.h>
#include <qradiobutton.h>
#include <qspinbox.h>
#include <qtabwidget.h>
#include <qwidget.h>
#include <qlayout.h>
#include <qvariant.h>
#include <qtooltip.h>
#include <q3whatsthis.h>
#include <qimage.h>
#include <qpixmap.h>
#include <q3buttongroup.h>
#include <qmessagebox.h>
#include <qinputdialog.h>
#include <qfont.h>
#include <qfontdialog.h> 
#include <qregexp.h> 
#include <q3vbox.h>
#include <qwidget.h>

#include <qwt_plot.h>
#include <qwt_scale_widget.h>
//Added by qt3to4:
#include <Q3MemArray>
#include <Q3ValueList>
#include <Q3HBoxLayout>
#include <Q3VBoxLayout>

/* XPM */
static char * vert_scl_xpm[] = {
"36 36 76 1",
" 	c None",
".	c #FFFFFF",
"+	c #818181",
"@	c #070707",
"#	c #101010",
"$	c #EEEEEE",
"%	c #1D1D1D",
"&	c #ACACAC",
"*	c #151515",
"=	c #121212",
"-	c #929292",
";	c #242424",
">	c #D5D5D5",
",	c #C9C9C9",
"'	c #2A2A2A",
")	c #5E5E5E",
"!	c #000000",
"~	c #C8C8C8",
"{	c #D2D2D2",
"]	c #090909",
"^	c #060606",
"/	c #FEFEFE",
"(	c #FCFCFC",
"_	c #F7F7F7",
":	c #CECECE",
"<	c #444444",
"[	c #E0E0E0",
"}	c #464646",
"|	c #E8E8E8",
"1	c #282828",
"2	c #D3D3D3",
"3	c #D1D1D1",
"4	c #A4A4A4",
"5	c #484848",
"6	c #EBEBEB",
"7	c #7D7D7D",
"8	c #050505",
"9	c #7F7F7F",
"0	c #F9F9F9",
"a	c #F38C82",
"b	c #E71E09",
"c	c #E82612",
"d	c #FDFDFD",
"e	c #EA3826",
"f	c #FBD8D5",
"g	c #F9CEC9",
"h	c #EA3E2C",
"i	c #E71D08",
"j	c #FEFCFC",
"k	c #7D6F6F",
"l	c #EA3C2A",
"m	c #FAD7D3",
"n	c #FAD5D1",
"o	c #F2897E",
"p	c #E71C07",
"q	c #F28B80",
"r	c #FDEFEE",
"s	c #E9321F",
"t	c #EF6D5F",
"u	c #E71803",
"v	c #FEF7F7",
"w	c #F7B3AC",
"x	c #E82B17",
"y	c #E82814",
"z	c #F49C93",
"A	c #F9CDC8",
"B	c #FAD6D2",
"C	c #E7200B",
"D	c #FAD2CE",
"E	c #ED5546",
"F	c #FCE2E0",
"G	c #ED5748",
"H	c #FCEAE8",
"I	c #F6ACA5",
"J	c #ED594A",
"K	c #FDECEB",
" ......+@#+......$%......&*=-...... ",
" ......;>,'......)!......%~{]...... ",
" ......^/(^......_!........:<...... ",
" ......^((^.......!.......[}|...... ",
" ......123;.......!......456....... ",
" ......78^9.......!......*!!!...... ",
" .................0................ ",
" abca..(!d.......!.......!.....abca ",
" efgh..!!!!!!!!!!!!!!!!!!!!!!..efgh ",
" i/ji..!kkkkkkkkkkkkkkkkkkkk!..i/ji ",
" ijji.!!kkkkkkkkkkkkkkkkkkkk!!.ijji ",
" lmne..!kkkkkkkkkkkkkkkkkkkk!..lmne ",
" opiq..!kkkkkkkkkkkkkkkkkkkk!..opiq ",
" ......!kkkkkkkkkkkkkkkkkkkk!...... ",
" ......!kkkkkkkkkkkkkkkkkkkk!...... ",
" .rs...!kkkkkkkkkkkkkkkkkkkk!...rs. ",
" .tu...!kkkkkkkkkkkkkkkkkkkk!...tu. ",
" .vu..!!kkkkkkkkkkkkkkkkkkkk!!..vu. ",
" ..u...!kkkkkkkkkkkkkkkkkkkk!....u. ",
" ..u...!kkkkkkkkkkkkkkkkkkkk!....u. ",
" ..u...!kkkkkkkkkkkkkkkkkkkk!....u. ",
" ......!kkkkkkkkkkkkkkkkkkkk!...... ",
" ......!kkkkkkkkkkkkkkkkkkkk!...... ",
" wxyz..!kkkkkkkkkkkkkkkkkkkk!..wxyz ",
" sABC.!!kkkkkkkkkkkkkkkkkkkk!!.sABC ",
" ..DE..!kkkkkkkkkkkkkkkkkkkk!....DE ",
" .FGH..!kkkkkkkkkkkkkkkkkkkk!...FGH ",
" IJK...!!!!!!!!!!!!!!!!!!!!!!..IJK. ",
" xuuu....!........!.......!....xuuu ",
" .................................. ",
" ......+@#+......$%......&*=-...... ",
" ......;>,'......)!......%~{]...... ",
" ......^/(^......_!........:<...... ",
" ......^((^.......!.......[}|...... ",
" ......123;.......!......456....... ",
" ......78^9.......!......*!!!...... "};

/* XPM */
static char * horizont_scl_xpm[] = {
"36 38 75 1",
" 	c None",
".	c #FFFFFF",
"+	c #F38C82",
"@	c #E71E09",
"#	c #E82612",
"$	c #FDEFEE",
"%	c #E9321F",
"&	c #F7B3AC",
"*	c #E82B17",
"=	c #E82814",
"-	c #F49C93",
";	c #EA3826",
">	c #FBD8D5",
",	c #F9CEC9",
"'	c #EA3E2C",
")	c #EF6D5F",
"!	c #E71803",
"~	c #F9CDC8",
"{	c #FAD6D2",
"]	c #E7200B",
"^	c #E71D08",
"/	c #FEFEFE",
"(	c #FEFCFC",
"_	c #FEF7F7",
":	c #FAD2CE",
"<	c #ED5546",
"[	c #FCE2E0",
"}	c #ED5748",
"|	c #FCEAE8",
"1	c #EA3C2A",
"2	c #FAD7D3",
"3	c #FAD5D1",
"4	c #F6ACA5",
"5	c #ED594A",
"6	c #FDECEB",
"7	c #F2897E",
"8	c #E71C07",
"9	c #F28B80",
"0	c #818181",
"a	c #070707",
"b	c #101010",
"c	c #242424",
"d	c #D5D5D5",
"e	c #C9C9C9",
"f	c #2A2A2A",
"g	c #FCFCFC",
"h	c #000000",
"i	c #FDFDFD",
"j	c #060606",
"k	c #7D6F6F",
"l	c #282828",
"m	c #D3D3D3",
"n	c #D1D1D1",
"o	c #7D7D7D",
"p	c #050505",
"q	c #7F7F7F",
"r	c #EEEEEE",
"s	c #1D1D1D",
"t	c #5E5E5E",
"u	c #F7F7F7",
"v	c #ACACAC",
"w	c #151515",
"x	c #121212",
"y	c #929292",
"z	c #C8C8C8",
"A	c #D2D2D2",
"B	c #090909",
"C	c #CECECE",
"D	c #444444",
"E	c #E0E0E0",
"F	c #464646",
"G	c #E8E8E8",
"H	c #A4A4A4",
"I	c #484848",
"J	c #EBEBEB",
"....................................",
".......+@#+.....$%......&*=-........",
".......;>,'.....)!......%~{]........",
".......^/(^....._!........:<........",
".......^((^......!.......[}|........",
".......123;......!......456.........",
".......78^9......!......*!!!........",
"0ab0................................",
"cdef...ghi.......h.......h.....0ab0.",
"j/gj...hhhhhhhhhhhhhhhhhhhhhh..cdef.",
"jggj...hkkkkkkkkkkkkkkkkkkkkh..j/gj.",
"lmnc..hhkkkkkkkkkkkkkkkkkkkkhh.jggj.",
"opjq...hkkkkkkkkkkkkkkkkkkkkh..lmnc.",
".......hkkkkkkkkkkkkkkkkkkkkh..opjq.",
".......hkkkkkkkkkkkkkkkkkkkkh.......",
"rs.....hkkkkkkkkkkkkkkkkkkkkh.......",
"th.....hkkkkkkkkkkkkkkkkkkkkh..rs...",
"uh.....hkkkkkkkkkkkkkkkkkkkkh..th...",
".h....hhkkkkkkkkkkkkkkkkkkkkhh.uh...",
".h.....hkkkkkkkkkkkkkkkkkkkkh...h...",
".h.....hkkkkkkkkkkkkkkkkkkkkh...h...",
".......hkkkkkkkkkkkkkkkkkkkkh...h...",
"vwxy...hkkkkkkkkkkkkkkkkkkkkh.......",
"szAB...hkkkkkkkkkkkkkkkkkkkkh..vwxy.",
"..CD...hkkkkkkkkkkkkkkkkkkkkh..szAB.",
".EFG..hhkkkkkkkkkkkkkkkkkkkkhh...CD.",
"HIJ....hkkkkkkkkkkkkkkkkkkkkh...EFG.",
"whhh...hkkkkkkkkkkkkkkkkkkkkh..HIJ..",
".......hhhhhhhhhhhhhhhhhhhhhh..whhh.",
".........h........h.......h.........",
"....................................",
".......+@#+.....$%......&*=-........",
".......;>,'.....)!......%~{]........",
".......^/(^....._!........:<........",
".......^((^......!.......[}|........",
".......123;......!......456.........",
".......78^9......!......*!!!........",
"...................................."};

static const char* const image2_data[] = { 
"74 77 171 2",
"  	c None",
". 	c #FFFFFF",
"+ 	c #E0E0E0",
"@ 	c #FAFAFA",
"# 	c #363636",
"$ 	c #ABABAB",
"% 	c #000000",
"& 	c #BDBDBD",
"* 	c #737373",
"= 	c #858585",
"- 	c #FFE8E8",
"; 	c #FFF7F7",
"> 	c #FFD1D1",
", 	c #FFF0F0",
"' 	c #E6E6E6",
") 	c #FFB2B2",
"! 	c #FFE6E6",
"~ 	c #FF6666",
"{ 	c #FFCCCC",
"] 	c #C9C9C9",
"^ 	c #939493",
"/ 	c #808080",
"( 	c #878787",
"_ 	c #D6D6D6",
": 	c #969696",
"< 	c #030303",
"[ 	c #383838",
"} 	c #4C4C4C",
"| 	c #1A1A1A",
"1 	c #080808",
"2 	c #C2C2C2",
"3 	c #EBEBEB",
"4 	c #F0F0F0",
"5 	c #8C8C8C",
"6 	c #7A7A7A",
"7 	c #A3A3A3",
"8 	c #999999",
"9 	c #A1A1A1",
"0 	c #828282",
"a 	c #949494",
"b 	c #F2F2F2",
"c 	c #474747",
"d 	c #545454",
"e 	c #0F0F0F",
"f 	c #B5B5B5",
"g 	c #CFCFCF",
"h 	c #262626",
"i 	c #333333",
"j 	c #DEDEDE",
"k 	c #FDFDFD",
"l 	c #D7D7D7",
"m 	c #B7B7B7",
"n 	c #C4C4C4",
"o 	c #F7F7F7",
"p 	c #CCCCCC",
"q 	c #2E2E2E",
"r 	c #B2B2B2",
"s 	c #DFDFDF",
"t 	c #ACACAC",
"u 	c #ADADAD",
"v 	c #D3D3D3",
"w 	c #CDCDCD",
"x 	c #AAAAAA",
"y 	c #D4C3C3",
"z 	c #A9A9A9",
"A 	c #AAA8A8",
"B 	c #DB7F7F",
"C 	c #E3E3E3",
"D 	c #E5E5E5",
"E 	c #F2DADA",
"F 	c #B19999",
"G 	c #FFC4C4",
"H 	c #D2D2D2",
"I 	c #FFD4D4",
"J 	c #EA6565",
"K 	c #E2E2E2",
"L 	c #FFA1A1",
"M 	c #C8C8C8",
"N 	c #AFAFAF",
"O 	c #FF9999",
"P 	c #F5C6C6",
"Q 	c #E9E9E9",
"R 	c #B6B6B6",
"S 	c #CFB4B4",
"T 	c #B9B9B9",
"U 	c #F5F5F5",
"V 	c #ACA7A7",
"W 	c #EAEAEA",
"X 	c #F9F9F9",
"Y 	c #B8B8B8",
"Z 	c #C0A6A6",
"` 	c #B4B4B4",
" .	c #EFEFEF",
"..	c #F2C3C3",
"+.	c #EEEEEE",
"@.	c #BCBCBC",
"#.	c #C5C5C5",
"$.	c #DADADA",
"%.	c #BEBEBE",
"&.	c #B0B0B0",
"*.	c #FBFBFB",
"=.	c #C6C6C6",
"-.	c #B1B1B1",
";.	c #BABABA",
">.	c #AEAEAE",
",.	c #D0D0D0",
"'.	c #FCFCFC",
").	c #141414",
"!.	c #D8D8D8",
"~.	c #C7C7C7",
"{.	c #575757",
"].	c #3D3D3D",
"^.	c #C3C3C3",
"/.	c #5E5E5E",
"(.	c #7D7D7D",
"_.	c #B3B3B3",
":.	c #F6C8C8",
"<.	c #757575",
"[.	c #919191",
"}.	c #CAB3B3",
"|.	c #EDEDED",
"1.	c #ADA8A8",
"2.	c #666666",
"3.	c #2B2B2B",
"4.	c #BBBBBB",
"5.	c #C9AAAA",
"6.	c #292929",
"7.	c #D4D4D4",
"8.	c #FBC9C9",
"9.	c #E8E8E8",
"0.	c #9C9C9C",
"a.	c #E4E4E4",
"b.	c #E7E7E7",
"c.	c #CACACA",
"d.	c #C1C1C1",
"e.	c #E39090",
"f.	c #CBCBCB",
"g.	c #ADA3A3",
"h.	c #C8B0B0",
"i.	c #F59A9A",
"j.	c #C0A9A9",
"k.	c #C9BFBF",
"l.	c #7A4747",
"m.	c #A18C8C",
"n.	c #8C8282",
"o.	c #332929",
"p.	c #242424",
"q.	c #0A0A0A",
"r.	c #454545",
"s.	c #595959",
"t.	c #525252",
"u.	c #5C5C5C",
"v.	c #D9D9D9",
"w.	c #121212",
"x.	c #8A8A8A",
"y.	c #171717",
"z.	c #A8A8A8",
"A.	c #696969",
"B.	c #707070",
"C.	c #9E9E9E",
"D.	c #404040",
"E.	c #616161",
"F.	c #8F8F8F",
"G.	c #4F4F4F",
"H.	c #050505",
"I.	c #DBDBDB",
"J.	c #4A4A4A",
"K.	c #212121",
"L.	c #3B3B3B",
"M.	c #636363",
"N.	c #D1D1D1",
". . . . . . . . . . + . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . @ # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . $ % & . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . * % = . . . . . . . . . . . - . . . . . . . . . . . ; > . . . . . . . . . . . . , . . . . . . . . . . . - - . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . ] ^ / ( _ . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . : < [ } | 1 ] ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . 2 ' . . 3 % / ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . 4 % 5 ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . 6 1 + ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . 7 < 8 @ 5 % 9 . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . 0 < a . b c % d . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . b d e f . . . ' % . . . . . . . . . . . . ) . . . . . . . . . . . ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". g h i j . . . . ' % . . . . . . . . . . . . ) . . . . k l m m m n o ! ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
"p 1 q $ r r r g . ' % . . . . . . . . . . . . ) . . . s t u ] v w r x y ~ . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
"7 i i i i i i : . ' % . . . . . . . . . . . . ) . . p z _ . . . . . l A B . . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . ) . C x D . . . . . . . E F ] . . . . . . . . . . . { . . . . . . . . . . . ) ) . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . G . u H . . . . . . . . I J x K . . . . . . . . . . { . . . . . . . . . . . L G . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { M N . . . . . . . . . { ~ _ $ o . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . P x Q . . . . . . . . . { ~ . & R . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . S T . . . . . . . . . . { ~ . U $ _ . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . 4 V W . . . . . . . . . . { ~ . . K x X . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . Y Z . . . . . . . . . . . { ~ . . . ` n . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . .  .x ... . . . . . . . . . . { ~ . . . +.$ +.. . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . @.n { . . . . . . . . . . . { ~ . . . . #.R . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . x +.{ . . . . . . . . . . . { ~ . . . . X z o . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . $.u . { . . . . . . . . . . . { ~ . . . . . %.&.*.. . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . ` =.. { . . . . . . . . . . . { ~ . . . . . . -.=.. . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . 4 z X . { . . . . . . . . . . . { ~ . . . . . . + t . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . #.;.. . { . . . . . . . . . . . { ~ . . . . . . . >.v . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . u $.. . { . . . . . . . . . . . { ~ . . . . . . . _ t . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . n 2 . ' % . . . . . . . + t k . . { . . . . . . . . . . . { ~ . . . . . . . . t ,.. . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . '.& ).5 . ' % . . . . . . . m #.. . . { . . . . . . . . . . . { ~ . . . . . . . . !.t . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . f % % % ~.. ' % . . . . . . . x W . . . { . . . . . . . . . . . { ~ . . . . . . . . . N ] . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . a 1 @ . ' % . . . . . . s u . . . . { . . . . . . . . . . . { ~ . . . . . . . . . l u k { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . {.].. . ' % . . . . . . %.%.. . . . { . . . . . . . . . . . { ~ . . . . . . . . . . r ^.{ . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . | 6 . U /.% (.. . . . . _.' . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . 4 u :.. . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . + % r . o <.% [.. . . . o $ '.. . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . ^.}.. . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . 7 % |.. . ' % . . . . . ,._.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . o 1.D . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . 2.3.. . . ' % . . . . . 4.=.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . 5.-.. . . . . . . . . . O { . . . . . . . . . . . ",
". . p p 6.} p + . ' % . . . . . _.7.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . 8.t ,.. . . . . . . . . O { . . . . . . . . . . . ",
". 9.i i i i i 0.. ' % . . . . . x +.. . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { C x a.. . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . x . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . ,.u . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . b.t . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . &.4.. . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . ^.T . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . X u c.. . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . m H . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . +.$ p . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . t C . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . +.x _ . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . z X . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . + x _ . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . U x . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . K x H . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . a.f . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . ' &.d.X O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . $.-.. . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . X _.>.e.{ . . . . . . . . . . . ",
". . . . . . . . . ' % . . . M 4.. . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . f.g.h.U . . . . . . . . . . ",
". . . . . . . . . ' % . . . $.,.. . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . i.j.x Y b . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { b.@.x &.~.D . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . U f.m @.. . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . { ~ . . . . . . . . . . . . { . . . . . . . . . . . O { . . . . . . . . . . . ",
". . . . . . . . . ' % . . . . . . . . . . . . { . . . . . . . . . . . k.l.. . . . . . . . . . . . { . . . . . . . . . . . m.n.. . . . . . . 2 C . . ",
". . . . . . . . . ' % i i i i i i i i i i i i o.i i i i i i i i i i i p.q.i i i i i i i i i i i i o.i i i i i i i i i i i | ).i i i i i i i ).< r.~.",
". . . . . . . . . . Y r r r r r r r r r r r r r r r r r r r r r r r r (.p.r r r r r r r r r r r r r r r r r r r r r r r r s.c r r r r r r r t.u.2 . ",
". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 ] . . . . . . . . . . . . . . . . . . . . . . . . + v.. . . . . . . . . . . ",
". . . . '.= ).% w.[.. . . . . . . . . . . . . . . . . . . . . . . . . . x.8 . . . . . . . . . . . . . . . . . . . . . ~.2.[ i c 2 . . . . . . . . . ",
". . . . 2.y.z.p A.< j . . . . . . . . . . . . . . . . . . . . . . b &.B.< C.. . . . . . . . . . . . . . . . . . . . . D.t.[.a 3.1 9.. . . . . . . . ",
". . . p % &.. . + % r . . . . . . . . . . . . . . . . . . . . . . 2 } i % v.. . . . . . . . . . . . . . . . . . . . . 3 . . . &.% p . . . . . . . . ",
". . . E.h . . . ' % r . . . . . . . . . . . . . . . . . . . . . . . . / ).. . . . . . . . . . . . . . . . . . . . . . . . . . F.< 9.. . . . . . . . ",
". . . | * . . . ~.% ~.. . . . . . . . . . . . . . . . . . . . . . . . c G.. . . . . . . . . . . . . . . . . . . . . . . . . + ).E.. . . . . . . . . ",
". . j % &.. . . a H.U . . . . . . . . . . . . . . . . . . . . . . . '.q.x.. . . . . . . . . . . . . . . . . . . . . . . . j h # U . . . . . . . . . ",
". . Y % I.. . . G.D.. . . . . . . . . . . . . . . . . . . . . . . . p % ~.. . . . . . . . . . . . . . . . . . . . . . . n y.J.4 . . . . . . . . . . ",
". . r % ' . . 9.1 8 . . . . . . . . . . . . . . . . . . . . . . . . a 1 o . . . . . . . . . . . . . . . . . . . . . . [.H.<.'.. . . . . . . . . . . ",
". . & % 2 . '.s.K.U . . . . . . . . . . . . . . . . . . . . . . . . d L.. . . . . . . . . . . . . . . . . . . . . |.t.w.r . . . . . . . . . . . . . ",
". . @ 6.).} h y.p . . . . . . . . . . . . . . . . . . . . . . @ / / ).# / Y . . . . . . . . . . . . . . . . . . . M.% J.2.2.2.2.N.. . . . . . . . . ",
". . . 3 F./ a 4 . . . . . . . . . . . . . . . . . . . . . . . |./ / / / / n . . . . . . . . . . . . . . . . . . . 0./ / / / / / 9.. . . . . . . . . "};

static const char* const image3_data[] = { 
"74 77 168 2",
"  	c None",
". 	c #FFFFFF",
"+ 	c #E0E0E0",
"@ 	c #FAFAFA",
"# 	c #363636",
"$ 	c #ABABAB",
"% 	c #000000",
"& 	c #BDBDBD",
"* 	c #737373",
"= 	c #858585",
"- 	c #E6E6E6",
"; 	c #C9C9C9",
"> 	c #939493",
", 	c #808080",
"' 	c #878787",
") 	c #D6D6D6",
"! 	c #969696",
"~ 	c #030303",
"{ 	c #383838",
"] 	c #4C4C4C",
"^ 	c #1A1A1A",
"/ 	c #080808",
"( 	c #C2C2C2",
"_ 	c #EBEBEB",
": 	c #F0F0F0",
"< 	c #8C8C8C",
"[ 	c #7A7A7A",
"} 	c #A3A3A3",
"| 	c #999999",
"1 	c #A1A1A1",
"2 	c #FFE6E6",
"3 	c #FFF0F0",
"4 	c #828282",
"5 	c #949494",
"6 	c #F2F2F2",
"7 	c #474747",
"8 	c #545454",
"9 	c #FF8080",
"0 	c #FFB2B2",
"a 	c #0F0F0F",
"b 	c #B5B5B5",
"c 	c #CFCFCF",
"d 	c #262626",
"e 	c #333333",
"f 	c #DEDEDE",
"g 	c #FDFDFD",
"h 	c #D7D7D7",
"i 	c #B7B7B7",
"j 	c #C4C4C4",
"k 	c #F7F7F7",
"l 	c #CCCCCC",
"m 	c #2E2E2E",
"n 	c #B2B2B2",
"o 	c #DFDFDF",
"p 	c #ACACAC",
"q 	c #ADADAD",
"r 	c #D3D3D3",
"s 	c #CDCDCD",
"t 	c #AAAAAA",
"u 	c #D4D4D4",
"v 	c #A9A9A9",
"w 	c #DBDBDB",
"x 	c #E3E3E3",
"y 	c #E5E5E5",
"z 	c #B1B1B1",
"A 	c #D2D2D2",
"B 	c #EAEAEA",
"C 	c #E2E2E2",
"D 	c #C8C8C8",
"E 	c #AFAFAF",
"F 	c #F5F5F5",
"G 	c #E9E9E9",
"H 	c #B6B6B6",
"I 	c #B9B9B9",
"J 	c #F9F9F9",
"K 	c #B8B8B8",
"L 	c #C0C0C0",
"M 	c #B4B4B4",
"N 	c #EFD9D9",
"O 	c #AAA8A8",
"P 	c #F2DBDB",
"Q 	c #EED6D6",
"R 	c #ABA8A8",
"S 	c #EED8D8",
"T 	c #BCB1B1",
"U 	c #C4B6B6",
"V 	c #C5B7B7",
"W 	c #B6ADAD",
"X 	c #EEEEEE",
"Y 	c #DADADA",
"Z 	c #BEBEBE",
"` 	c #B0B0B0",
" .	c #FBFBFB",
"..	c #C6C6C6",
"+.	c #C5C5C5",
"@.	c #BABABA",
"#.	c #AEAEAE",
"$.	c #D0D0D0",
"%.	c #FCFCFC",
"&.	c #141414",
"*.	c #D8D8D8",
"=.	c #C7C7C7",
"-.	c #575757",
";.	c #3D3D3D",
">.	c #C3C3C3",
",.	c #5E5E5E",
"'.	c #7D6E6E",
").	c #FF9999",
"!.	c #B39D9D",
"~.	c #E69292",
"{.	c #F09393",
"].	c #ADA2A2",
"^.	c #F49999",
"/.	c #FFC2C2",
"(.	c #757575",
"_.	c #918787",
":.	c #F7AEAE",
"<.	c #ABA6A6",
"[.	c #FCB2B2",
"}.	c #C3A0A0",
"|.	c #C7A4A4",
"1.	c #FFD1D1",
"2.	c #EDEDED",
"3.	c #B3B3B3",
"4.	c #666666",
"5.	c #2B2B2B",
"6.	c #BBBBBB",
"7.	c #292929",
"8.	c #E8E8E8",
"9.	c #9C9C9C",
"0.	c #E4E4E4",
"a.	c #E7E7E7",
"b.	c #CACACA",
"c.	c #E4A7A7",
"d.	c #B59F9F",
"e.	c #E6A7A7",
"f.	c #B0A3A3",
"g.	c #C19E9E",
"h.	c #F9B0B0",
"i.	c #CBCBCB",
"j.	c #F4F4F4",
"k.	c #BCBCBC",
"l.	c #707070",
"m.	c #242424",
"n.	c #0A0A0A",
"o.	c #454545",
"p.	c #7D7D7D",
"q.	c #595959",
"r.	c #525252",
"s.	c #5C5C5C",
"t.	c #D9D9D9",
"u.	c #121212",
"v.	c #919191",
"w.	c #8A8A8A",
"x.	c #171717",
"y.	c #A8A8A8",
"z.	c #696969",
"A.	c #9E9E9E",
"B.	c #404040",
"C.	c #616161",
"D.	c #8F8F8F",
"E.	c #4F4F4F",
"F.	c #050505",
"G.	c #4A4A4A",
"H.	c #212121",
"I.	c #3B3B3B",
"J.	c #636363",
"K.	c #D1D1D1",
". . . . . . . . . . + . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . @ # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . $ % & . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . * % = . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . ; > , ' ) . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . ! ~ { ] ^ / ; - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . ( - . . _ % , - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . : % < - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . [ / + - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . } ~ | @ < % 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 . . . ",
". . . . 4 ~ 5 . 6 7 % 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 0 . . . ",
". . 6 8 a b . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". c d e f . . . . - % . . . . . . . . . . . . . . . . . g h i i i j k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
"l / m $ n n n c . - % . . . . . . . . . . . . . . . . o p q ; r s n t u . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
"} e e e e e e ! . - % . . . . . . . . . . . . . . . l v ) . . . . . h t w . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . x t y . . . . . . . 6 z ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . q A . . . . . . . . . B t C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . D E . . . . . . . . . . . ) $ k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . F t G . . . . . . . . . . . . & H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . c I . . . . . . . . . . . . . F $ ) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . : p B . . . . . . . . . . . . . . C t J . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . K L . . . . . . . . . . . . . . . . M j . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % 2 2 2 2 2 2 2 2 2 2 N O P 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 Q R S 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 . . . ",
". . . . . . . . . - % 2 2 2 2 2 2 2 2 2 2 T U 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 V W 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 . . . ",
". . . . . . . . . - % . . . . . . . . . . t X . . . . . . . . . . . . . . . . . . J v k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . Y q . . . . . . . . . . . . . . . . . . . . Z `  .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . M ... . . . . . . . . . . . . . . . . . . . . z ... . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . : v J . . . . . . . . . . . . . . . . . . . . . + p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . +.@.. . . . . . . . . . . . . . . . . . . . . . . #.r . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . q Y . . . . . . . . . . . . . . . . . . . . . . . ) p . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . j ( . - % . . . . . . . + p g . . . . . . . . . . . . . . . . . . . . . . . . p $.. . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . %.& &.< . - % . . . . . . . i +.. . . . . . . . . . . . . . . . . . . . . . . . . *.p . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . b % % % =.. - % . . . . . . . t B . . . . . . . . . . . . . . . . . . . . . . . . . . E ; . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . 5 / @ . - % . . . . . . o q . . . . . . . . . . . . . . . . . . . . . . . . . . . h q g . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . -.;.. . - % . . . . . . Z Z . . . . . . . . . . . . . . . . . . . . . . . . . . . . n >.. . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . ^ [ . F ,.% '.).).).).).!.~.).).).).).).).).).).).).).).).).).).).).).).).).).).).).{.].^.).).).).).).).).).).).).).).).).).).).)./.. . . ",
". . . . + % n . k (.% _.0 0 0 0 :.<.[.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 }.|.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.. . . ",
". . . . } % 2.. . - % . . . . . $.3.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . k p y . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . 4.5.. . . - % . . . . . 6.... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ; z . . . . . . . . . . . . . . . . . . . . . . . ",
". . l l 7.] l + . - % . . . . . 3.u . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  .p $.. . . . . . . . . . . . . . . . . . . . . . ",
". 8.e e e e e 9.. - % . . . . . t X . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . x t 0.. . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . t . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . $.q . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . a.p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ` 6.. . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . >.I . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . J q b.. . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . i A . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . X $ l . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . p x . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . X t ) . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . v J . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . + t ) . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . F t . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . C t A . . . . . . . . . . . . . . . ",
". . . . . . . . . - % 0 0 0 c.d.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 e.f.g.h.0 0 0 0 0 0 0 0 0 1.. . . ",
". . . . . . . . . - % . . . Y z . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . J 3.#.x . . . . . . . . . . . . ",
". . . . . . . . . - % . . . D 6.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . i.p D F . . . . . . . . . . ",
". . . . . . . . . - % . . . Y $.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . j.L t K 6 . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a.k.t ` =.y . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . F i.i k.. . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ",
". . . . . . . . . - % . . . . . . . . . . . . . . . . . . . . . . . . ; l.. . . . . . . . . . . . . . . . . . . . . . . . 1 < . . . . . . . ( x . . ",
". . . . . . . . . - % e e e e e e e e e e e e e e e e e e e e e e e e m.n.e e e e e e e e e e e e e e e e e e e e e e e e ^ &.e e e e e e e &.~ o.=.",
". . . . . . . . . . K n n n n n n n n n n n n n n n n n n n n n n n n p.m.n n n n n n n n n n n n n n n n n n n n n n n n q.7 n n n n n n n r.s.( . ",
". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . : ; . . . . . . . . . . . . . . . . . . . . . . . . + t.. . . . . . . . . . . ",
". . . . %.= &.% u.v.. . . . . . . . . . . . . . . . . . . . . . . . . . w.| . . . . . . . . . . . . . . . . . . . . . =.4.{ e 7 ( . . . . . . . . . ",
". . . . 4.x.y.l z.~ f . . . . . . . . . . . . . . . . . . . . . . 6 ` l.~ A.. . . . . . . . . . . . . . . . . . . . . B.r.v.5 5./ 8.. . . . . . . . ",
". . . l % ` . . + % n . . . . . . . . . . . . . . . . . . . . . . ( ] e % t.. . . . . . . . . . . . . . . . . . . . . _ . . . ` % l . . . . . . . . ",
". . . C.d . . . - % n . . . . . . . . . . . . . . . . . . . . . . . . , &.. . . . . . . . . . . . . . . . . . . . . . . . . . D.~ 8.. . . . . . . . ",
". . . ^ * . . . =.% =.. . . . . . . . . . . . . . . . . . . . . . . . 7 E.. . . . . . . . . . . . . . . . . . . . . . . . . + &.C.. . . . . . . . . ",
". . f % ` . . . 5 F.F . . . . . . . . . . . . . . . . . . . . . . . %.n.w.. . . . . . . . . . . . . . . . . . . . . . . . f d # F . . . . . . . . . ",
". . K % w . . . E.B.. . . . . . . . . . . . . . . . . . . . . . . . l % =.. . . . . . . . . . . . . . . . . . . . . . . j x.G.: . . . . . . . . . . ",
". . n % - . . 8./ | . . . . . . . . . . . . . . . . . . . . . . . . 5 / k . . . . . . . . . . . . . . . . . . . . . . v.F.(.%.. . . . . . . . . . . ",
". . & % ( . %.q.H.F . . . . . . . . . . . . . . . . . . . . . . . . 8 I.. . . . . . . . . . . . . . . . . . . . . 2.r.u.n . . . . . . . . . . . . . ",
". . @ 7.&.] d x.l . . . . . . . . . . . . . . . . . . . . . . @ , , &.# , K . . . . . . . . . . . . . . . . . . . J.% G.4.4.4.4.K.. . . . . . . . . ",
". . . _ D., 5 : . . . . . . . . . . . . . . . . . . . . . . . 2., , , , , j . . . . . . . . . . . . . . . . . . . 9., , , , , , 8.. . . . . . . . . "};

static const char* const image4_data[] = { 
"36 43 4 1",
"# c #000000",
"a c #bfbfbf",
"b c #ff0000",
". c #ffffff",
"....................................",
".........#.....#.....#.....#........",
".....#.#.#.#.#.#.#.#.#.#.#.#........",
".....#.#.#.#.#.#.#.#.#.#.#.#........",
"....##########################......",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#......",
"..###aaaaaaaaaaaaaaaaaaaaaaaa###....",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#......",
"..###aaaaaaaaaaaaaaaaaaaaaaaa###....",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#......",
".####aaaaaaaaaaaaaaaa#aaaaaaa####...",
"....#aaaaaaaaaaaaaaa#a#aaaaaa#......",
"..###aaaaaaaaaaaaaaa#a#aaaaaa###....",
"....#aaaaaaaaaaaaaa#aaa#aaaaa#......",
"..###aaaaaaa#aaaaaa#aaa#aaaaa###....",
"....#aaaaaa#a#aaaa#aaaaa#aaaa#......",
".####aaaaaa#a#aaaa#aaaaa#aaaa####...",
"....#aaaaa#aaa#aa#aaaaaaa#aaa#......",
"..###aaaaa#aaa###aaaaaaaaa######....",
"....#aaaa#aaaaa#aaaaaaaaaaaaa#......",
"..###aaaa#aaaaa#aaaaaaaaaaaaa###....",
"....#aaa#aaaaaaa#aaaaaaaaaaaa#......",
".#######aaaaaaaaa#####aaaaaaa####...",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#......",
"..###aaaaaaaaaaaaaaaaaaaaaaaa###....",
"....#aaaaaaaaaaaaaaaaaaaaaaaa#......",
"....bbbbbbbbbbbbbbbbbbbbbbbbbb......",
"....bbbbbbbbbbbbbbbbbbbbbbbbbb......",
".....b.b.b.b.b.b.b.b.b.b.b.b........",
".....b.b.b.b.b.b.b.b.b.b.b.b........",
".........b.....b.....b.....b........",
"....................................",
"....................................",
"....................................",
"...####.............................",
"...#...#........#..#................",
"...#...#........#..#................",
"...#...#...###..##.##..###..###.##..",
"...####...#...#.#..#..#...#.#..#..#.",
"...#...#..#...#.#..#..#...#.#..#..#.",
"...#...#..#...#.#..#..#...#.#..#..#.",
"...#...#..#...#.#..#..#...#.#..#..#.",
"...####....###...#..#..###..#..#..#."};

static const char* const image5_data[] = { 
"33 43 4 1",
"# c #000000",
"b c #bfbfbf",
"a c #ff0000",
". c #ffffff",
".................................",
".........#.....#.....#.....#.....",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
"....aa########################...",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"..aaaabbbbbbbbbbbbbbbbbbbbbbb###.",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"..aaaabbbbbbbbbbbbbbbbbbbbbbb###.",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
".aaaaabbbbbbbbbbbbbbb#bbbbbbb####",
"....aabbbbbbbbbbbbbb#b#bbbbbb#...",
"..aaaabbbbbbbbbbbbbb#b#bbbbbb###.",
"....aabbbbbbbbbbbbb#bbb#bbbbb#...",
"..aaaabbbbbb#bbbbbb#bbb#bbbbb###.",
"....aabbbbb#b#bbbb#bbbbb#bbbb#...",
".aaaaabbbbb#b#bbbb#bbbbb#bbbb####",
"....aabbbb#bbb#bb#bbbbbbb#bbb#...",
"..aaaabbbb#bbb###bbbbbbbbb######.",
"....aabbb#bbbbb#bbbbbbbbbbbbb#...",
"..aaaabbb#bbbbb#bbbbbbbbbbbbb###.",
"....aabb#bbbbbbb#bbbbbbbbbbbb#...",
".aaaaa##bbbbbbbbb#####bbbbbbb####",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"..aaaabbbbbbbbbbbbbbbbbbbbbbb###.",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"....aabbbbbbbbbbbbbbbbbbbbbbb#...",
"....aa########################...",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
".....#.#.#.#.#.#.#.#.#.#.#.#.....",
".........#.....#.....#.....#.....",
".................................",
".................................",
".................................",
"...#............#................",
"...#...........#..#..............",
"...#...........#..#..............",
"...#......###..##.##.............",
"...#.....#...#.#..#..............",
"...#.....#####.#..#..............",
"...#.....#.....#..#..............",
"...#.....#...#.#..#..............",
"...#####..###..#...#............."};

static const char* const image6_data[] = { 
"34 46 4 1",
"a c #000000",
"b c #bfbfbf",
"# c #ff0000",
". c #ffffff",
"..................................",
"..................................",
".........#.....#.....#.....#......",
".....#.#.#.#.#.#.#.#.#.#.#.#......",
".....#.#.#.#.#.#.#.#.#.#.#.#......",
"....##########################....",
"....##########################....",
"..aaabbbbbbbbbbbbbbbbbbbbbbbbaaa..",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"..aaabbbbbbbbbbbbbbbbbbbbbbbbaaa..",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
".aaaabbbbbbbbbbbbbbbbabbbbbbbaaaa.",
"....abbbbbbbbbbbbbbbababbbbbba....",
"..aaabbbbbbbbbbbbbbbababbbbbbaaa..",
"....abbbbbbbbbbbbbbabbbabbbbba....",
"..aaabbbbbbbabbbbbbabbbabbbbbaaa..",
"....abbbbbbababbbbabbbbbabbbba....",
".aaaabbbbbbababbbbabbbbbabbbbaaaa.",
"....abbbbbabbbabbabbbbbbbabbba....",
"..aaabbbbbabbbaaabbbbbbbbbaaaaaa..",
"....abbbbabbbbbabbbbbbbbbbbbba....",
"..aaabbbbabbbbbabbbbbbbbbbbbbaaa..",
"....abbbabbbbbbbabbbbbbbbbbbba....",
".aaaaaaabbbbbbbbbaaaaabbbbbbbaaaa.",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"..aaabbbbbbbbbbbbbbbbbbbbbbbbaaa..",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"....abbbbbbbbbbbbbbbbbbbbbbbba....",
"....aaaaaaaaaaaaaaaaaaaaaaaaaa....",
".....a.a.a.a.a.a.a.a.a.a.a.a......",
".....a.a.a.a.a.a.a.a.a.a.a.a......",
".........a.....a.....a.....a......",
"..................................",
"..................................",
"..................................",
"...aaaaa..........................",
".....a............................",
".....a............................",
".....a.....aaa..aaaa..............",
".....a....a...a.a...a.............",
".....a....a...a.a...a.............",
".....a....a...a.a...a.............",
".....a....a...a.a...a.............",
".....a.....aaa..aaaa..............",
"................a.................",
"................a................."};

static const char* const image7_data[] = { 
"32 46 4 1",
"# c #000000",
"b c #bfbfbf",
"a c #ff0000",
". c #ffffff",
"................................",
"........#.....#.....#.....#.....",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"...########################aa...",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
".###bbbbbbbbbbbbbbbbbbbbbbbaaaa.",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
".###bbbbbbbbbbbbbbbbbbbbbbbaaaa.",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
"####bbbbbbbbbbbbbbbb#bbbbbbaaaaa",
"...#bbbbbbbbbbbbbbb#b#bbbbbaa...",
".###bbbbbbbbbbbbbbb#b#bbbbbaaaa.",
"...#bbbbbbbbbbbbbb#bbb#bbbbaa...",
".###bbbbbbb#bbbbbb#bbb#bbbbaaaa.",
"...#bbbbbb#b#bbbb#bbbbb#bbbaa...",
"####bbbbbb#b#bbbb#bbbbb#bbbaaaaa",
"...#bbbbb#bbb#bb#bbbbbbb#bbaa...",
".###bbbbb#bbb###bbbbbbbbb##aaaa.",
"...#bbbb#bbbbb#bbbbbbbbbbbbaa...",
".###bbbb#bbbbb#bbbbbbbbbbbbaaaa.",
"...#bbb#bbbbbbb#bbbbbbbbbbbaa...",
"#######bbbbbbbbb#####bbbbbbaaaaa",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
".###bbbbbbbbbbbbbbbbbbbbbbbaaaa.",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
"...#bbbbbbbbbbbbbbbbbbbbbbbaa...",
"...########################aa...",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"....#.#.#.#.#.#.#.#.#.#.#.#.....",
"........#.....#.....#.....#.....",
"................................",
"................................",
"................................",
"..#####...#.......#.............",
"..#....#..........#.....#.......",
"..#....#..........#.....#.......",
"..#....#..#..####.#.##..##......",
"..#####...#.#...#.##..#.#.......",
"..#....#..#.#...#.#...#.#.......",
"..#....#..#.#...#.#...#.#.......",
"..#....#..#.#...#.#...#.#.......",
"..#....#..#..####.#...#..#......",
"................#...............",
"............####................",
"................................"};

#ifndef M_PI
#define M_PI	3.141592653589793238462643 
#endif

axesDialog::axesDialog( QWidget* parent,  const char* name, bool modal, Qt::WFlags fl )
    : QDialog( parent, name, modal, fl )
{
    QPixmap image4( ( const char** ) image4_data );
    QPixmap image5( ( const char** ) image5_data );
    QPixmap image6( ( const char** ) image6_data );
    QPixmap image7( ( const char** ) image7_data );
    if ( !name )
		setName( "axesDialog" );
    setWindowTitle( tr( "QtiPlot - General Plot Options" ) );

    generalDialog = new QTabWidget( this, "generalDialog" );

	initScalesPage();
    initGridPage();
	initAxesPage();
	initFramePage();
	
	GroupBox6 = new Q3ButtonGroup(3,Qt::Horizontal,tr(""),this, "GroupBox6" );
	GroupBox6->setFlat (TRUE);
	
	buttonApply = new QPushButton(GroupBox6, "buttonApply" );
    buttonApply->setText( tr( "&Apply" ) );
	
    buttonOk = new QPushButton(GroupBox6, "buttonOk" );
    buttonOk->setText( tr( "&OK" ) );
    buttonOk->setDefault( TRUE );

    buttonCancel = new QPushButton(GroupBox6, "buttonCancel" );
    buttonCancel->setText( tr( "&Cancel" ) );
	
    Q3VBoxLayout* vlayout = new Q3VBoxLayout(this,5,5, "vlayout");
	vlayout->addWidget(generalDialog);
    vlayout->addWidget(GroupBox6);

	for (int i=0;i<4;i++)
		titles<<"";

	setSizePolicy(QSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed));

// signals and slots connections
connect( buttonOk, SIGNAL( clicked() ), this, SLOT( accept() ) );
connect( buttonCancel, SIGNAL( clicked() ), this, SLOT( reject() ) );
connect( buttonApply, SIGNAL( clicked() ), this, SLOT(updatePlot() ) );
}

void axesDialog::initScalesPage()
{
 	scalesPage = new QWidget( generalDialog, "scalesPage" );
	GroupBox1 = new Q3ButtonGroup( 2,Qt::Horizontal,tr( "" ),scalesPage, "GroupBox1" );

	new QLabel(tr( "From" ), GroupBox1, "TextLabel1_3_3",0 );
    boxStart = new QLineEdit( GroupBox1, "boxStart" );
	
    new QLabel(tr( "To" ), GroupBox1, "TextLabel1_3_2_2",0 );
	boxEnd = new QLineEdit( GroupBox1, "boxEnd" );
	
    boxScaleTypeLabel = new QLabel(tr( "Type" ),GroupBox1, "TextLabel2_3_2",0 );
    boxScaleType = new QComboBox( FALSE, GroupBox1, "boxScaleType" );
	boxScaleType->insertItem(tr( "linear" ) );
    boxScaleType->insertItem(tr( "logarithmic" ) );
	
	new QLabel(QString::null, GroupBox1, "TextLabel1_3_2_2",0 );
	btnInvert = new QCheckBox( GroupBox1, "btnInvert" );
    btnInvert->setText( tr( "Inverted" ) );
	btnInvert->setChecked(FALSE);
		
	GroupBox2 = new Q3ButtonGroup( 2,Qt::Horizontal,tr(""),scalesPage, "GroupBox2" );

    btnStep = new QCheckBox( GroupBox2, "btnStep" );
    btnStep->setText( tr( "Step" ) );
	btnStep->setChecked(TRUE);
	
	Q3HBox  *hbox=new Q3HBox (GroupBox2, "hboxb");
	hbox->setSpacing (5);
	
	boxStep = new QLineEdit( hbox, "boxStep" );
	boxUnit = new QComboBox (hbox, "boxUnit" );
	boxUnit->hide();
	
	btnMinor = new QCheckBox( GroupBox2, "btnMinor" );
    btnMinor->setText( tr( "Major Ticks" ) );
	
	boxMajorValue = new QSpinBox( GroupBox2, "boxMajorValue" );
	boxMajorValue->setDisabled(TRUE);
	
	minorBoxLabel = new QLabel( tr( "Minor Ticks" ),GroupBox2,"TextLabel3_3_2",0 );
	
	boxMinorValue = new QSpinBox( GroupBox2, "boxMinorValue" );
	boxMinorValue->setDisabled(TRUE);

	QPixmap image0( ( const char** ) horizont_scl_xpm );
    QPixmap image1( ( const char** ) vert_scl_xpm );
	
    axesList = new Q3ListBox( scalesPage, "axesList" );
    axesList->insertItem( image0, tr( "Horizontal" ) );
    axesList->insertItem( image1, tr( "Vertical" ) );
	axesList->setCurrentItem (0);
	
	Q3HBoxLayout* hlayout = new Q3HBoxLayout(scalesPage,5,5, "hlayout");
	hlayout->addWidget(axesList);
    hlayout->addWidget(GroupBox1);
	hlayout->addWidget(GroupBox2);

    generalDialog->insertTab( scalesPage, tr( "Scale" ) );
	
//slots connections
connect(btnInvert,SIGNAL(clicked()), this, SLOT(updatePlot()));
connect(axesList,SIGNAL(highlighted(int) ), this, SLOT(updateScale(int) ) );
connect(boxScaleType,SIGNAL(activated(int) ), this, SLOT(updatePlot() ) );

connect(btnStep,SIGNAL(clicked() ), this, SLOT(stepEnabled() ) );
connect(btnMinor,SIGNAL(clicked() ), this, SLOT(stepDisabled() ) );	
}

void axesDialog::initGridPage()
{
gridPage = new QWidget( generalDialog, "gridPage" );
	
	GroupBox3 = new Q3ButtonGroup(3,Qt::Horizontal,tr(""),gridPage, "GroupBox3" );

	new QLabel(tr( "" ), GroupBox3, "TextLabel1_400",0 );
	
    boxMajorGrid = new QCheckBox( GroupBox3, "boxMajorGrid" );
    boxMajorGrid->setText( tr( "Major Grids" ) );
	boxMajorGrid->setChecked(TRUE);

    boxMinorGrid = new QCheckBox( GroupBox3, "boxMinorGrid" );
    boxMinorGrid->setText( tr( "Minor Grids" ) );
	boxMinorGrid->setChecked(FALSE);

	new QLabel(tr( "Line Color" ), GroupBox3, "TextLabel1",0 );
	
	boxColorMajor = new ColorBox( FALSE, GroupBox3);

    boxColorMinor = new ColorBox( FALSE, GroupBox3);
	boxColorMinor->setDisabled(TRUE);
	
	new QLabel(tr( "Line Type" ),GroupBox3, "TextLabel1_3",0 ); 
	
	boxTypeMajor = new QComboBox( FALSE, GroupBox3, "boxTypeMajor" );
	boxTypeMajor->insertItem("_____");
	boxTypeMajor->insertItem("- - -");
	boxTypeMajor->insertItem(".....");
	boxTypeMajor->insertItem("_._._");
	boxTypeMajor->insertItem("_.._..");

    boxTypeMinor = new QComboBox( FALSE, GroupBox3, "boxTypeMinor" );
	boxTypeMinor->insertItem("_____");
	boxTypeMinor->insertItem("- - -");
	boxTypeMinor->insertItem(".....");
	boxTypeMinor->insertItem("_._._");
	boxTypeMinor->insertItem("_.._..");
	boxTypeMinor->setDisabled(TRUE);
	
	new QLabel(tr( "Thickness" ), GroupBox3, "TextLabel1_3_2",0 );
	
	boxWidthMajor = new QSpinBox(1,20,1, GroupBox3, "boxWidthMajor" );
	boxWidthMajor->setValue(1);

    boxWidthMinor = new QSpinBox(1,20,1, GroupBox3, "boxWidthMinor" );
	boxWidthMinor->setValue(1);
	boxWidthMinor->setDisabled(TRUE);

	new QLabel(tr( "Additional lines" ), GroupBox3, "TextLabel1_4",0 );

    boxXLine = new QCheckBox( GroupBox3, "boxXLine" );
    boxXLine->setText( tr( "X=0" ) );
	boxXLine->setDisabled(TRUE);

    boxYLine = new QCheckBox( GroupBox3, "boxYLine" );
    boxYLine->setText( tr( "Y=0" ) );

    QPixmap image2( ( const char** ) image2_data );
    QPixmap image3( ( const char** ) image3_data );

    axesGridList = new Q3ListBox( gridPage, "axesGridList" );
    axesGridList->insertItem( image3, tr( "" ) );
    axesGridList->insertItem( image2, tr( "" ) );
	axesGridList->setCurrentItem(0);
	
	Q3HBoxLayout* hlayout2 = new Q3HBoxLayout(gridPage,5,5, "hlayout2");
	hlayout2->addWidget(axesGridList);
    hlayout2->addWidget(GroupBox3);
	
    generalDialog->insertTab( gridPage, tr( "Grid" ) );
	
	//grid page slot connections
connect(axesGridList,SIGNAL(highlighted(int)),this, SLOT(updateLineBoxes(int)));
connect(axesGridList,SIGNAL(selectionChanged()),this, SLOT(setGridOptions()));
connect(boxMajorGrid,SIGNAL(toggled(bool)), this, SLOT(majorGridEnabled(bool)));
connect(boxMinorGrid,SIGNAL(toggled(bool)), this, SLOT(minorGridEnabled(bool)));
connect(boxColorMajor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
connect(boxColorMinor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
connect(boxTypeMajor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
connect(boxTypeMinor,SIGNAL(activated(int)),this, SLOT(updateGrid(int)));
connect(boxWidthMajor,SIGNAL(valueChanged (int)),this, SLOT(updateGrid(int)));
connect(boxWidthMinor,SIGNAL(valueChanged (int)),this, SLOT(updateGrid(int)));
connect(boxXLine,SIGNAL(clicked()),this, SLOT(updatePlot()));
connect(boxYLine,SIGNAL(clicked()),this, SLOT(updatePlot()));
}

void axesDialog::initAxesPage()
{
	//axes page
	QPixmap image4( ( const char** ) image4_data );
    QPixmap image5( ( const char** ) image5_data );
    QPixmap image6( ( const char** ) image6_data );
    QPixmap image7( ( const char** ) image7_data );

    axesPage = new QWidget( generalDialog);
	
    axesTitlesList = new Q3ListBox(axesPage);
    axesTitlesList->insertItem( image4, QString::null );
    axesTitlesList->insertItem( image5, QString::null );
    axesTitlesList->insertItem( image6, QString::null );
    axesTitlesList->insertItem( image7, QString::null );
	axesTitlesList->setCurrentItem(0);
	axesTitlesList->setSizePolicy(QSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding));
		
	Q3VBox *box = new Q3VBox (axesPage); 
	box->setSpacing(5);
	box->setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed));

	Q3HBox *hbox0 = new Q3HBox (box); 
	hbox0->setSpacing(5);
	hbox0->setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed));

	boxShowAxis = new QCheckBox(tr("Show"), hbox0);
	boxShowAxis->setChecked(TRUE);

	labelBox = new Q3GroupBox (2, Qt::Horizontal, hbox0);
	labelBox->setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Fixed));
	
	QLabel *l = new QLabel(tr( "Title" ), labelBox);
    boxTitle = new Q3TextEdit(labelBox);
	boxTitle->setTextFormat(Qt::PlainText);
	boxTitle->setMaximumHeight(int(1.5*l->height()));

	btnLabelFont = new QPushButton(tr("&Font"), labelBox);

	Q3HBox *editBox = new Q3HBox (labelBox); 
	editBox->setMaximumWidth(280);

	buttonIndice = new QPushButton( editBox); 
    buttonIndice->setPixmap (QPixmap(index_xpm));
	buttonIndice->setMaximumWidth(40);

    buttonExp = new QPushButton( editBox);
    buttonExp->setPixmap (QPixmap(exp_xpm));
	buttonExp->setMaximumWidth(40);

    buttonLowerGreek = new QPushButton(QChar(0x3B1), editBox); 
	buttonLowerGreek->setMaximumWidth(40);

	buttonUpperGreek = new QPushButton(QChar(0x393), editBox); 
	buttonUpperGreek->setMaximumWidth(40);

	QFont font = this->font();
	font.setBold(true);

    buttonB = new QPushButton(tr("B"), editBox); 
    buttonB->setFont(font);
	buttonB->setMaximumWidth(40);

	font = this->font();
	font.setItalic(true);
    buttonI = new QPushButton(tr("It"), editBox);
	buttonI->setFont(font);
	buttonI->setMaximumWidth(40);

	font = this->font();
	font.setUnderline(true);

    buttonU = new QPushButton(tr("U"), editBox);
	buttonU->setFont(font);
	buttonU->setMaximumWidth(40);
	
	Q3HBox  *hbox2=new Q3HBox (box); 
	hbox2->setSpacing(5);
	
	Q3ButtonGroup *GroupBox7 = new Q3ButtonGroup(2,Qt::Horizontal, QString::null, hbox2);

	new QLabel(tr( "Type" ),GroupBox7);	
	boxAxisType= new QComboBox(GroupBox7, "boxAxisType");
	boxAxisType->insertItem(tr("Numeric"));
	boxAxisType->insertItem(tr("Text from table"));
	boxAxisType->insertItem(tr("Day of the week"));
	boxAxisType->insertItem(tr("Month"));
	boxAxisType->insertItem(tr("Time"));
	boxAxisType->insertItem(tr("Date"));
	boxAxisType->insertItem(tr("Column Headings"));

	new QLabel(tr( "Font" ),GroupBox7);
	btnAxesFont = new QPushButton(GroupBox7);
    btnAxesFont->setText( tr( "Axis &Font" ) );	

	new QLabel(tr( "Color" ),GroupBox7);	
	boxAxisColor= new ColorButton(GroupBox7);

	new QLabel(tr( "Ticks" ), GroupBox7);	
	boxTicksType= new QComboBox(GroupBox7);
	boxTicksType->insertItem(tr( "In" ) );
	boxTicksType->insertItem(tr( "Out" ) );
	boxTicksType->insertItem(tr( "Both" ) );
	boxTicksType->insertItem(tr( "None" ) );
	
	new QLabel(tr("Stand-off"), GroupBox7);
	boxBaseline = new QSpinBox(0,1000,1,GroupBox7, "boxBaseline");
	
	Q3ButtonGroup *GroupBox8= new Q3ButtonGroup(2,Qt::Horizontal,tr(""), hbox2, "GroupBox8" );
	
	new QLabel(QString::null, GroupBox8);	
	boxShowLabels = new QCheckBox(GroupBox8, "boxShowLabels");
	boxShowLabels->setText(tr("Show Labels"));
	boxShowLabels->setChecked(TRUE);
	
	label1 = new QLabel(tr("Table"),GroupBox8);	
	boxColName = new QComboBox(GroupBox8, "Datasheet");

	labelTable = new QLabel(tr("Table"),GroupBox8);	
	boxTableName = new QComboBox(GroupBox8, "boxTableName");

	label2 = new QLabel(tr( "Format" ),GroupBox8);	
	boxFormat = new QComboBox(GroupBox8, "boxFormat");
	boxFormat->setDuplicatesEnabled(false);
	
	label3 = new QLabel(tr( "Precision" ),GroupBox8);		
	boxPrecision= new QSpinBox(0,10,1,GroupBox8);
	
	new QLabel(tr( "Angle" ),GroupBox8);		
	boxAngle = new QSpinBox(-90,90,5,GroupBox8);

	boxShowFormula = new QCheckBox(tr( "For&mula" ),GroupBox8);		
	boxFormula = new Q3TextEdit(GroupBox8);
	boxFormula->setTextFormat(Qt::PlainText);
	boxFormula->setMaximumHeight(int(1.5*l->height()));
	boxFormula->hide();

	Q3HBoxLayout* hlayout3 = new Q3HBoxLayout(axesPage, 5, 5);
	hlayout3->addWidget(axesTitlesList);
    hlayout3->addWidget(box);

	generalDialog->insertTab( axesPage, tr( "Axis" ) );

//signals and slots connections
connect(btnLabelFont, SIGNAL(clicked()), this, SLOT(customAxisLabelFont()));

connect(generalDialog,SIGNAL(currentChanged ( QWidget * )), this, SLOT(tabPageChanged(QWidget *)));	
connect(axesTitlesList,SIGNAL(highlighted(int)), this, SLOT(updateShowBox(int) ) );	
connect(axesTitlesList,SIGNAL(highlighted(int)), this, SLOT(updateAxisColor(int)));
connect(axesTitlesList,SIGNAL(highlighted(int)), this, SLOT(updateTitleBox(int) ) );
connect(axesTitlesList,SIGNAL(highlighted(int)), this, SLOT(setTicksType(int) ) );
connect(axesTitlesList,SIGNAL(highlighted(int)), this, SLOT(setAxisType(int) ) );
connect(axesTitlesList,SIGNAL(highlighted(int)), this, SLOT(setBaselineDist(int) ) );

connect(boxShowLabels,SIGNAL(clicked()), this, SLOT(updateTickLabelsList()));
connect(boxAxisColor, SIGNAL(clicked()), this, SLOT(pickAxisColor()));
connect(boxShowFormula, SIGNAL(clicked()), this, SLOT(showFormulaBox()));

connect(boxTicksType,SIGNAL(activated(int)), this, SLOT(updateTicksType(int)));
connect(boxShowAxis,SIGNAL(clicked()), this, SLOT(showAxis()));
connect(boxFormat, SIGNAL(activated(int) ), this, SLOT(setLabelsNumericFormat(int) ) );
connect(axesTitlesList,SIGNAL(highlighted(int) ), this, SLOT(updateLabelsFormat(int) ) );

connect(btnAxesFont, SIGNAL(clicked()), this, SLOT(customAxisFont()));	
connect(boxBaseline, SIGNAL(valueChanged(int)), this, SLOT(changeBaselineDist(int)));
connect(boxAxisType,SIGNAL(activated(int) ), this, SLOT(showAxisFormatOptions(int)));
connect(boxPrecision,SIGNAL(valueChanged(int) ), this, SLOT(setLabelsNumericFormat(int)));

connect( buttonExp, SIGNAL( clicked() ), this, SLOT(addExp() ) );
connect( buttonIndice, SIGNAL( clicked() ), this, SLOT(addIndex() ) );
connect( buttonU, SIGNAL( clicked() ), this, SLOT(addUnderline() ) );
connect( buttonI, SIGNAL( clicked() ), this, SLOT(addItalic() ) );
connect( buttonB, SIGNAL( clicked() ), this, SLOT(addBold() ) );
connect(buttonLowerGreek, SIGNAL(clicked()), this, SLOT(showLowerGreek()));
connect(buttonUpperGreek, SIGNAL(clicked()), this, SLOT(showUpperGreek()));
}

void axesDialog::initFramePage()
{
frame = new QWidget( generalDialog, "frame" );
Q3VBox *vbox = new Q3VBox(frame, "vbox");
boxFramed = new Q3ButtonGroup(2,Qt::Horizontal,tr("Canvas frame"), vbox, "GroupBox5" );
boxFramed->setCheckable (true);
	
new QLabel(tr( "Color" ), boxFramed, "TextLabel1_53",0 );
boxFrameColor= new ColorButton(boxFramed);

new QLabel(tr( "Width" ), boxFramed, "TextLabel1_54",0 );
boxFrameWidth= new QSpinBox(boxFramed);
boxFrameWidth->setMinValue(1);

Q3ButtonGroup *GroupBox55 = new Q3ButtonGroup(2,Qt::Horizontal,tr("Background"), vbox, "GroupBox5" );
	
new QLabel(tr( "Color" ),GroupBox55, "TextLabel1_53",0 );
boxBackgroundColor= new ColorButton(GroupBox55);
	
new QLabel(tr( "Border Width" ),GroupBox55, "TextLabel1_54",0 );
boxBorderWidth= new QSpinBox(GroupBox55);

new QLabel(tr("Border Color" ),GroupBox55, "TextLabel1_53",0 );
boxBorderColor= new ColorButton(GroupBox55);

Q3VBox *vbox2 = new Q3VBox(frame, "vbox2");
vbox2->setSpacing(5);

Q3ButtonGroup *GroupBox6 = new Q3ButtonGroup(2,Qt::Horizontal,tr("Axes"),vbox2, "GroupBox6" );

boxBackbones = new QCheckBox(GroupBox6, "boxBackbones" );
boxBackbones->setText( tr( "Draw backbones" ) );

new QLabel(tr( "" ),GroupBox6, "TextLabel1_522",0 );

new QLabel(tr( "Line Width" ),GroupBox6, "TextLabel1_52",0 );
boxAxesLinewidth = new QSpinBox(1, 100, 1, GroupBox6);

new QLabel(tr( "Major ticks length" ),GroupBox6, "TextLabel1_5211",0 );
boxMajorTicksLength = new QSpinBox(0, 1000, 1, GroupBox6, "boxMajorTicksLength");

new QLabel(tr( "Minor ticks length" ),GroupBox6, "TextLabel1_521",0 );
boxMinorTicksLength = new QSpinBox(0, 1000, 1, GroupBox6, "boxMajorTicksLength");

Q3ButtonGroup *GroupBox66 = new Q3ButtonGroup(2,Qt::Horizontal,tr(""),vbox2, "GroupBox6" );
new QLabel(tr( "Margin" ),GroupBox66, "TextLabel1_541",0 );
boxMargin= new QSpinBox(0, 1000, 5, GroupBox66);

boxAll = new QCheckBox(tr("Apply to all layers"), GroupBox66);

Q3HBoxLayout* hlayout4 = new Q3HBoxLayout(frame,5,5, "hlayout4");
hlayout4->addWidget(vbox);
hlayout4->addWidget(vbox2);

generalDialog->insertTab(frame, tr( "General" ) );
	
//frame page slot connections
connect(boxMargin, SIGNAL(valueChanged (int)), this, SLOT(changeMargin(int)));
connect(boxBorderColor, SIGNAL(clicked()), this, SLOT(pickBorderColor()));
connect(boxBackgroundColor, SIGNAL(clicked()), this, SLOT(pickBackgroundColor()));
connect(boxBorderWidth,SIGNAL(valueChanged (int)), this, SLOT(updateBorder(int)));
connect(boxFrameColor, SIGNAL(clicked()), this, SLOT(pickCanvasFrameColor()));
connect(boxFramed,SIGNAL(toggled(bool)), this, SLOT(drawFrame(bool)));
connect(boxFramed,SIGNAL(toggled(bool)), this, SLOT(updateBackbones(bool)));
connect(boxFrameWidth,SIGNAL(valueChanged (int)),this, SLOT(updateFrame(int)));
connect(boxAxesLinewidth,SIGNAL(valueChanged (int)), this, SLOT(changeAxesLinewidth(int)));
connect(boxBackbones,SIGNAL(toggled(bool)), this, SLOT(drawAxesBackbones(bool)));
connect(boxMajorTicksLength,SIGNAL(valueChanged (int)),this, SLOT(changeMajorTicksLength(int)));
connect(boxMinorTicksLength,SIGNAL(valueChanged (int)),this, SLOT(changeMinorTicksLength(int)));
}

void axesDialog::changeMinorTicksLength (int minLength)
{
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->changeTicksLength(minLength, boxMajorTicksLength->value());
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->changeTicksLength(minLength, boxMajorTicksLength->value());
	}	

boxMajorTicksLength->setMinValue(minLength);
}

void axesDialog::changeMajorTicksLength (int majLength)
{
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->changeTicksLength(boxMinorTicksLength->value(), majLength);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->changeTicksLength(boxMinorTicksLength->value(), majLength);
	}	

boxMinorTicksLength->setMaxValue(majLength);
}

void axesDialog::drawAxesBackbones(bool draw)
{
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->drawAxesBackbones(draw);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->drawAxesBackbones(draw);
	}
}

void axesDialog::changeAxesLinewidth(int width)
{
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->setAxesLinewidth(width);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->setAxesLinewidth(width);
	}
}

void axesDialog::changeMargin(int width)
{
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->changeMargin(width);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->changeMargin(width);
	}
}

void axesDialog::drawFrame(bool framed)
{	
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->drawCanvasFrame(framed, boxFrameWidth->value(), boxFrameColor->color());
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->drawCanvasFrame(framed, boxFrameWidth->value(), boxFrameColor->color());
	}
}

void axesDialog::updateFrame(int width)
{	
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->drawCanvasFrame(boxFramed->isChecked(), width, boxFrameColor->color());
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->drawCanvasFrame(boxFramed->isChecked(), width, boxFrameColor->color());
	}
}

void axesDialog::updateBorder(int width)
{
if (generalDialog->currentPage() != frame)
	return;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->drawBorder(width, boxBorderColor->color());
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->drawBorder(width, boxBorderColor->color());
	}
}

void axesDialog::pickBackgroundColor()
{
QColor c = QColorDialog::getColor(boxBackgroundColor->color(), this);
if ( !c.isValid() || c == boxBackgroundColor->color() )
	return;

boxBackgroundColor->setColor ( c ) ;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->setBackgroundColor(c);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->setBackgroundColor(c);
	}

if (c == QColor(Qt::white) && mPlot->hasOverlapingLayers())
	mPlot->updateTransparency();
}

void axesDialog::pickBorderColor()
{
QColor c = QColorDialog::getColor(boxBorderColor->color(), this);
if ( !c.isValid() || c == boxBorderColor->color() )
	return;

boxBorderColor->setColor ( c ) ;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->drawBorder(boxBorderWidth->value(), c);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->drawBorder(boxBorderWidth->value(), c);
	}
}

void axesDialog::pickCanvasFrameColor()
{
QColor c = QColorDialog::getColor(boxFrameColor->color(), this);
if ( !c.isValid() || c == boxFrameColor->color() )
	return;

boxFrameColor->setColor ( c ) ;

if (boxAll->isChecked())
	{
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			g->drawCanvasFrame(boxFramed->isChecked(), boxFrameWidth->value(), c);
		}
	}
else
	{
	Graph* g = (Graph*)mPlot->activeGraph();
	if (g)
		g->drawCanvasFrame(boxFramed->isChecked(), boxFrameWidth->value(), c);
	}
}

void axesDialog::updateBackbones (bool on)
{
boxBackbones->setChecked(!on);
}

void axesDialog::showAxisFormatOptions(int format)
{
int axis=mapToQwtAxisId();

boxFormat->clear();
boxFormat->setEditable(false);
boxFormat->hide();
boxPrecision->hide();
boxColName->hide();
label1->hide();
label2->hide();
label3->hide();
boxShowFormula->hide();
boxFormula->hide();
boxTableName->hide();
labelTable->hide();
switch (format)
	{
	case 0:
		label2->show();
		boxFormat->show();
		boxFormat->insertItem(tr( "Automatic" ) );
		boxFormat->insertItem(tr( "Decimal: 100.0" ) );
		boxFormat->insertItem(tr( "Scientific: 1e2" ) );
		boxFormat->insertItem(tr( "Scientific: 10^2" ) );
	
		boxFormat->setCurrentItem (labelsNumericFormat[2*axis].toInt());
	
		label3->show();
		boxPrecision->show();
		boxShowFormula->show();

		showAxisFormula(mapToQwtAxisId());
	break;

	case 1:
		label1->show();
		boxColName->show();
	break;

	case 2:
	break;

	case 3:
	break;
	
	case 4:
			{
			label2->show();
			boxFormat->show();
			boxFormat->setEditable(true);
	
			QStringList lst = QStringList::split(";", formatInfo[axis], false);
			if (!lst[1].isEmpty())
				{
				boxFormat->insertItem(lst[1]);
				boxFormat->setCurrentText(lst[1]);
				}

			boxFormat->insertItem("h");
			boxFormat->insertItem("h ap");
			boxFormat->insertItem("h AP");
			boxFormat->insertItem("h:mm");
			boxFormat->insertItem("h:mm ap");
			boxFormat->insertItem("hh:mm");
			boxFormat->insertItem("h:mm:ss");
			boxFormat->insertItem("h:mm:ss.zzz");
			boxFormat->insertItem("mm:ss");
			boxFormat->insertItem("mm:ss.zzz");
			boxFormat->insertItem("hmm");
			boxFormat->insertItem("hmmss");
			boxFormat->insertItem("hhmmss");		
			}
	break;

	case 5:
		{
		label2->show();
		boxFormat->show();
		boxFormat->setEditable(true);

		QStringList lst = QStringList::split(";", formatInfo[axis], false);
		if (!lst[1].isEmpty())
			{
			boxFormat->insertItem(lst[1]);
			boxFormat->setCurrentText(lst[1]);
			}
		boxFormat->insertItem("yyyy-MM-dd");
		boxFormat->insertItem("dd.MM.yyyy");
		boxFormat->insertItem("ddd MMMM d yy");
		boxFormat->insertItem("dd/MM/yyyy");
		}
	break;

	case 6:
		{
		labelTable->show();
		if (tablesList.contains(formatInfo[axis]))
			boxTableName->setCurrentText(formatInfo[axis]);
		boxTableName->show();
		}
	break;
	}
}

void axesDialog::insertColList(const QStringList& cols)
{
boxColName-> insertStringList(cols);
}

void axesDialog::insertTablesList(const QStringList& l)
{
tablesList = l;
boxTableName->insertStringList(l);
}

void axesDialog::updateAxisType(int)
{
int a=mapToQwtAxisId();
boxAxisType->setCurrentItem(a);
}

void axesDialog::setEnabledAxes(Q3MemArray<bool> ok)
{
xAxisOn=ok[2];
yAxisOn=ok[0];
topAxisOn=ok[3];
rightAxisOn=ok[1];
}

void axesDialog::showAxis()
{
bool ok=boxShowAxis->isChecked();
boxTitle->setEnabled(ok);
boxAxisColor->setEnabled(ok);
btnAxesFont->setEnabled(ok);
boxShowLabels->setEnabled(ok);
boxTicksType->setEnabled(ok);
boxAxisType->setEnabled(ok);
boxBaseline->setEnabled(ok);
labelBox->setEnabled(ok);

int axis=-1;
int a=axesTitlesList->currentItem();	
switch(a)   
        {
        case 0:
            {
            axis = QwtPlot::xBottom;
			xAxisOn=ok;
            break;
            }
        case 1:
            {
            axis = QwtPlot::yLeft;
			yAxisOn=ok;
            break;
            }
        case 2:
            {
            axis = QwtPlot::xTop;
			topAxisOn=ok;
			break;
            }
       case 3:
            {
            axis = QwtPlot::yRight;
			rightAxisOn=ok;
            break;
            }
		}

bool labels=FALSE;
if (tickLabelsOn[axis] == "1")
	labels=TRUE;

boxFormat->setEnabled(labels && ok);
boxColName->setEnabled(labels && ok);
boxShowFormula->setEnabled(labels && ok);
boxFormula->setEnabled(labels && ok);

if (axis == QwtPlot::xBottom || axis == QwtPlot::xTop)
	boxAngle->setEnabled(labels && ok);
else 
	boxAngle->setDisabled(true);

bool userFormat=TRUE;
if (boxFormat->currentItem() == 0)
	userFormat=FALSE;
boxPrecision->setEnabled(labels && ok && userFormat);
	
QString formula =  boxFormula->text().remove("\n");
if (!boxShowFormula->isChecked())
	formula = QString::null;
emit showAxis(axis,boxAxisType->currentItem(), boxColName->currentText(),ok,ticksType(),
			  boxShowLabels->isChecked(), QColor(axesColors[axis]), boxFormat->currentItem(), 
			  boxPrecision->value(), boxAngle->value(), boxBaseline->value(), formula);
}

void axesDialog::updateShowBox(int axis)
{
switch(axis)   
        {
        case 0:
            {
			boxShowAxis->setChecked(xAxisOn);
			int labelsOn=tickLabelsOn[2].toInt();
			boxShowLabels->setChecked(labelsOn);
			boxAngle->setEnabled(labelsOn && xAxisOn);
			boxFormat->setEnabled(labelsOn && xAxisOn);
			boxAngle->setValue(xBottomLabelsRotation);	
            break;
            }
         case 1:
            {
			boxShowAxis->setChecked(yAxisOn);
			int labelsOn=tickLabelsOn[0].toInt();
			boxShowLabels->setChecked(labelsOn);
			boxFormat->setEnabled(labelsOn && yAxisOn);
            boxAngle->setEnabled(false);
			boxAngle->setValue(0);
            break;
            }
         case 2:
            {
			boxShowAxis->setChecked(topAxisOn);
				
			int labelsOn=tickLabelsOn[3].toInt();
			boxShowLabels->setChecked(labelsOn);
			boxFormat->setEnabled(labelsOn && topAxisOn);
			boxAngle->setEnabled(labelsOn && topAxisOn);
			boxAngle->setValue(xTopLabelsRotation);
            break;
            }
         case 3:
            {
			boxShowAxis->setChecked(rightAxisOn);
			int labelsOn=tickLabelsOn[1].toInt();
			boxShowLabels->setChecked(labelsOn );
			boxFormat->setEnabled(labelsOn && rightAxisOn);
            boxAngle->setEnabled(false);
			boxAngle->setValue(0);
            break;
            }
	}

bool ok=boxShowAxis->isChecked();
boxTitle->setEnabled(ok);
boxAxisColor->setEnabled(ok);
btnAxesFont->setEnabled(ok);
boxShowLabels->setEnabled(ok);
boxTicksType->setEnabled(ok);
boxAxisType->setEnabled(ok);
boxBaseline->setEnabled(ok);
labelBox->setEnabled(ok);	
}

void axesDialog::initAxisFonts(const QFont& xB, const QFont& yL, const QFont& xT, const QFont& yR )
{
xBottomFont=xB;
yLeftFont=yL;
xTopFont=xT;
yRightFont=yR;	
}

void axesDialog::customAxisFont()
{
bool okF;
int axis=-1;
QFont fnt;
switch(axesTitlesList->currentItem())   
        {
            case 0:
            {
                axis = QwtPlot::xBottom;
				fnt = QFontDialog::getFont( &okF, xBottomFont,this);
				if (okF)
						xBottomFont=fnt;
                break;
            }
            case 1:
            {
                axis = QwtPlot::yLeft;
				fnt = QFontDialog::getFont( &okF, yLeftFont,this);
				if (okF)
						yLeftFont=fnt;
                break;
            }
            case 2:
            {
                axis = QwtPlot::xTop;
				fnt = QFontDialog::getFont( &okF, xTopFont, this);
				if (okF)
						xTopFont=fnt;
                break;
            }
            case 3:
            {
                axis = QwtPlot::yRight;
				fnt = QFontDialog::getFont( &okF, yRightFont, this);
				if (okF)
						yRightFont=fnt;
                break;
            }
		}
		
emit changeAxisFont(axis,fnt);
}

void axesDialog::accept()
{
if (updatePlot())
	close();
}

void axesDialog::tabPageChanged(QWidget *w)
{
axesTitlesList->clearSelection();
axesList->clearSelection();
axesGridList->clearSelection();

if (w==(QWidget*)axesPage)
	axesTitlesList->setSelected (0,TRUE);
else if (w==(QWidget*)scalesPage)
	axesList->setSelected (0,TRUE);
else
	axesGridList->setSelected (0,TRUE);
}

void axesDialog::updateLineBoxes(int axis)
{
if (axis) 
	{
	boxXLine->setEnabled(TRUE);
	boxYLine->setDisabled(TRUE);
	}
else
	{
	boxXLine->setDisabled(TRUE);
	boxYLine->setEnabled(TRUE);
	}
}

void axesDialog::majorGridEnabled(bool on)
{
boxMinorGrid->setEnabled(on);

boxTypeMajor->setEnabled(on);
boxColorMajor->setEnabled(on);
boxWidthMajor->setEnabled(on);

if (generalDialog->currentPage()==gridPage)	
	{
	d_graph->setGridOptions(getGridOptions());
	d_graph->replot();
	}
}

void axesDialog::minorGridEnabled(bool on)
{
boxTypeMinor->setEnabled(on);
boxColorMinor->setEnabled(on);
boxWidthMinor->setEnabled(on);

if (generalDialog->currentPage()==gridPage)		
	{
	d_graph->setGridOptions(getGridOptions());
	d_graph->replot();
	}
}

void axesDialog::stepEnabled()
{
boxStep->setEnabled(btnStep->isChecked ());
boxUnit->setEnabled(btnStep->isChecked ());
boxMinorValue->setDisabled(btnStep->isChecked ());
boxMajorValue->setDisabled(btnStep->isChecked ());
btnMinor->setChecked(!btnStep->isChecked ());
}

void axesDialog::stepDisabled()
{
boxStep->setDisabled(btnMinor->isChecked ());
boxUnit->setDisabled(btnMinor->isChecked ());
boxMinorValue->setEnabled(btnMinor->isChecked ());
boxMajorValue->setEnabled(btnMinor->isChecked ());
btnStep->setChecked(!btnMinor->isChecked ());
}

QStringList axesDialog::scaleLimits(int axis, double start, double end, double step, 
																const QString& majors, const QString&minors)
{
scales[8*axis+0]=QString::number(start);
scales[8*axis+1]=QString::number(end);
	
int qwt_axis = 2;
if (axis == 1)
	qwt_axis = 0;
	
if (axesType[qwt_axis] == Graph::Time)
	{
	int miliseconds;
	switch (boxUnit->currentItem())
		{
		case 0:
			miliseconds = (int)step;
		break;
		
		case 1:
			miliseconds = int(step*1e3);
		break;
		
		case 2:
			miliseconds = int(step*6e4);
		break;
		
		case 3:
			miliseconds = int(step*36e5);
		break;
		}
	scales[8*axis+2]=QString::number(miliseconds);	
	}
else if (axesType[qwt_axis] == Graph::Date)
	{
	int days;
	switch (boxUnit->currentItem())
		{
		case 0:
			days = (int)step;
		break;
		
		case 1:
			days = int(step*7);
		break;
		}
		
	scales[8*axis+2]=QString::number(days);	
	}
else	
	scales[8*axis+2]=QString::number(step);	

scales[8*axis+3]=majors;
scales[8*axis+4]=minors;
scales[8*axis+5]=QString::number(btnStep->isChecked());
scales[8*axis+6]=QString::number(boxScaleType->currentItem());
scales[8*axis+7]=QString::number(btnInvert->isChecked());
return scales;
}

void axesDialog::setGridOptions()
{
putGridOptions(grid);
}

void axesDialog::putGridOptions(gridOptions gr)
{
if (axesGridList->currentItem())
{
boxMajorGrid->setChecked(gr.majorOnX);
boxMinorGrid->setChecked(gr.minorOnX);
}
else
{
boxMajorGrid->setChecked(gr.majorOnY);
boxMinorGrid->setChecked(gr.minorOnY);
}

boxTypeMajor->setCurrentItem(gr.majorStyle);
boxColorMajor->setCurrentItem(gr.majorCol);
boxWidthMajor->setValue(gr.majorWidth);
boxTypeMinor->setCurrentItem(gr.minorStyle);
boxColorMinor->setCurrentItem(gr.minorCol);
boxWidthMinor->setValue(gr.minorWidth);
boxXLine->setChecked(gr.xZeroOn);
boxYLine->setChecked(gr.yZeroOn);

grid =gr;
}

gridOptions axesDialog::getGridOptions()
{
if (boxMajorGrid->isChecked() && axesGridList->currentItem())
	grid.majorOnX=1;
else if (!boxMajorGrid->isChecked() && axesGridList->currentItem())
	grid.majorOnX=0;
else if (boxMajorGrid->isChecked() && axesGridList->currentItem()==0)
	grid.majorOnY=1;
else 
	grid.majorOnY=0;

grid.majorStyle=boxTypeMajor->currentItem();
grid.majorCol=boxColorMajor->currentItem();
grid.majorWidth=boxWidthMajor->value();

if (boxMinorGrid->isChecked() && axesGridList->currentItem())
	grid.minorOnX=1;
else if (!boxMinorGrid->isChecked() && axesGridList->currentItem())
	grid.minorOnX=0;
else if (boxMinorGrid->isChecked() && axesGridList->currentItem()==0)
	grid.minorOnY=1;
else 
	grid.minorOnY=0;

grid.minorStyle=boxTypeMinor->currentItem();
grid.minorCol=boxColorMinor->currentItem();
grid.minorWidth=boxWidthMinor->value();

if (boxXLine->isChecked())
	grid.xZeroOn=1;
else grid.xZeroOn=0;

if (boxYLine->isChecked())
	grid.yZeroOn=1;
else grid.yZeroOn=0;

return grid;
}

void axesDialog::setAxesColors(const QStringList& colors)
{
axesColors=colors;
}

void axesDialog::updateAxisColor(int)
{
int a=mapToQwtAxisId();
setAxisColor(QColor(axesColors[a]));
}

void axesDialog::setAxisColor(const QColor& c)
{
  boxAxisColor->setColor(c);
}

void axesDialog::setScaleLimits(const QStringList& limits)
{
scales=limits;
}

void axesDialog::changeBaselineDist(int baseline)
{
	int axis=mapToQwtAxisId();
	axesBaseline[axis] = baseline;

	int at=axesTitlesList->currentItem();
	QString title=boxTitle->text();
	if (titles[at] != title)
		{
		emit updateAxisTitle(at,title);
		titles[at] = title;
		}

QString formula =  boxFormula->text().remove("\n");
if (!boxShowFormula->isChecked())
	formula = QString::null;
emit showAxis(axis, boxAxisType->currentItem(), formatInfo[axis], boxShowAxis->isChecked(),ticksType(), 
				  boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentItem(), boxPrecision->value(), 
				  boxAngle->value(), baseline, formula);	
}

bool axesDialog::updatePlot()
{
int axis=axesList->currentItem();
if (generalDialog->currentPage()==(QWidget*)scalesPage)
	{
	QString from=boxStart->text().lower();
    QString to=boxEnd->text().lower();
	QString step=boxStep->text().lower();			
	double start, end, stp;
    bool error=FALSE;	
	try
		{
		myParser parser;
		parser.SetExpr(from.ascii());
		start=parser.Eval();
		}
	catch(mu::ParserError &e)
		{
		QMessageBox::critical(0, tr("QtiPlot - Start limit error"),QString::fromStdString(e.GetMsg()));
		boxStart->setFocus();
		error=TRUE;
		return FALSE;
		}			
	try
		{
		myParser parser;	
		parser.SetExpr(to.ascii());
		end=parser.Eval();
		}
	catch(mu::ParserError &e)
		{
		QMessageBox::critical(0, tr("QtiPlot - End limit error"),QString::fromStdString(e.GetMsg()));
		boxEnd->setFocus();
		error=TRUE;
		return FALSE;
		}	
	try
		{
		myParser parser;	
		parser.SetExpr(step.ascii());
		stp=parser.Eval();
		}
	catch(mu::ParserError &e)
		{
		QMessageBox::critical(0, tr("QtiPlot - Step input error"),QString::fromStdString(e.GetMsg()));
		boxStep->setFocus();
		error=TRUE;
		return FALSE;
		}
		
	if (stp <=0)
		{
		QMessageBox::critical(0,tr("QtiPlot - Step input error"),
			tr("Please enter a positive step value!"));
		boxStep->setFocus();
		return FALSE;	
		}
			
	if (!error)
		{
		d_graph->setScaleDiv(axis, scaleLimits(axis, start, end, stp, boxMajorValue->text(), boxMinorValue->text()));
		d_graph->replot();
		}
	}
else if (generalDialog->currentPage()==gridPage)
	{
	d_graph->setGridOptions(getGridOptions());
	d_graph->replot();
	}
else if (generalDialog->currentPage()==(QWidget*)axesPage)
	{	
	axis=mapToQwtAxisId();
	int format = boxAxisType->currentItem();
	axesType[axis] = format;

	int baseline = boxBaseline->value();
	axesBaseline[axis] = baseline;

	if (format == Graph::Numeric)
		{
		if (boxShowFormula->isChecked())
			{
			QString formula = boxFormula->text().lower();
			try
				{
				double value = 1.0;
				myParser parser;
				if (formula.contains("x"))
					parser.DefineVar("x", &value);
				else if (formula.contains("y"))
					parser.DefineVar("y", &value);
				parser.SetExpr(formula.ascii());
				parser.Eval();
				}
			catch(mu::ParserError &e)
				{
				QMessageBox::critical(0, tr("QtiPlot - Formula input error"), QString::fromStdString(e.GetMsg())+"\n"+
					tr("Valid variables are 'x' for Top/Bottom axes and 'y' for Left/Right axes!"));
				boxFormula->setFocus();
				return FALSE;
				}
			}
		}
	else if (format == Graph::Time || format == Graph::Date)
		{
		QStringList lst = QStringList::split(";", formatInfo[axis], false);			
		lst[1] = boxFormat->currentText();
		formatInfo[axis]  = lst.join(";");
		}
	else if (format == Graph::ColHeader)
		formatInfo[axis] = boxTableName->currentText();
	else
		formatInfo[axis] = boxColName->currentText();

	int at=axesTitlesList->currentItem();
	QString title=boxTitle->text();
	if (titles[at] != title)
		{
		emit updateAxisTitle(at,title);
		titles[at] = title;
		}
		
	if (axis == QwtPlot::xBottom)
		xBottomLabelsRotation=boxAngle->value();
	else if (axis == QwtPlot::xTop)
		xTopLabelsRotation=boxAngle->value();
	
	QString formula =  boxFormula->text().remove("\n");
	if (!boxShowFormula->isChecked())
		formula = QString::null;
	emit showAxis(axis, format, formatInfo[axis], boxShowAxis->isChecked(), ticksType(), 
				  boxShowLabels->isChecked(), boxAxisColor->color(), boxFormat->currentItem(), 
				  boxPrecision->value(), boxAngle->value(), baseline, formula);	
	}
else if (generalDialog->currentPage()==(QWidget*)frame)
	{
	if (!boxAll->isChecked())
		return true;
	
	QColor c = boxBackgroundColor->color();
	QWidgetList* allPlots = mPlot->graphPtrs();
	for (int i=0; i<(int)allPlots->count();i++)
		{
		Graph* g=(Graph*)allPlots->at(i);
		if (g)
			{
			g->setAxesLinewidth(boxAxesLinewidth->value());
			g->drawBorder(boxBorderWidth->value(), boxBorderColor->color());
			g->changeTicksLength(boxMinorTicksLength->value(), boxMajorTicksLength->value());
			g->drawCanvasFrame(boxFramed->isChecked(), boxFrameWidth->value(), boxFrameColor->color());
			g->drawAxesBackbones(boxBackbones->isChecked());
			g->changeMargin(boxMargin->value());
			g->setBackgroundColor(c);
			}
		}
	if (c == QColor(Qt::white) && mPlot->hasOverlapingLayers())
		mPlot->updateTransparency();
	}

return TRUE;
}

void axesDialog::setMultiLayerPlot(MultiLayer *m)
{
mPlot = m;
d_graph = (Graph*)mPlot->activeGraph();
Plot *p = d_graph->plotWidget();
	
boxMargin->setValue (p->margin());
boxBorderWidth->setValue(p->lineWidth());
boxBorderColor->setColor(p->frameColor());
boxBackgroundColor->setColor(p->paletteBackgroundColor());
boxAxesLinewidth->setValue(d_graph->axesLinewidth());

boxFramed->setChecked(d_graph->framed());
boxFrameColor->setColor(d_graph->canvasFrameColor());
boxFrameWidth->setValue(d_graph->canvasFrameWidth());

boxBackbones->setChecked (d_graph->axesBackbones());

boxMinorTicksLength->setValue(d_graph->minorTickLength());
boxMajorTicksLength->setValue(d_graph->majorTickLength());
}

int axesDialog::mapToQwtAxisId()
{
int at=axesTitlesList->currentItem();
int axis=-1;
	
switch(at)   
        {
        case 0:
           axis = QwtPlot::xBottom;
        break;

        case 1:
            axis = QwtPlot::yLeft;
        break;

        case 2:
             axis = QwtPlot::xTop;
        break;

        case 3:
             axis = QwtPlot::yRight;
        break;
		}
return axis;
}

void axesDialog::updateScale(int axis)
{
boxStart->clear();
boxEnd->clear();
boxStep->clear();
boxUnit->hide();
boxUnit->clear();
		
boxStart->setText(scales[8*axis+0]);
boxEnd->setText(scales[8*axis+1]);
boxStep->setText(scales[8*axis+2]);
boxMajorValue->setValue(scales[8*axis+3].toInt());
boxMinorValue->setValue(scales[8*axis+4].toInt());
	
	int qwt_axis = 2;
	if (axis == 1)
		qwt_axis = 0;
	
	if (axesType[qwt_axis] == Graph::Time)
		{
		boxUnit->show();
		boxUnit->insertItem(tr("milisec."));
		boxUnit->insertItem(tr("sec."));
		boxUnit->insertItem(tr("min."));
		boxUnit->insertItem(tr("hours"));
			
		/*boxUnit->setCurrentItem (1);
		double milisec = (scales[8*axis+2]).toDouble();
		boxStep->setText(QString::number(milisec/1e3));*/
		}
	else if (axesType[qwt_axis] == Graph::Date)
		{
		boxUnit->show();
		boxUnit->insertItem(tr("days"));
		boxUnit->insertItem(tr("weeks"));			
		}

int stepOn=scales[8*axis+5].toInt();
if (stepOn)
	{
	btnStep->setChecked(TRUE);
	boxStep->setEnabled(TRUE);
	boxUnit->setEnabled(TRUE);
		
	btnMinor->setChecked(FALSE);
	boxMajorValue->setEnabled(FALSE);
	boxMinorValue->setEnabled(FALSE);
	}
else
	{
	btnStep->setChecked(FALSE);
	boxStep->setEnabled(FALSE);
	boxUnit->setEnabled(FALSE);
	btnMinor->setChecked(TRUE);
	boxMajorValue->setEnabled(TRUE);
	boxMinorValue->setEnabled(TRUE);
	}

int scaleType=scales[8*axis+6].toInt();
boxScaleType->setCurrentItem(scaleType);
	
bool inverted = false;
if (scales[8*axis+7] == "1")
	inverted = true;
btnInvert->setChecked(inverted);
}

void axesDialog::updateTitleBox(int axis)
{
QString s=titles[axis];
boxTitle->setText(s);
}

void axesDialog::setAxisTitles(QStringList t)
{
titles=t;
}

void axesDialog::pickAxisColor()
{
QColor c = QColorDialog::getColor( boxAxisColor->color(), this);
if ( !c.isValid() || c ==  boxAxisColor->color() )
	return;

boxAxisColor->setColor ( c ) ;

int axis=mapToQwtAxisId();
axesColors[axis]= c.name();
QString formula =  boxFormula->text().remove("\n");
if (!boxShowFormula->isChecked())
	formula = QString::null;
emit showAxis(axis, boxAxisType->currentItem(), formatInfo[axis], boxShowAxis->isChecked(), ticksType(), 
			  boxShowLabels->isChecked(), c, boxFormat->currentItem(), boxPrecision->value(), 
			  boxAngle->value(), boxBaseline->value(), formula);		
}

void axesDialog::setAxisType(int)
{
int a=mapToQwtAxisId();
int style = axesType[a];

boxAxisType->setCurrentItem(style);
showAxisFormatOptions(style);

if (style == 1)
	boxColName->setCurrentText(formatInfo[a]);
}

void axesDialog::setBaselineDist(int)
{
int a=mapToQwtAxisId();
boxBaseline->setValue(axesBaseline[a]);
}

void axesDialog::setAxesLabelsFormatInfo(const QStringList& lst)
{
formatInfo = lst;
}

void axesDialog::setAxesType(const Q3ValueList<int>& list)
{
axesType=list;
}

void axesDialog::setAxesBaseline(const Q3ValueList<int>& lst)
{
axesBaseline = lst;
}

void axesDialog::setTicksType(const Q3ValueList<int>& list)
{
ticks=list;
}

void axesDialog::setTicksType(int)
{
int a=mapToQwtAxisId();
switch (ticks[a])
	{
	case -1:
		boxTicksType->setCurrentItem(0);
	break;
	case 0:
		boxTicksType->setCurrentItem(3);
	break;
	case 1:
		boxTicksType->setCurrentItem(1);
	break;
	case 2:
		boxTicksType->setCurrentItem(2);
	break;
	}
}

void axesDialog::updateTicksType(int)
{
int axis=mapToQwtAxisId();
int type=ticksType();
if ( ticks[axis] == type)
	return;

ticks[axis]=type;
QString formula =  boxFormula->text().remove("\n");
if (!boxShowFormula->isChecked())
	formula = QString::null;
emit showAxis(axis,boxAxisType->currentItem(),formatInfo[axis], boxShowAxis->isChecked(), type,
			  boxShowLabels->isChecked(), QColor(axesColors[axis]), boxFormat->currentItem(),boxPrecision->value(), 
			  boxAngle->value(), boxBaseline->value(), formula);		
}

void axesDialog::setEnabledTickLabels(const QStringList& labelsOn)
{
tickLabelsOn=labelsOn;
}

void axesDialog::updateTickLabelsList()
{
bool on= boxShowLabels->isChecked();
boxColName->setEnabled(on);
boxFormat->setEnabled(on);
boxShowFormula->setEnabled(on);
boxFormula->setEnabled(on);

int axis=mapToQwtAxisId();
if (axis == QwtPlot::xBottom || axis == QwtPlot::xTop)
	boxAngle->setEnabled(on);
	
bool userFormat=TRUE;
if (boxFormat->currentItem() == 0)
	userFormat=FALSE;
boxPrecision->setEnabled(on && userFormat);

if ( tickLabelsOn[axis] == QString::number(on))
	return;
tickLabelsOn[axis]=QString::number(on);

int type = boxAxisType->currentItem();
if (type > 3)
	{
	QStringList lst = QStringList::split(";", formatInfo[axis], false);			
	lst[1] = boxFormat->currentText();
	formatInfo[axis]  = lst.join(";");
	}
else
	formatInfo[axis] = boxColName->currentText();

QString formula =  boxFormula->text().remove("\n");
if (!boxShowFormula->isChecked())
	formula = QString::null;
emit showAxis(axis, type, formatInfo[axis], boxShowAxis->isChecked(), ticksType(), 
			  boxShowLabels->isChecked(),QColor(axesColors[axis]), boxFormat->currentItem(), boxPrecision->value(),
			  boxAngle->value(), boxBaseline->value(), formula);			
}

// FIXME: This needs to be ported to Qwt5
void axesDialog::setCurrentScale(int axisPos)
{
#if false
int axis = -1;
if (generalDialog->currentPage()==(QWidget*)scalesPage)
	{
	if (axisPos == QwtScaleWidget::Left || axisPos == QwtScaleWidget::Right)
		axis = 1;
	else
		axis = 0;
	axesList->setCurrentItem (axis);
	}
else if (generalDialog->currentPage()==(QWidget*)axesPage)
	{
	switch (axisPos)
		{
		case QwtScaleWidget::Left:
			axis = 1;
		break;

		case QwtScaleWidget::Bottom:
			axis = 0;
		break;

		case QwtScaleWidget::Right:
			axis = 3;
		break;

		case QwtScaleWidget::Top:
			axis = 2;
		break;
		}
	axesTitlesList->setCurrentItem (axis);
	}
#endif
}

void axesDialog::showAxesPage()
{
if (generalDialog->currentPage()!=(QWidget*)axesPage)
	generalDialog->showPage(axesPage);
}

void axesDialog::showGridPage()
{
if (generalDialog->currentPage()!=(QWidget*)gridPage)
	generalDialog->showPage(gridPage);
}

int axesDialog::ticksType()
{
int ticks;
switch (boxTicksType->currentItem())
		{
		case 0:
			ticks=-1;
		break;
		case 1:
			ticks=1;
		break;
		case 2:
			ticks=2;
		break;
		case 3:
			ticks=0;
		break;
		}
return ticks;
}

void axesDialog::updateGrid(int)
{
if (generalDialog->currentPage()==gridPage)	
	{
	d_graph->setGridOptions(getGridOptions());
	d_graph->replot();
	}	
}

void axesDialog::setLabelsNumericFormat(const QStringList& list)
{
labelsNumericFormat=list;
}

void axesDialog::setLabelsNumericFormat(int)
{
int axis=mapToQwtAxisId();
int type = boxAxisType->currentItem();
int prec=boxPrecision->value();
int format=boxFormat->currentItem();

if (type == Graph::Numeric)
	{	
	if ( labelsNumericFormat[2*axis] ==QString::number(format)
		&& labelsNumericFormat[2*axis+1] ==QString::number(prec))
		return;

	if (format == 0)
		boxPrecision->setEnabled(FALSE);
	else
		boxPrecision->setEnabled(TRUE);

	labelsNumericFormat[2*axis] = QString::number(format);
	labelsNumericFormat[2*axis+1] = QString::number(prec);
	}
else if (type >= Graph::Time)
	{
	QStringList lst = QStringList::split(";", formatInfo[axis], false);			
	lst[1] = boxFormat->currentText();
	formatInfo[axis]  = lst.join(";");
	}
else
	formatInfo[axis] = boxColName->currentText();

QString formula =  boxFormula->text().remove("\n");
if (!boxShowFormula->isChecked())
	formula = QString::null;
emit showAxis(axis, type, formatInfo[axis], boxShowAxis->isChecked(), ticksType(),
			  boxShowLabels->isChecked(),QColor(axesColors[axis]), format, prec, 
			  boxAngle->value(), boxBaseline->value(), formula);		
}

void axesDialog::showAxisFormula(int axis)
{
QStringList l = d_graph->getAxesFormulas();
QString formula = l[axis];
if (!formula.isEmpty())
	{
	boxShowFormula->setChecked(true);
	boxFormula->show();
	boxFormula->setText(formula);
	}
else
	{
	boxShowFormula->setChecked(false);
	boxFormula->clear();
	boxFormula->hide();
	}
}

void axesDialog::updateLabelsFormat(int)
{
int a=mapToQwtAxisId();
int format=labelsNumericFormat[2*a].toInt();
if (format != Graph::Numeric)
	return;

boxFormat->setCurrentItem(format);

int prec=labelsNumericFormat[2*a+1].toInt();
boxPrecision->setValue(prec);
	
if (format == 0)
	boxPrecision->setEnabled(FALSE);
else
	boxPrecision->setEnabled(TRUE);

QStringList l = d_graph->getAxesFormulas();
QString formula = l[a];
if (!formula.isEmpty())
	{
	boxShowFormula->setChecked(true);
	boxFormula->show();
	boxFormula->setText(formula);
	}
else
	{
	boxShowFormula->setChecked(false);
	boxFormula->clear();
	boxFormula->hide();
	}
}

void axesDialog::initLabelsRotation(int xAngle, int yAngle)
{
xBottomLabelsRotation=xAngle;
xTopLabelsRotation=yAngle;
}

void axesDialog::showGeneralPage()
{
generalDialog->showPage (frame);
}

void axesDialog::showFormulaBox()
{
if (boxShowFormula->isChecked())
	boxFormula->show();
else
	boxFormula->hide();
}

void axesDialog::showLowerGreek()
{
SymbolDialog *greekLetters = new SymbolDialog(SymbolDialog::lowerGreek, this, Qt::Tool);
greekLetters->setAttribute(Qt::WA_DeleteOnClose);
connect(greekLetters, SIGNAL(addLetter(const QString&)), this, SLOT(addSymbol(const QString&)));
greekLetters->show();
greekLetters->setActiveWindow();
}

void axesDialog::showUpperGreek()
{
SymbolDialog *greekLetters = new SymbolDialog(SymbolDialog::upperGreek, this, Qt::Tool);
greekLetters->setAttribute(Qt::WA_DeleteOnClose);
connect(greekLetters, SIGNAL(addLetter(const QString&)), this, SLOT(addSymbol(const QString&)));
greekLetters->show();
greekLetters->setActiveWindow();
}

void axesDialog::addSymbol(const QString& letter)
{
boxTitle->insert(letter);
}

void axesDialog::addCurve()
{
int line=0, col=0;
boxTitle->getCursorPosition (&line,&col);
boxTitle->insert("\\c{}");
boxTitle->setCursorPosition (line,col+3);
}

void axesDialog::addUnderline()
{
if (boxTitle->hasSelectedText())
	{	
	QString markedText=boxTitle->selectedText();
	boxTitle->insert("<u>" + markedText + "</u>");
	}
else
	{	
	int line=0, col=0;
	boxTitle->getCursorPosition (&line,&col);
	boxTitle->insert("<u></u>");
	boxTitle->setCursorPosition (line,col+3);
	}
}

void axesDialog::addItalic()
{
if (boxTitle->hasSelectedText())
	{	
	QString markedText=boxTitle->selectedText ();
	boxTitle->insert("<i>"+markedText+"</i>");
	}
else
	{	
	int line=0, col=0;
	boxTitle->getCursorPosition (&line,&col);
	boxTitle->insert("<i></i>");
	boxTitle->setCursorPosition (line,col+3);
	}
}

void axesDialog::addBold()
{	
if (boxTitle->hasSelectedText())
	{	
	QString markedText=boxTitle->selectedText ();
	boxTitle->insert("<b>"+markedText+"</b>");
	}
else
	{
	int line=0, col=0;
	boxTitle->getCursorPosition (&line,&col);
	boxTitle->insert("<b></b>");
	boxTitle->setCursorPosition (line,col+3);
	}
}

void axesDialog::addIndex()
{	
if (boxTitle->hasSelectedText())
	{	
	QString markedText=boxTitle->selectedText ();
	boxTitle->insert("<sub>"+markedText+"</sub>");
	}
else
	{	
	int line=0, col=0;
	boxTitle->getCursorPosition (&line,&col);
	boxTitle->insert("<sub></sub>");
	boxTitle->setCursorPosition (line,col+5);
	}
}

void axesDialog::addExp()
{
if (boxTitle->hasSelectedText())
	{	
	QString markedText=boxTitle->selectedText ();
	boxTitle->insert("<sup>"+markedText+"</sup>");
	}
else
	{
	int line, col;
	boxTitle->getCursorPosition (&line,&col);
	boxTitle->insert("<sup></sup>");
	boxTitle->setCursorPosition (line,col+5);
	}
}

void axesDialog::customAxisLabelFont()
{
int axis = mapToQwtAxisId();
bool okF;
QFont oldFont = d_graph->axisTitleFont(axis);
QFont fnt = QFontDialog::getFont( &okF, oldFont,this);
if (okF && fnt != oldFont)
	d_graph->setAxisTitleFont(axis, fnt);
}

axesDialog::~axesDialog()
{
}
